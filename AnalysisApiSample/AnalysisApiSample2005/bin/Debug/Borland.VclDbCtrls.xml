<?xml version="1.0" encoding="UTF-8"?>
<doc>
   <assembly>Borland.VclDbCtrls</assembly>
   <members>
      <member name="T:Borland.Vcl.DBPWDlg.TPasswordDialog">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBPWDlg">TPasswordDialog</class> is a dialog box that allows the user to specify passwords for the current BDE session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBPWDlg">TPasswordDialog</class> to allow the user to specify passwords for the current session in a BDE-based application. (The current session is represented by a TSession object.) The passwords are used when the application opens a Paradox table that requires a password. If a table requires a password that has not been added to the current session, the user will be prompted for the password.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A <class namespace="DBPWDlg">TPasswordDialog</class> object is usually created with the PasswordDialog function. However, <class namespace="DBPWDlg">TPasswordDialog</class> can also be used as a base object for other types of password dialog boxes.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBPWDlg.Borland.Vcl.DBPWDlg.EditChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls what happens when the contents of the edit box change.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBPWDlg" class="TPasswordDialog">EditChange</method> enables or disables the Add, OK, and Remove buttons according to whether the edit box contains a password. If the edit box contains a password, the buttons are enabled. Otherwise the buttons are disabled.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the AddButtonClick method has been called, then the OK button is enabled, regardless of whether the edit box contains a password.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBPWDlg.Borland.Vcl.DBPWDlg.AddButtonClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls what happens when the Add button is clicked.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBPWDlg" class="TPasswordDialog">AddButtonClick</method> adds the password in the edit box to the current session. Then <method namespace="DBPWDlg" class="TPasswordDialog">AddButtonClick</method> clears and sets focus to the edit box.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After the <method namespace="DBPWDlg" class="TPasswordDialog">AddButtonClick</method> method is called, the OK Button is enabled, regardless of whether the edit box currently contains a password.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBPWDlg.Borland.Vcl.DBPWDlg.RemoveButtonClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes the password in the edit box from the current session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBPWDlg" class="TPasswordDialog">RemoveButtonClick</method> removes the password in the edit box from the current session. Then <method namespace="DBPWDlg" class="TPasswordDialog">RemoveButtonClick</method> clears and sets focus to the edit box.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBPWDlg.Borland.Vcl.DBPWDlg.RemoveAllButtonClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes all passwords from the current session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBPWDlg" class="TPasswordDialog">RemoveAllButtonClick</method> removes all passwords from the current session. Then <method namespace="DBPWDlg" class="TPasswordDialog">RemoveAllButtonClick</method> sets focus to the edit box.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBPWDlg.Borland.Vcl.DBPWDlg.OKButtonClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls what happens when the OK button is clicked.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBPWDlg" class="TPasswordDialog">OKButtonClick</method> adds the password in the edit box to the current session.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBPWDlg.PasswordDialog">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Displays a dialog box that prompts the user for the password of a local password-protected table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="DBPWDlg">PasswordDialog</routine> to allow the user to enter a password for a password-protected <condition os="Windows">Paradox or dBase </condition>table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ASession is the interface of a component that represents the session onto which the user logs in.<condition os="Windows"> Typically, this is the interface of a TSession component.</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the user clicks OK in the dialog box, <routine namespace="DBPWDlg">PasswordDialog</routine> returns true. Otherwise it returns false.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>
                  
                  <condition os="Windows">When an application opens a Paradox or dBASE table that requires a password, the user is prompted to enter a password unless the Session already has a valid password for that table. </condition>
               
               </para>
            
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetAction</class> is the base class for action objects that act on dataset components.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetAction</class> implements the common behavior for actions that work with datasets. Each descendant class performs a specific database function. Do not use <class namespace="DBActns">TDataSetAction</class> directly in an application. Instead, use a <class namespace="DBActns">TDataSetAction</class> descendant such as TDataSetCancel, TDataSetDelete, TDataSetEdit, TDataSetFirst, TDataSetInsert, TDataSetLast, TDataSetNext, TDataSetPost, TDataSetPrior, or TDataSetRefresh.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetAction</class> ensures that the action is only enabled to work with a TDataSource component as its target. This TDataSource is first located as the data source that connects an active data-aware control to its source dataset. <class namespace="DBActns">TDataSetAction</class> saves this data source as the DataSource property, which descendants then use to perform their specific database functions.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.HandlesTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the action can execute its function.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetAction">HandlesTarget</method> method. This method is called automatically when the user invokes an object (such as a tool button or menu item) that is linked to this action. The <method namespace="DBActns" class="TDataSetAction">HandlesTarget</method> method provides the action object with an opportunity to indicate whether it is appropriate to execute at this time with the object specified by the Target parameter as a "target".</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Target is the current target object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetAction">HandlesTarget</method> checks that the target of is a TDataSource component with a DataSet property that is not nil (Delphi) or NULL (C++). If so, it returns true. If not, it returns false.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBActns.Borland.Vcl.DBActns.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides access to the target of the action.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBActns" class="TDataSetAction">DataSource</property> is the data source that represents the dataset on which the action performs its function. You can set this property to indicate the dataset that is the target of the action.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you do not explicitly set the <property namespace="DBActns" class="TDataSetAction">DataSource</property> property, it is obtained from an active data-aware control when the action fires.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetFirst">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetFirst</class> moves a target dataset to its first record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetFirst</class> to an action list to allow users to navigate to the first record in a dataset. Controls such as menu items and tool buttons linked to this action cause the target dataset to move to the first record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetFirst</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. <class namespace="DBActns">TDataSetFirst</class> automatically disables itself if it does not have a target data source attached to an active dataset that is not already on the first record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Navigates to the first record of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetFirst">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetFirst">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetFirst">ExecuteTarget</method> calls the associated dataset's First method to move to the first record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetFirst">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetFirst">TDataSetFirst</method>, <method namespace="DBActns" class="TDataSetFirst">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is active and which is not already on the first record. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetFirst">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetPrior">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetPrior</class> moves a target dataset to the previous record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetPrior</class> to an action list to allow users to navigate to the previous record in a dataset. Controls such as menu items and tool buttons linked to this action cause the target dataset to move to the previous record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetPrior</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. If you set DataSource, do not set it to a data source whose dataset is unidirectional. <class namespace="DBActns">TDataSetPrior</class> automatically disables itself if it does not have a target data source attached to an active dataset that is not on the first record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Navigates to the previous record of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetPrior">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetPrior">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetPrior">ExecuteTarget</method> calls the associated dataset's Prior method to move to the previous record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetPrior">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetPrior">TDataSetPrior</method>, <method namespace="DBActns" class="TDataSetPrior">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is active and which is not on the first record. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetPrior">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetNext">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetNext</class> moves a target dataset to its next record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetNext</class> to an action list to allow users to navigate to the next record in a dataset. Controls such as menu items and tool buttons linked to this action cause the target dataset to move to the last record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetNext</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. <class namespace="DBActns">TDataSetNext</class> automatically disables itself if it does not have a target data source attached to an active dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Navigates to the next record of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetNext">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetNext">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetNext">ExecuteTarget</method> calls the associated dataset's Next method to move to the next record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetNext">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetNext">TDataSetNext</method>, <method namespace="DBActns" class="TDataSetNext">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is active and which is not on the last record. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetNext">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetLast">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetLast</class> moves a target dataset to its last record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetLast</class> to an action list to allow users to navigate to the last record in a dataset. Controls such as menu items and tool buttons linked to this action cause the target dataset to move to the last record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetLast</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. If you set DataSource, do not set it to a data source whose dataset is unidirectional. <class namespace="DBActns">TDataSetLast</class> automatically disables itself if it does not have a target data source attached to an active dataset that is not already on the last record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Navigates to the last record of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetLast">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetLast">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetLast">ExecuteTarget</method> calls the associated dataset's Last method to move to the last record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetLast">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetLast">TDataSetLast</method>, <method namespace="DBActns" class="TDataSetLast">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is active and which is not already on the last record. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetLast">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetInsert">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetInsert</class> inserts a new record into a target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetInsert</class> to an action list to allow users to insert new records in a dataset. Controls such as menu items and tool buttons linked to this action cause the target dataset to insert a new record above the current one and go into edit mode.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetInsert</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. <class namespace="DBActns">TDataSetInsert</class> automatically disables itself if it does not have a target data source attached to an active dataset that permits edits.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inserts a new record above the current one in the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetInsert">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetInsert">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetInsert">ExecuteTarget</method> calls the associated dataset's Insert method to insert a new, empty, record above the current record and put the dataset in edit mode.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetInsert">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetInsert">TDataSetInsert</method>, <method namespace="DBActns" class="TDataSetInsert">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is active and which permits edits. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetInsert">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetDelete">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetDelete</class> deletes the current record, making the next record current.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetDelete</class> to an action list to allow users to delete records from a dataset. Controls such as menu items and tool buttons linked to this action cause the application to delete the current record of a dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetDelete</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. <class namespace="DBActns">TDataSetDelete</class> automatically disables itself if it does not have a target data source attached to an active, nonempty dataset that permits edits.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes the current record in the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetDelete">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetDelete">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetDelete">ExecuteTarget</method> calls the associated dataset's Delete method to delete the current record and make the following record current.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetDelete">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetDelete">TDataSetDelete</method>, <method namespace="DBActns" class="TDataSetDelete">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is not empty and that permits edits. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetDelete">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetEdit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetEdit</class> puts a target dataset into edit mode.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetEdit</class> to an action list to allow users to put a dataset into edit mode. Controls such as menu items and tool buttons linked to this action cause the application to put a dataset into edit mode if it can.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetEdit</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. <class namespace="DBActns">TDataSetEdit</class> automatically disables itself if it does not have a target data source attached to a dataset that permits edits.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Puts the target dataset into edit mode.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetEdit">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetEdit">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetEdit">ExecuteTarget</method> calls the associated dataset's Edit method to put the dataset into edit mode.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetEdit">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetEdit">TDataSetEdit</method>, <method namespace="DBActns" class="TDataSetEdit">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is permits edits and which is not already in edit mode. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetEdit">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetPost">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetPost</class> posts the edits in the current record of a target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetPost</class> to an action list to allow users to post dataset records. Controls such as menu items and tool buttons linked to this action cause the target dataset to post any edits made to the current record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetPost</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. <class namespace="DBActns">TDataSetPost</class> automatically disables itself if it does not have a target data source attached to a dataset that is in edit mode.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Posts the current record in the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetPost">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetPost">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetPost">ExecuteTarget</method> calls the associated dataset's Post method to post all edits to the current record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetPost">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetPost">TDataSetPost</method>, <method namespace="DBActns" class="TDataSetPost">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is in edit mode. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetPost">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetCancel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetCancel</class> cancels the edits to the current record, restores record display to its condition prior to editing, and takes the dataset out of edit mode.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetCancel</class> to an action list to allow users to cancel edits made to a dataset in the application. Controls such as menu items and tool buttons linked to this action cause the application to cancel edits, restore record display, and take the associated dataset out of edit mode.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetCancel</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. <class namespace="DBActns">TDataSetCancel</class> automatically disables itself if it does not have a target data source attached to an active dataset that is in edit mode.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.ExecuteTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Cancels unposted edits and takes the dataset out of edit mode.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetCancel">ExecuteTarget</method> method. This method is called automatically when the action fires in response to a user action (for example, when the user selects a menu item or presses a tool button that is linked to this action).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBActns" class="TDataSetCancel">ExecuteTarget</method> checks that Target is a data source component that has an associated dataset. If the DataSource property is set, Target must be the same data source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Target is a valid data source, <method namespace="DBActns" class="TDataSetCancel">ExecuteTarget</method> calls the associated dataset's Cancel method to back out any unposted edits and take the dataset out of edit mode.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetCancel">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetCancel">TDataSetCancel</method>, <method namespace="DBActns" class="TDataSetCancel">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is in edit mode. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetCancel">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBActns.TDataSetRefresh">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetRefresh</class> refreshes the records in a target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <class namespace="DBActns">TDataSetRefresh</class> to an action list to allow users to refresh a dataset with the most current data. Controls such as menu items and tool buttons linked to this action cause the target dataset to refetch its data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBActns">TDataSetRefresh</class> is designed to work with a TDataSource component as its target. You can explicitly provide this target by setting the DataSource property, or you can allow the action to infer the data source from an active data-aware control. <class namespace="DBActns">TDataSetRefresh</class> automatically disables itself if it does not have a target data source attached to an active dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBActns.Borland.Vcl.DBActns.UpdateTarget">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables or disables the action, depending on the state of the target dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="DBActns" class="TDataSetRefresh">UpdateTarget</method> method. This method is called automatically so that actions can update themselves according to current conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In <method namespace="DBActns" class="TDataSetRefresh">TDataSetRefresh</method>, <method namespace="DBActns" class="TDataSetRefresh">UpdateTarget</method> checks whether the current target object (specified by the Target parameter) is a data source whose dataset is active and permits edits. If so, it sets Enabled to true. If not, <method namespace="DBActns" class="TDataSetRefresh">UpdateTarget</method> sets Enabled to false.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBLogDlg.TLoginDialog">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBLogDlg">TLoginDialog</class> is a login dialog box that can be used to provide login security in an application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBLogDlg">TLoginDialog</class> to provide login security within an application. Usually a <class namespace="DBLogDlg">TLoginDialog</class> object is created with the LoginDialogEx or RemoteLoginDialog function and is used to provide secure access to <condition os="Windows">local </condition>database tables. However, <class namespace="DBLogDlg">TLoginDialog</class> can also be used as a base object for other types of login dialog boxes.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBLogDlg.Borland.Vcl.DBLogDlg.FormShow">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adjusts the contents of the login dialog when it becomes visible.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBLogDlg" class="TLoginDialog">FormShow</method> is called automatically just before the login dialog becomes visible. It fixes up the controls in the login dialog so that the text appears properly formatted.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBLogDlg.LoginDialog">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Brings up the database Login dialog to allow the user to connect to a database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="QDBLogDlg">LoginDialog</routine> to bring up the standard Login dialog box to prompt the user for a valid user name and password. The ADatabaseName parameter specifies the database for which access is being requested. The dialog returns the user name and password as the AUserName and APassword parameters.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>When building cross-platform applications in C++, add QDBLogDlg.pas unit (instead of DBLogDlg) to your project if you want the default Database Login dialog to display at runtime. QDBLogDlg does not need to be included if your C++ application includes a DBGrid component.</para>
            
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="QDBLogDlg">LoginDialog</routine> returns false if the user cancels out of the dialog. If <routine namespace="QDBLogDlg">LoginDialog</routine> returns true, the application can attempt to connect to the database server using the supplied user name and password.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>If the user should not be permitted to change the user name from within the login dialog, use the <routine namespace="QDBLogDlg">LoginDialog</routine>Ex function.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBLogDlg.LoginDialogEx">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Brings up the database Login dialog to allow the user to connect to a database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="QDBLogDlg">LoginDialogEx</routine> to bring up the standard Login dialog box to prompt the user for a valid user name and password. The ADatabaseName parameter specifies the database for which access is being requested. The NameReadOnly parameter specifies whether the user can change the user name from within the dialog.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The dialog returns the user name and password as the AUserName and APassword parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="QDBLogDlg">LoginDialogEx</routine> returns false<condition language="Delphi"/>if the user cancels out of the dialog. If <routine namespace="QDBLogDlg">LoginDialogEx</routine> returns true, the application can attempt to connect to the database server using the supplied user name and password.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>When building cross-platform applications in C++, add QDBLogDlg.pas unit (instead of DBLogDlg) to your project if you want the default Database Login dialog to display at runtime. QDBLogDlg does not need to be included if your C++ application includes a DBGrid component.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBLogDlg.RemoteLoginDialog">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Brings up the database Login dialog to allow the user to connect to a database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="QDBLogDlg">RemoteLoginDialog</routine> to bring up the standard Login dialog box to prompt the user for a valid user name and password.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The dialog returns the user name and password as the AUserName and APassword parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RemotLoginDialog returns false if the user cancels out of the dialog. If <routine namespace="QDBLogDlg">RemoteLoginDialog</routine> returns true, the application can attempt to connect to the database server using the supplied user name and password.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>When building cross-platform applications in C++, add QDBLogDlg.pas unit (instead of DBLogDlg) to your project if you want the default Database Login dialog to display at runtime. QDBLogDlg does not need to be included if your C++ application includes a DBGrid component.</para>
            
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCGrids.TDBCtrlGridLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbcgrids">TDBCtrlGridLink</class> helps manage data events for a TDBCtrlGrid object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbcgrids">TDBCtrlGridLink</class> is tailored to work with a TDBCtrlGrid. It should only be used by the TDBCtrlGrid class.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGridLink">Create</method>s an instance of <method namespace="dbcgrids" class="TDBCtrlGridLink">TDBCtrlGridLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call the <method namespace="dbcgrids" class="TDBCtrlGridLink">Create</method> method for a <method namespace="dbcgrids" class="TDBCtrlGridLink">TDBCtrlGridLink</method> directly. The TDBCtrlGrid that owns a <method namespace="dbcgrids" class="TDBCtrlGridLink">TDBCtrlGridLink</method> calls <method namespace="dbcgrids" class="TDBCtrlGridLink">Create</method> from its own constructor.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCGrids.TDBCtrlPanel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbcgrids">TDBCtrlPanel</class> represents a panel in a TDBCtrlGrid object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="dbcgrids">TDBCtrlPanel</class> to hold the fields from a single record in a dataset.  TDBCtrlGrid represents the records in a dataset by arranging copies of the same <class namespace="dbcgrids">TDBCtrlPanel</class> object in rows or columns, where each panel represents a single record in the dataset.  </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lay out a single panel at design time. Add data-aware edit controls or data display objects.  At runtime, TDBCtrlGrid replicates the panel for the records in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The appearance of the panel is determined by the properties of the TDBCtrlGrid object that contains the panel. The OnPaintPanel event of TDBCtrlGrid allows customized painting of the panels.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.CreateLinked">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates and initializes an instance of <method namespace="dbcgrids" class="TDBCtrlPanel">TDBCtrlPanel</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the constructor for <method namespace="dbcgrids" class="TDBCtrlPanel">TDBCtrlPanel</method> directly. TDBCtrlGrid calls the <method namespace="dbcgrids" class="TDBCtrlPanel">CreateLinked</method> method for <method namespace="dbcgrids" class="TDBCtrlPanel">TDBCtrlPanel</method> from its own constructor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlPanel">CreateLinked</method> initializes the Parent property to the DBCtrlGrid parameter and initializes the ControlStyle property to include [csAcceptsControls, csCaptureMouse, csClickEvents, csDoubleClicks, csOpaque, csReplicatable].</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCGrids.TDBCtrlGrid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbcgrids">TDBCtrlGrid</class> displays records from a data source in a free-form layout.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Put a <class namespace="dbcgrids">TDBCtrlGrid</class> object on a form to display and edit the records from a database table or query. Unlike the TDBGrid object, which displays each record in a single row, <class namespace="dbcgrids">TDBCtrlGrid</class> allows a free-form layout for each record in the dataset. Each record is displayed in its own panel; Design one panel at design time and <class namespace="dbcgrids">TDBCtrlGrid</class> replicates that panel for each record displayed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">At runtime, users can use the database navigator (TDBNavigator) to move through data in the <class namespace="dbcgrids">TDBCtrlGrid</class> object, and to insert, delete, and edit the data. Edits made using the data grid are not posted to the underlying dataset until the user moves to a different record or closes the application.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Executes an action with the DB control grid as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGrid">ExecuteAction</method> is called automatically when the user invokes an action with the DB control grid as its target. The Action parameter specifies the action that was invoked. <method namespace="dbcgrids" class="TDBCtrlGrid">ExecuteAction</method> returns a boolean value indicating whether the action was successfully executed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGrid">ExecuteAction</method> first calls the inherited method, which checks whether the action knows how to execute with the grid as a target. If this does not successfully dispatch the action, <method namespace="dbcgrids" class="TDBCtrlGrid">ExecuteAction</method> attempts to invoke the action with the grid's associated dataset as a target.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGrid">UpdateAction</method> is called automatically when the application is idle allow the grid to set action properties to reflect the current state of the grid. The Action parameter is the action to be updated. <method namespace="dbcgrids" class="TDBCtrlGrid">UpdateAction</method> returns a boolean that indicates whether the action was updated by the grid.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method>, <method namespace="dbcgrids" class="TDBCtrlGrid">UpdateAction</method> checks whether the action relies on the state of the associated dataset, and if so, updates the action accordingly.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGrid">Create</method>s and initializes an instance of <method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="dbcgrids" class="TDBCtrlGrid">Create</method> to create and initialize a <method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method> object at runtime.<method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method> objects placed in a form at design time are created automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is a component that becomes the value of the Owner property. This component, typically the form, is responsible for freeing the <method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method> instance.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.KeyDown">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Performs special processing when a key is pressed.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the On<method namespace="dbcgrids" class="TDBCtrlGrid">KeyDown</method> event handler, <method namespace="dbcgrids" class="TDBCtrlGrid">KeyDown</method> translates each combination of the Key and Shift parameters into a logical key code and calls the DoKey method to perform the appropriate action.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGrid">KeyDown</method> performs the following translations:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Key and Shift values</th>
                        
                  <th>Key code</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>LeftArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkLeft</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>RightArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkRight</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>UpArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkUp</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>DownArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkDown</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>PageUp</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkPageUp</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>PageDown</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkPageDown</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Home</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkHome</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>End</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkEnd</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Return</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkEditMode</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>F2</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkEditMode</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Insert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkAppend</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+Insert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkInsert</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+Delete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkDelete</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Escape</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkCancel</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>All other keys</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>gkNull</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.DoKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements the responses to a number of standard keystrokes. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="dbcgrids" class="TDBCtrlGrid">DoKey</method> to perform the operation specified by the Key parameter. For example, use <method namespace="dbcgrids" class="TDBCtrlGrid">DoKey</method> to remap keystrokes from an OnKeyDown event handler.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The actions performed for the different values of Key are given in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Action</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkNull</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Do nothing.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkEditMode</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Toggle the EditMode property.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkPriorTab</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the previous panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkNextTab</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the next panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkLeft</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move one panel to the left.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkRight</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move one panel to the right.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkUp</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move one panel up.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkDown</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move one panel down.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkScrollUp</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move one panel up.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkScrollDown</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move one panel down.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkPageUp</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move ColCount * RowCount records up in the dataset.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkPageDown</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move ColCount * RowCount records down in the dataset.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkHome</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the first record in the dataset.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkEnd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the last record in the dataset.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkInsert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Insert a new record prior to the current record in the dataset and set EditMode to true.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkAppend</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Insert a new record at the end of the dataset and set EditMode to true.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Delete the current record from the dataset and set EditMode to false.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>gkCancel</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Cancel any edits not written to the dataset and set EditMode to false.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.GetTabOrderList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Overrides the default to remove all child controls from the tab order.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGrid">GetTabOrderList</method> returns an empty list. <method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method> implements its own handling of the tab key to move through the panels in database order.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGrid">Destroy</method>s an instance of <method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="dbcgrids" class="TDBCtrlGrid">Destroy</method> directly in an application. Instead, call Free, which checks that the <method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method> reference is not nil, and only then calls <method namespace="dbcgrids" class="TDBCtrlGrid">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbcgrids" class="TDBCtrlGrid">Destroy</method> frees the helper objects used by <method namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</method> before calling the inherited destructor.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.Canvas">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the drawing surface used to draw the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property>Object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties and methods of <property namespace="dbcgrids" class="TDBCtrlGrid">Canvas</property> to draw an image of a panel in the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object from an OnPaintPanel event handler.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.EditMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> can be used to insert, delete, or edit records.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">EditMode</property> to true to allow the user to edit the dataset using the grid. The user can toggle <property namespace="dbcgrids" class="TDBCtrlGrid">EditMode</property> by pressing F2 or Enter. Inserting or deleting records using the grid will set <property namespace="dbcgrids" class="TDBCtrlGrid">EditMode</property> to true.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.PanelCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of records visible in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> can represent a number of panels equal to the number in ColCount times the number in RowCount. Usually, <property namespace="dbcgrids" class="TDBCtrlGrid">PanelCount</property> will be the same as this value. <property namespace="dbcgrids" class="TDBCtrlGrid">PanelCount</property> will be smaller than this if there are not enough records in the dataset to fill the entire grid.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.PanelIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the index of the panel in the grid that represents the current record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="dbcgrids" class="TDBCtrlGrid">PanelIndex</property> to determine which panel represents the current record in the dataset. Set <property namespace="dbcgrids" class="TDBCtrlGrid">PanelIndex</property> to move in the dataset to the record corresponding to a panel in the grid.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbcgrids" class="TDBCtrlGrid">PanelIndex</property> is a number in the range 0 to PanelCount - 1, where 0 is the first panel, 1 is the second panel, and so on. The location of the panel with the index <property namespace="dbcgrids" class="TDBCtrlGrid">PanelIndex</property> depends on the value of the Orientation property. When Orientation is goVertical, the panels are counted by rows. When Orientation is goHorizontal, the panels are counted by columns.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.AllowDelete">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the user can delete the current record from the dataset by pressing Ctrl+Delete.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">AllowDelete</property> to false to prevent the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object from deleting records. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="dbcgrids" class="TDBCtrlGrid">AllowDelete</property> is false, <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> will not delete records from the dataset when the user presses Ctrl+Delete or the DoKey method is called with the Key parameter set to gkDelete. The <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object can still be used to insert records.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="dbcgrids" class="TDBCtrlGrid">AllowDelete</property> is true (the default), <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> will delete the current record when the user presses Ctrl+Delete or when the DoKey method is called with the Key parameter set to gkDelete. Even with <property namespace="dbcgrids" class="TDBCtrlGrid">AllowDelete</property> set to true, records cannot be deleted unless the dataset is in edit mode.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.AllowInsert">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the user can insert new records with the Insert key or append new records with the Ctrl+Insert key combination.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">AllowInsert</property> to false to prevent the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object from inserting records. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="dbcgrids" class="TDBCtrlGrid">AllowInsert</property> is false, <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> does not insert records into the dataset when the user presses Insert or Ctrl+Insert or when the DoKey method is called with the Key parameter set to gkInsert or gkAppend. The <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object can still be used to delete records.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="dbcgrids" class="TDBCtrlGrid">AllowInsert</property> is true (the default), <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> inserts a new record into the dataset before the current record when the user presses Insert or appends a new record to the end of the dataset when the user presses Ctrl+Insert. Even with <property namespace="dbcgrids" class="TDBCtrlGrid">AllowInsert</property> set to true, records cannot be inserted unless the dataset is in edit mode.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.ColCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of columns of panels shown in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">ColCount</property> to the number of columns of panels that should appear in the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object. Each panel represents a separate record in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="dbcgrids" class="TDBCtrlGrid">ColCount</property> causes the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object to resize to accommodate the new number of columns. PanelWidth doesn't change.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the link to the dataset where the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object finds its data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">DataSource</property> to the T<property namespace="dbcgrids" class="TDBCtrlGrid">DataSource</property> object that links to the dataset where the grid should fetch its data. <property namespace="dbcgrids" class="TDBCtrlGrid">DataSource</property> allows the data-aware grid to read from, write to, and navigate around the dataset.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBCtrlGrid1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBCtrlGrid1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.Orientation">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines the order in which records from the dataset are displayed in the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property>. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">Orientation</property> to goVertical (the default) to have the panels ordered in rows with a vertical scroll bar. Set <property namespace="dbcgrids" class="TDBCtrlGrid">Orientation</property> to goHorizontal to arrange panels in columns with a horizontal scroll bar. </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.PanelBorder">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether each panel is drawn with a raised border around it.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The default value of gbRaised draws a raised border. Set <property namespace="dbcgrids" class="TDBCtrlGrid">PanelBorder</property> to gbNone to eliminate the border.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.PanelHeight">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the height (in pixels) of each panel.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">PanelHeight</property> to the desired size of each panel in the grid. When the <property namespace="dbcgrids" class="TDBCtrlGrid">PanelHeight</property> property is set, the grid resizes itself to fit the new panel height.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.PanelWidth">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the width (in pixels) of each panel.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">PanelWidth</property> to the desired size of each panel in the grid. When the <property namespace="dbcgrids" class="TDBCtrlGrid">PanelWidth</property> property is set, the grid resizes itself to fit the new panel width.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.RowCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of rows of panels displayed in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">RowCount</property> to the number of rows of panels that should appear in the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object. Each panel represents a separate record in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="dbcgrids" class="TDBCtrlGrid">RowCount</property> causes the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> object to resize to accommodate the new number of rows. PanelHeight does not change.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.SelectedColor">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the background color of the panel that represents the current record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">SelectedColor</property> to a value other than value of the Color property to make the panel that represents the current record stand out. <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> draws the selected panel using <property namespace="dbcgrids" class="TDBCtrlGrid">SelectedColor</property> even when it does not have input focus. All other panels are drawn with the background set to the value of the Color property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.ShowFocus">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether to draw a focus rectangle around the current record in the <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> when it has input focus.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="dbcgrids" class="TDBCtrlGrid">ShowFocus</property> to true to have <property namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</property> draw a focus rectangle around the current record when it has input focus. Set <property namespace="dbcgrids" class="TDBCtrlGrid">ShowFocus</property> to false when providing visual feedback of focus in some other manner in an OnPaintPanel event handler.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCGrids.Borland.Vcl.DBCGrids.OnPaintPanel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when <event namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</event> needs to draw a panel in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="dbcgrids" class="TDBCtrlGrid">OnPaintPanel</event> event handler to customize the drawing of a panel in the <event namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</event> object. <event namespace="dbcgrids" class="TDBCtrlGrid">TDBCtrlGrid</event> paints the background using the Color or SelectedColor property, including the raised border if it is specified by the PanelBorder property. Then the <event namespace="dbcgrids" class="TDBCtrlGrid">OnPaintPanel</event> event occurs to allow an event handler to add to the image of the panel.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The DBCtrlGrid parameter is the grid that contains the panel. The Index parameter is the index of the panel being painted, where 0 is the first panel, 1 is the second panel, and so on. Use the PanelIndex property to determine whether the panel being drawn is selected.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the Canvas property to paint the panel. The point (0,0) on the canvas is the upper left corner of the panel, and the point (PanelWidth, PanelHeight) is the lower right corner.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls placed on the panel are drawn separately and do not need to be drawn in an <event namespace="dbcgrids" class="TDBCtrlGrid">OnPaintPanel</event> event handler.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TColumnValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TColumnValue</type> and <type namespace="DRIntf">TColumnValue</type>s indicate which properties on the column of a DB grid are persistent.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TColumnValue</type>s is a set that indicates which properties of a column have been set as persistent properties (overriding the defaults). It can contain zero or more of the following <type namespace="DRIntf">TColumnValue</type> values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Indicates changes to</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvColor</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column's Color property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvWidth</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column's Width property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvFont</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column's Font property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvAlignment</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column's Alignment property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvReadOnly</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column's ReadOnly property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvTitleColor</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column title's Color property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvTitleCaption</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column title's Caption property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvTitleAlignment</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column title's Alignment property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvTitleFont</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column title's Font property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvImeMode</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column's ImeMode property.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cvImeName</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column's ImeName property.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TColumnTitle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TColumnTitle</class> represents the title of a data-grid column (TColumn).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TDBGrid uses a TDBGridColumns to maintain a collection of TColumn objects. Each TColumn has an associated <class namespace="DBGrids">TColumnTitle</class> that holds information about its title. The <class namespace="DBGrids">TColumnTitle</class> instance is stored in the column's Title property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultAlignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default alignment of the column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumnTitle">DefaultAlignment</method> returns the alignment for the column that should be used if the Alignment property is not explicitly set. The <method namespace="DBGrids" class="TColumnTitle">DefaultAlignment</method> property for <method namespace="DBGrids" class="TColumnTitle">TColumnTitle</method> always returns taLeftJustify. Descendants of <method namespace="DBGrids" class="TColumnTitle">TColumnTitle</method> can override this to compute the default alignment in an appropriate way.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultColor">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default background color for the column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBGrids" class="TColumnTitle">DefaultColor</method> to determine the background color of the column title if the Color property is not explicitly set. <method namespace="DBGrids" class="TColumnTitle">DefaultColor</method> returns the FixedColor of the data grid to which the column belongs. If the column has no associated data grid, <method namespace="DBGrids" class="TColumnTitle">DefaultColor</method> returns clBtnFace.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultFont">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default font for the column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use DefaultColor to determine the font of the column title if the Font property is not explicitly set. <method namespace="DBGrids" class="TColumnTitle">DefaultFont</method> returns the TitleFont of the data grid to which the column belongs. If the column has no associated data grid, <method namespace="DBGrids" class="TColumnTitle">DefaultFont</method> returns the current value of the associated column's Font property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultCaption">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default caption of the column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumnTitle">DefaultCaption</method> returns the DisplayLabel of the TField object associated with the column. If there is no dataset field associated with the column (that is, if the column's Field property is empty), it returns the column's FieldName.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumnTitle">Create</method>s and initializes a column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TColumnTitle">Create</method> to instantiate an instance of <method namespace="DBGrids" class="TColumnTitle">TColumnTitle</method>. <method namespace="DBGrids" class="TColumnTitle">Create</method> takes a TColumn instance as its argument.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications need not create column title instances, as these are instantiated by the associated column.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Assign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies the contents of the source column title to a new column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumnTitle">Assign</method> copies the Alignment, Color, Caption, and Font values of the source object if it is another column title. Otherwise, it calls the inherited method, which allows properties to be copied from any object that implements its <method namespace="DBGrids" class="TColumnTitle">Assign</method>To method with a target of TColumn.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.RestoreDefaults">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Restores the column title's default settings.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumnTitle">RestoreDefaults</method> reinitializes the Caption and Font properties.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumnTitle">Destroy</method>s the column and frees its memory.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumnTitle">Destroy</method> eliminates the <method namespace="DBGrids" class="TColumnTitle">TColumnTitle</method> instance along with its associated font (TFont).</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Column">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the T<property namespace="DBGrids" class="TColumnTitle">Column</property> object that is associated with the column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TColumnTitle">Column</property> to determine the column associated with the column title.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Alignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies how text is aligned within the column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TColumnTitle">Alignment</property> to specify whether the column title is left-justified, right-justified, or centered.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Caption">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the text that appears at the top of the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumnTitle">Caption</property> property contains a text string that identifies the column. If the dgTitles flag is set in the data grid's Options property, the title appears on the form at runtime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the FieldName property is set in TColumn, the <property namespace="DBGrids" class="TColumnTitle">Caption</property> default value comes from the DisplayLabel property of the Field object, which itself defaults to FieldName.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Color">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the background color for the column title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumnTitle">Color</property> property determines the background color of the column title. You can set <property namespace="DBGrids" class="TColumnTitle">Color</property> to one of the constants defined in the Graphics unit (such as clBlue), or to an explicit RGB integer value. The default value is the grid's Fixed<property namespace="DBGrids" class="TColumnTitle">Color</property> property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Font">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls the font in which the column title displays its caption.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumnTitle">Font</property> property points to a T<property namespace="DBGrids" class="TColumnTitle">Font</property> object that determines typographic attributes of text displayed in the column title. The default value is the grid's Title<property namespace="DBGrids" class="TColumnTitle">Font</property> property.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TColumnButtonStyle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TColumnButtonStyle</type> indicates whether and how the user can select values for a column from a list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">These are the possible values of <type namespace="DRIntf">TColumnButtonStyle</type>:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cbsAuto</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>If the column is associated with a lookup field or has a value assigned to its PickList property, the grid displays a combo box in the column. The user can choose a value from the drop-down list.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cbsEllipsis</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The column displays an ellipsis button that the user can click to choose a value. Clicking the ellipsis button triggers an OnEditButtonClick event.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>cbsNone</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>No combo box or ellipsis button is provided. The user cannot select the column's content from a list.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TColumn">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TColumn</class> represents a column in a data grid (TDBGrid).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Each TDBGrid uses a TDBGridColumns to maintain a collection of <class namespace="DBGrids">TColumn</class> objects. Each <class namespace="DBGrids">TColumn</class> object represents the visual characteristics and data binding of a column in the grid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultAlignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default alignment for the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBGrids" class="TColumn">DefaultAlignment</method> to determine the alignment of the data in the column when the Alignment property has not been explicitly set. <method namespace="DBGrids" class="TColumn">DefaultAlignment</method> returns the Alignment property of the TField associated with the column. If the column has no dataset field associated with it, <method namespace="DBGrids" class="TColumn">DefaultAlignment</method> returns taLeftJustify.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultColor">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default background color for the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use Default color to determine the color of the column when the Color property is not explicitly set. <method namespace="DBGrids" class="TColumn">DefaultColor</method> returns the Color of the data grid to which the column belongs. If the column has no associated data grid, <method namespace="DBGrids" class="TColumn">DefaultColor</method> returns clWindow.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultFont">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default font for data displayed in the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumn">DefaultFont</method> returns the Font of the data grid to which the column belongs. If the column has no associated data grid, <method namespace="DBGrids" class="TColumn">DefaultFont</method> returns the current value of the column's Font property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultImeMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Describes the default behavior of the Input Method Editor (IME).</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBGrids" class="TColumn">DefaultImeMode</method> returns the ImeMode property of the data grid to which the column belongs. If the column has no associated data grid, <method namespace="DBGrids" class="TColumn">DefaultImeMode</method> returns the current value of the column's ImeMode property.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultImeName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Returns the name of the default Input Method Editor (IME).</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBGrids" class="TColumn">DefaultImeName</method> returns the ImeName property of the data grid to which the column belongs. If the column has no associated data grid, <method namespace="DBGrids" class="TColumn">DefaultImeName</method> returns the current value of the column's ImeName property.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default ReadOnly setting for the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reflects the ReadOnly state of the grid and the grid's dataset and field.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultWidth">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the default width for the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of <method namespace="DBGrids" class="TColumn">DefaultWidth</method> is determined as follows:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the column has no data grid associated with it, <method namespace="DBGrids" class="TColumn">DefaultWidth</method> returns 64.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the column has an associated data grid but the Field property is empty, <method namespace="DBGrids" class="TColumn">DefaultWidth</method> returns data grid's protected DefaultColWidth property. Usually, this value is 64.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the column has an associated data field, <method namespace="DBGrids" class="TColumn">DefaultWidth</method> is calculated from the TField object's DisplayWidth property using the column's font.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the dgTitles flag is set in the data grid's Options property, <method namespace="DBGrids" class="TColumn">DefaultWidth</method> is increased (as necessary) to accommodate the column's title caption.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Depth">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the position of the column in relation to any parent columns. A column with no parent column returns 0.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a column does not have any parent columns, <method namespace="DBGrids" class="TColumn">Depth</method> returns 0.  Columns with parent columns return a number equal to the number of parents it has. For example, a parentless ADT field called Date has a <method namespace="DBGrids" class="TColumn">Depth</method> of 0.  Its three child fields, Month, Day, and Year, each have a <method namespace="DBGrids" class="TColumn">Depth</method> of 1.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumn">Create</method>s and initializes a data-grid column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TColumn">Create</method> to instantiate a <method namespace="DBGrids" class="TColumn">TColumn</method> object. <method namespace="DBGrids" class="TColumn">Create</method> should take a TDBGridColumns instance as its argument. It creates a data-grid column along with its title (<method namespace="DBGrids" class="TColumn">TColumn</method>Title) and font (TFont).</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Assign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies the contents of the source column to a new column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumn">Assign</method> creates a new column with the same FieldName, Title, DropDownRows, ButtonStyle, and PickList values as the source object. Color, Width, Font, Alignment, and ReadOnly are also copied if <method namespace="DBGrids" class="TColumn">Assign</method>edValues indicates that they have been changed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.RestoreDefaults">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Restores the column's default settings.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumn">RestoreDefaults</method> reinitializes the AssignedValues, ButtonStyle, Font, and PickList properties, freeing the pick list (TStrings) object if there is one. It also calls the <method namespace="DBGrids" class="TColumn">RestoreDefaults</method> method in the column's title (<method namespace="DBGrids" class="TColumn">TColumn</method>Title) to restore the default properties of the column title.<condition language="Delphi"/>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumn">Destroy</method>s the column and frees its memory.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TColumn">Destroy</method> eliminates the <method namespace="DBGrids" class="TColumn">TColumn</method> instance along with its title (<method namespace="DBGrids" class="TColumn">TColumn</method>Title), font (TFont), and pick list (TStrings).</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Grid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the grid that contains the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DBGrids" class="TColumn">Grid</property> property to access the grid that contains the column.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.AssignedValues">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates which <property namespace="DBGrids" class="TColumn">TColumn</property> and <property namespace="DBGrids" class="TColumn">TColumn</property>Title properties have been set.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, if the <property namespace="DBGrids" class="TColumn">AssignedValues</property> property contains cvColor, and cvTitleCaption, then the column's font and title caption have been changed and no longer track with changes made to their default source.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Many column properties obtain their values from external sources, such as properties of the associated TField objects. The column will reflect changes made to the property's default source until a value is assigned to the column property. After assignment, the column property is independent of its default source.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Expandable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the column can be expanded to show any child field columns.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TColumn">Expandable</property> will be false if the represented field is not an ADT, array, or reference field.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the T<property namespace="DBGrids" class="TColumn">Field</property> instance represented by the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TColumn">Field</property> points to the T<property namespace="DBGrids" class="TColumn">Field</property> object that corresponds to the dataset field displayed in the column. The value of <property namespace="DBGrids" class="TColumn">Field</property> will be nil (Delphi) or NULL (C++), if the column does not correspond to a field in the dataset (for example, a calculated field).</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ParentColumn">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Refers to the <property namespace="DBGrids" class="TColumn">TColumn</property> object that owns the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the column represents a child field, <property namespace="DBGrids" class="TColumn">ParentColumn</property> refers to the column of the object field that parents the child field.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Showing">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the column is showing.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TColumn">Showing</property> will return true if Visible is true and Expanded is false, and if the field represented is the child of an object field, if the parent column is expanded.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Alignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies how text is aligned within the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TColumn">Alignment</property> to specify whether values should be left-justified, right-justified, or centered in the column.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ButtonStyle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether and how the user can select values for the column from a list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumn">ButtonStyle</property> property determines how users can edit the data of a data-grid column.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Color">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the background color for the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumn">Color</property> property determines the background color of the data-grid column. You can set <property namespace="DBGrids" class="TColumn">Color</property> to one of the constants defined in the Graphics unit (such as clBlue), or to an explicit RGB integer value.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DropDownRows">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of lines displayed in the column's drop-down list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TColumn">DropDownRows</property> determines the number of lines of text displayed in the drop-down list associated with the column. This property is used only if ButtonStyle is set to cbsAuto and the column has a lookup field or pick list associated with it.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Expanded">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the column is expanded.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TColumn">Expanded</property> only applies to columns that represent fields that are TObjectField descendants. When a column is expanded, a column appears for each child field of the object field. These child field columns each have a column title and appear under the column title of the parent object field. When <property namespace="DBGrids" class="TColumn">Expanded</property> is false, child field values are summarized in a comma-delimited string in the object field's column, and cannot be edited.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Object fields can also be expanded and contracted at runtime through the UI by clicking on the triangle that appears next to its name in the column title.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.FieldName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the name of the field represented by the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="DBGrids" class="TColumn">FieldName</property> changes the Field property so that it points to the dataset field with the same name. If the dataset does not have a field with the same name, Field is set to nil (Delphi), or NULL (C++).</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Font">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls the font in which the column displays its data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumn">Font</property> property points to a T<property namespace="DBGrids" class="TColumn">Font</property> object that determines typographic attributes of text displayed in the column.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ImeMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Determines the behavior of the input method editor (IME) when the column is edited.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Set <property namespace="DBGrids" class="TColumn">ImeMode</property> to configure the way an IME processes user keystrokes when the user is editing the column. An IME is a front-end input processor for Asian language characters. The IME hooks all keyboard input, converts it to Asian characters in a conversion window, and sends the converted characters or strings on to the application. </condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <property namespace="DBGrids" class="TColumn">ImeMode</property> allows the type of conversion performed by the IME to be tailored to the input expected for the column. For example, a column that only accepts numeric input might specify an <property namespace="DBGrids" class="TColumn">ImeMode</property> of imClose, as no conversion is necessary for numeric input.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ImeName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Specifies the input method editor (IME) to use for converting keyboard input to Asian language characters.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Set <property namespace="DBGrids" class="TColumn">ImeName</property> to specify which IME to use for converting keystrokes when the user is editing the column. An IME is a front-end input processor for Asian language characters. The IME hooks all keyboard input, converts it to Asian characters in a conversion window, and sends the converted characters or strings on to the application.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <property namespace="DBGrids" class="TColumn">ImeName</property> must specify one of the IMEs that has been installed through the Windows control panel. The property inspector provides a drop-down list of all currently installed IMEs on the system. At runtime, applications can obtain a list of currently installed IMEs from the global Screen variable.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">If <property namespace="DBGrids" class="TColumn">ImeName</property> specifies an unavailable IME, the IME that was active when the application started is used instead. No exception is generated.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.PickList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists values that the user can select for the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumn">PickList</property> property points to a TStrings object. If ButtonStyle is cbsAuto, these strings appear in the drop-down list associated with the column.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.PopupMenu">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the pop-up menu associated with the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assign a value to <property namespace="DBGrids" class="TColumn">PopupMenu</property> to make a pop-up menu appear when the user clicks the right mouse button on the column. If the T<property namespace="DBGrids" class="TColumn">PopupMenu</property>'s AutoPopup property is true, the pop-up menu appears automatically. If the menu's AutoPopup property is false, display the menu with a call to its Popup method.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether data displayed in the column is editable.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Data displayed in the column cannot be changed by the user at runtime if <property namespace="DBGrids" class="TColumn">ReadOnly</property> is set to true. If <property namespace="DBGrids" class="TColumn">ReadOnly</property> is set to false (and the data grid's Options property includes the dgEditing flag), users can edit data directly from the grid.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Title">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the <property namespace="DBGrids" class="TColumn">TColumn</property>
                     
               <property namespace="DBGrids" class="TColumn">Title</property> that represents the column's title.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumn">Title</property> property points to a <property namespace="DBGrids" class="TColumn">TColumn</property>
                     
               <property namespace="DBGrids" class="TColumn">Title</property> object that determines attributes of the column's title. If FieldName is set, the value of FieldName becomes the default column title (the Caption property of the <property namespace="DBGrids" class="TColumn">TColumn</property>
                     
               <property namespace="DBGrids" class="TColumn">Title</property> object).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The column title appears at runtime only if the dg<property namespace="DBGrids" class="TColumn">Title</property>s flag is set in the data grid's Options property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Width">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The width of the column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBGrids" class="TColumn">Width</property> property determines the width of the column, in pixels. If the dgColumnResize flag is set in the data grid's Options property, users can resize the column at runtime.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Visible">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the column is visible in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To hide a column in the grid, set Visible to false. If Visible is true, and the field's Visible property is true, the column will appear in the grid. This property only determines whether the column is allowed to be drawn/shown. The Showing property reflects the actual display ability of the column based on additional factors.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TColumnClass">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TColumnClass</type> defines the metaclass for TColumn.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TColumnClass</type> is the metaclass for TColumn. Its value is the class reference for TColumn or for one of its descendants.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TDBGridColumnsState">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDBGridColumnsState</type> indicates whether the columns in a DB grid dynamically reflect dataset fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The following table lists the possible values. </para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>csDefault</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Columns in the data grid are generated dynamically from information in the grid's associated dataset. The dataset fields determine the appearance, order, and other properties of the columns. Changes made to the columns are reflected in the dataset fields, and vice versa.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>csCustomized</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Properties of the data-grid columns are independent of the associated dataset.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TDBGridColumns">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TDBGridColumns</class> represents a container for TColumn objects.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Each <class namespace="DBGrids">TDBGridColumns</class> holds a collection of TColumn objects in a data grid (TDBGrid). <class namespace="DBGrids">TDBGridColumns</class> maintains an index of the columns in its Items array. The Count property contains the number of columns in the collection. At design time, use the data grid's Columns editor to add, remove, or modify columns.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Add">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new TColumn instance and adds it to the Items array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TDBGridColumns">Add</method> returns the new column. At design time, use the data grid's Columns editor to add columns to the grid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TDBGridColumns">Create</method>s and initializes a <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="DBGrids" class="TDBGridColumns">Create</method> method takes two parameters: a data-grid instance object and TColumn (or the name of a class derived from TColumn).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application should seldom need to call <method namespace="DBGrids" class="TDBGridColumns">Create</method> directly. Instead, objects that use a <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object instantiate the object as part of their initialization. An example of such an object is the TDBGrid and its Columns property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.LoadFromFile">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reads the file specified in FileName and loads the data into the <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <method namespace="DBGrids" class="TDBGridColumns">LoadFromFile</method> method to retrieve grid columns data from a file and load into a <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object. The file must be created by calling the SaveToFile method of a <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.LoadFromStream">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reads grid columns data from a stream and stores the contents in the <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <method namespace="DBGrids" class="TDBGridColumns">LoadFromStream</method> method to read Stream and store the contents in the <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object. The stream should contain data previously saved using the SaveToStream method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.RestoreDefaults">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Restores all columns to their default settings.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TDBGridColumns">RestoreDefaults</method> iterates through the Items array, calling the <method namespace="DBGrids" class="TDBGridColumns">RestoreDefaults</method> method for each TColumn object. This method removes all changes made to properties of the TColumn objects and restores the default settings.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.RebuildColumns">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes existing columns and generates new columns from the dataset associated with the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TDBGridColumns">RebuildColumns</method> initializes the <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object by deleting all existing columns, then creating new ones from the grid's associated dataset. If the grid is not connected to a dataset, <method namespace="DBGrids" class="TDBGridColumns">RebuildColumns</method> simply deletes any existing columns.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.SaveToFile">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Saves the <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object to the file specified in FileName.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <method namespace="DBGrids" class="TDBGridColumns">SaveToFile</method> method to store <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> data to a file.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.SaveToStream">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Writes a stream with the name passed in Stream with the contents of the <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <method namespace="DBGrids" class="TDBGridColumns">SaveToStream</method> method to stream out <method namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</method> data.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.State">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the columns in the data grid are dependent on dataset fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBGrids" class="TDBGridColumns">State</property> is set to csDefault, columns in the data grid are generated dynamically from information in the grid's associated dataset. The dataset fields determine the appearance, order, and other properties of the columns. Changes made to the columns are reflected in the dataset fields, and vice versa.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBGrids" class="TDBGridColumns">State</property> is set to csCustomized, many properties of the data-grid columns are independent of the associated dataset. For example, a column's title caption is, by default, the same as the associated field's DisplayLabel property; if <property namespace="DBGrids" class="TDBGridColumns">State</property> is csCustomized, however, the column title's Caption property and the field's DisplayLabel property can be changed independently. In fact, a customized (or "persistent") column need not be associated with a dataset field at all.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the Columns editor is used to configure data-grid columns, <property namespace="DBGrids" class="TDBGridColumns">State</property> is automatically set to csCustomized. Changing the <property namespace="DBGrids" class="TDBGridColumns">State</property> property at runtime deletes all existing columns.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Grid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the data-grid control to which the TDB<property namespace="DBGrids" class="TDBGridColumns">Grid</property>Columns instance belongs.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The read-only <property namespace="DBGrids" class="TDBGridColumns">Grid</property> property indicates which data-grid control (TDB<property namespace="DBGrids" class="TDBGridColumns">Grid</property>) owns the TDB<property namespace="DBGrids" class="TDBGridColumns">Grid</property>Columns object.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the columns in the collection.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TDBGridColumns">Items</property> to access individual columns. The value of the Index parameter corresponds to the Index property of TColumn. It represents the position of the column in the data grid.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TDBGridColumns">Items</property> is the default property of <property namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</property>. This means that the property name, <property namespace="DBGrids" class="TDBGridColumns">Items</property>, can be omitted when referring to columns of the <property namespace="DBGrids" class="TDBGridColumns">TDBGridColumns</property> object. Thus, the line</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FirstCol := DBGrid1.Columns.Items[0];</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">can also be written</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FirstCol := DBGrid1.Columns[0];</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TGridDataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TGridDataLink</class> helps manage the link to a data source and maintain the field mapping for a TCustomDBGrid object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TGridDataLink</class> is tailored to work with a TCustomDBGrid. It should only be used by the TCustomDBGrid class.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.IsAggRow">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reserved for future use.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">IsAggRow</method> indicates whether the row specified by Value contains aggregate values rather than data. Value is the index of a row in the cache of rows currently displayed. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">IsAggRow</method> always returns false because data-aware grids do not currently display aggregate values. This method is reserved for future support of aggregates in data-aware grids.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.GetMappedIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">GetMappedIndex</method> provides the index of a field component in the dataset that corresponds to an index within the field map.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBGrids" class="TGridDataLink">GetMappedIndex</method> on an index into the field map to get an index into the dataset for the same field component. Both the field map and the dataset are zero-based arrays. If an entry in the field map is an undefined field, <method namespace="DBGrids" class="TGridDataLink">GetMappedIndex</method> returns -1.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.AddMapping">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a field component to the end of the field map.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call <method namespace="DBGrids" class="TGridDataLink">AddMapping</method> directly, because this would cause the field map to become out of sync with the columns in TCustomDBGrid. TCustomDBGrid calls <method namespace="DBGrids" class="TGridDataLink">AddMapping</method> iteratively to build a field map that corresponds to its columns.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">Create</method>s an instance of <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call the <method namespace="DBGrids" class="TGridDataLink">Create</method> method for a <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method> directly. The TCustomDBGrid object that owns a <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method> calls <method namespace="DBGrids" class="TGridDataLink">Create</method> from its own constructor.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ActiveChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the TCustomDBGrid of changes in the Active property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call the <method namespace="DBGrids" class="TGridDataLink">ActiveChanged</method> procedure directly. Changes in the Active property trigger this procedure. When the dataset becomes inactive, <method namespace="DBGrids" class="TGridDataLink">ActiveChanged</method> makes sure that the grid is not in edit mode. When the dataset becomes active, <method namespace="DBGrids" class="TGridDataLink">ActiveChanged</method> makes sure that the grid does not contain references to fields that are no longer in the dataset, and that the grid does is not scrolled inappropriately.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.BuildAggMap">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reserved for future use.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">BuildAggMap</method> is not currently used. It is reserved for future support of aggregates in data-aware grids.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DataSetChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs TCustomDBGrid of changes to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications can not call <method namespace="DBGrids" class="TGridDataLink">DataSetChanged</method> directly. Changes to the contents of the dataset trigger this method automatically. <method namespace="DBGrids" class="TGridDataLink">DataSetChanged</method> allows the TCustomDBGrid to keep track of when the contents of the dataset change.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DataSetScrolled">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the TCustomDBGrid when the dataset has finished scrolling.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call the <method namespace="DBGrids" class="TGridDataLink">DataSetScrolled</method> procedure directly. This procedure is called automatically after the dataset for the TCustomDBGrid scrolls. <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method> informs the TCustomDBGrid that a scroll of the dataset has just occurred by calling its Scroll method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.FocusControl">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Displays the editor and gives focus to a field control in the TCustomDBGrid object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call the <method namespace="DBGrids" class="TGridDataLink">FocusControl</method> procedure to bring up the editor for the representation of Field in the TCustomDBGrid. <method namespace="DBGrids" class="TGridDataLink">FocusControl</method> selects Field in the TCustomDBGrid, and then tells the TCustomDBGrid object to bring up the editor.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.EditingChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the TCustomDBGrid of changes in the editing state of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call the <method namespace="DBGrids" class="TGridDataLink">EditingChanged</method> procedure directly. Changes in the Editing property trigger this procedure. <method namespace="DBGrids" class="TGridDataLink">EditingChanged</method> allows the TCustomDBGrid to provide visual feedback to the user about the editing state of the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.LayoutChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the grid after the layout of the TCustomDBGrid has changed in a way that affects the representation of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call the <method namespace="DBGrids" class="TGridDataLink">LayoutChanged</method> method directly. The TCustomDBGrid that owns the <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method> calls this method automatically when layout changes affect the representation of the dataset. <method namespace="DBGrids" class="TGridDataLink">LayoutChanged</method> allows the TCustomDBGrid to regenerate its layout by calling its <method namespace="DBGrids" class="TGridDataLink">LayoutChanged</method> method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.RecordChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the grid of changes in the current record or field of the DataSource.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call <method namespace="DBGrids" class="TGridDataLink">RecordChanged</method> directly. It is called automatically when the contents of the current record change. The Field parameter indicates which field in the current record has changed. If Field is nil (Delphi) or NULL (C++), the entire record has changed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">RecordChanged</method> informs TCustomDBGrid of these changes so that it can update the display of the affected column or columns.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.UpdateData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Allows the grid to post changes to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call the <method namespace="DBGrids" class="TGridDataLink">UpdateData</method> procedure directly. It is called automatically when pending changes need to be posted to the dataset. <method namespace="DBGrids" class="TGridDataLink">UpdateData</method> tells the TCustomDBGrid to write any unposted changes to the current field to the underlying Field component.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ClearMapping">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Empties the field map and frees any associated memory.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call <method namespace="DBGrids" class="TGridDataLink">ClearMapping</method> directly, because this would cause the field map to become out of sync with the columns of the TCustomDBGrid. The TCustomDBGrid calls <method namespace="DBGrids" class="TGridDataLink">ClearMapping</method> first, every time it regenerates the field map.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Modified">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Tracks changes to the data which have not been written to the current record in the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call <method namespace="DBGrids" class="TGridDataLink">Modified</method> directly. <method namespace="DBGrids" class="TGridDataLink">Modified</method> is called automatically whenever the TCustomDBGrid starts editing one of its fields. <method namespace="DBGrids" class="TGridDataLink">Modified</method> allows the <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method> to keep track of whether there are any edits that have not been posted.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Reset">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Cancels any pending edits to the dataset that have not been written to the current record in the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">Reset</method> is triggered by user actions that cancel any pending edits to the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">Destroy</method>s an instance of <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBGrids" class="TGridDataLink">Destroy</method> directly in an application. The TCustomDBGrid that owns a <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method> calls Free from its own destructor to destroy the <method namespace="DBGrids" class="TGridDataLink">TGridDataLink</method> object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TGridDataLink">Destroy</method> frees up the memory used by the field map before calling the inherited destructor. </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset's underlying field components are generated dynamically when the dataset is opened.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBGrids" class="TGridDataLink">DefaultFields</property> to determine whether or not a dataset uses dynamically generated field components or persistent field components. If <property namespace="DBGrids" class="TGridDataLink">DefaultFields</property> is true, the dataset uses dynamically allocated field components. If <property namespace="DBGrids" class="TGridDataLink">DefaultFields</property> is false, the dataset uses persistent field components or the custom field mapping contains unmapped fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBGrids" class="TGridDataLink">DefaultFields</property> is false, the TCustomDBGrid may not show all the fields that are present in the underlying database table.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.FieldCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of entries in the field map.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBGrids" class="TGridDataLink">FieldCount</property> to determine the number of entries in the field map. Used with the Fields property, this is useful for applications that need to iterate over all of the mapped fields. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TGridDataLink">FieldCount</property> is the same as the number of columns in the TCustomDBGrid. The field map can contain undefined fields, which do not appear in the dataset. Undefined fields in the field map stand in for fields in the columns of the grid that are not in the dataset, such as calculated fields.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Fields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists all the field components contained in the field map.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TGridDataLink">Fields</property> to access field components by index number. <property namespace="DBGrids" class="TGridDataLink">Fields</property> is a zero-based array. If the SparseMap property is true, the field map may contain undefined fields. For these entries, <property namespace="DBGrids" class="TGridDataLink">Fields</property> returns nil (Delphi) or NULL (C++).</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.SparseMap">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the associated grid has customized the field map (which means it may contain undefined fields).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBGrids" class="TGridDataLink">SparseMap</property> to determine whether the field map is not a simple reflection of the underlying dataset. The TCustomDBGrid sets <property namespace="DBGrids" class="TGridDataLink">SparseMap</property> when it builds the field map. <property namespace="DBGrids" class="TGridDataLink">SparseMap</property> is false if the TCustomDBGrid builds a default field map directly from the dataset. Any changes to the field components associated with each column cause TCustomDBGrid to change <property namespace="DBGrids" class="TGridDataLink">SparseMap</property> to true. When <property namespace="DBGrids" class="TGridDataLink">SparseMap</property> is true, the field map may contain undefined fields if the column attributes indicate an invalid field name or an unassigned field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Grid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Identifies the <property namespace="DBGrids" class="TGridDataLink">Grid</property> component that uses this data link to manage its data.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Use <property namespace="DBGrids" class="TGridDataLink">Grid</property> to access the data-aware grid that owns this data link. The value of <property namespace="DBGrids" class="TGridDataLink">Grid</property> is assigned by the T<property namespace="DBGrids" class="TGridDataLink">Grid</property>DataLink constructor.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TBookmarkList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TBookmarkList</class> is a collection of bookmarks that identify a set of records in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBGrids">TBookmarkList</class> to manage a set of bookmarks when working with the records in a dataset. Each bookmark identifies a particular record in the dataset, and can be identified by a string.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Find">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a specified bookmark string is contained in the bookmark list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TBookmarkList">Find</method> to determine whether the string specified by the Item parameter is one of the bookmark strings in the Items property array.  <method namespace="DBGrids" class="TBookmarkList">Find</method> returns true if the bookmark list contains the bookmark string, false otherwise.  If <method namespace="DBGrids" class="TBookmarkList">Find</method> returns true, the index of the bookmark string is returned as the value of the Index parameter.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The index of a specific bookmark string can also be obtained by using the IndexOf method.  Unlike the IndexOf method, which returns a value of -1 if the bookmark string is not in the Items array, <method namespace="DBGrids" class="TBookmarkList">Find</method> does not change the value of the Index parameter if the bookmark string can't be found.  Use <method namespace="DBGrids" class="TBookmarkList">Find</method> when a default value should be changed only if the bookmark is not in the list.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.IndexOf">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the index of a bookmark string in the Items property array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TBookmarkList">IndexOf</method> to get the index for a bookmark string in the Items array. The first item in the array has index 0, the second item has index 1, and so on. If an item is not in the list, <method namespace="DBGrids" class="TBookmarkList">IndexOf</method> returns -1.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Refresh">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes all invalid bookmarks from the Items property array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Bookmarks in the bookmark list are not automatically deleted when records in the dataset are deleted.  As a result, some bookmarks in the Items array may become invalid. Call <method namespace="DBGrids" class="TBookmarkList">Refresh</method> to ensure that every bookmark in the bookmark list is valid.  <method namespace="DBGrids" class="TBookmarkList">Refresh</method> attempts to locate every record in the dataset that corresponds to a bookmark in the Items property array. All bookmarks that do not correspond to records in the dataset are removed. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If any of the bookmarks in the list are invalid, <method namespace="DBGrids" class="TBookmarkList">Refresh</method> returns true, and invalidates the DBGrid so that it will repaint, reflecting the removal of all invalid records.  If all bookmarks in the list are still valid,  <method namespace="DBGrids" class="TBookmarkList">Refresh</method> returns false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TBookmarkList">Create</method>s an instance of <method namespace="DBGrids" class="TBookmarkList">TBookmarkList</method> and associates it with a DBGrid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications do not need to call create to instantiate the bookmark list used by DBGrids to implement their SelectedRows property.  DBGrids call <method namespace="DBGrids" class="TBookmarkList">Create</method> from their constructor to create this bookmark list.  Component writers that implement additional properties for descendants of TCustomDBGrid can create additional bookmark list objects to represent other sets of records in the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Clear">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes all bookmarks from the list. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TBookmarkList">Clear</method> to empty the Items array and set the Count property to 0 when all rows of the associated DBGrid are deselected. Calling <method namespace="DBGrids" class="TBookmarkList">Clear</method> invalidates the associated DBGrid so that the selected rows that were referenced by the bookmarks in the bookmark list can be repainted.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DBGrids" class="TBookmarkList">Clear</method> removes the bookmarks from the bookmark list to reflect the fact that the corresponding rows are not selected. To delete the rows from the dataset rather than just deselecting them, call the Delete method instead.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Delete">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TBookmarkList">Delete</method>s all the records specified by the bookmarks in the list from the dataset of the associated DBGrid. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TBookmarkList">Delete</method> to delete the set of records represented by the bookmark list from the dataset of the associated DBGrid.  To remove all the bookmarks from the list without changing the dataset, use the Clear method instead.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TBookmarkList">Destroy</method>s an instance of <method namespace="DBGrids" class="TBookmarkList">TBookmarkList</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBGrids" class="TBookmarkList">Destroy</method> directly in an application. Instead, call Free. Free verifies that the <method namespace="DBGrids" class="TBookmarkList">TBookmarkList</method> object is not nil, and only then calls <method namespace="DBGrids" class="TBookmarkList">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TBookmarkList">Destroy</method> frees the memory used to store the Items property array.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Count">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of bookmarks in the bookmark list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBGrids" class="TBookmarkList">Count</property> to determine the number of entries in the Items array.  Use <property namespace="DBGrids" class="TBookmarkList">Count</property> as an upper limit when iterating over the strings in the Items array.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CurrentRowSelected">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the Bookmark property of the associated DBGrid's dataset is in the Items array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBGrids" class="TBookmarkList">CurrentRowSelected</property> to determine whether the Bookmark property of the associated DBGrid's dataset specifies a bookmark string in the Items property array. <property namespace="DBGrids" class="TBookmarkList">CurrentRowSelected</property> is true when the bookmark string is included, false when it is not. The Bookmark property of the dataset indicates the current record in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBGrids" class="TBookmarkList">CurrentRowSelected</property> to specify whether the Bookmark string of the associated DBGrid's dataset should be included in the bookmark list.  Setting <property namespace="DBGrids" class="TBookmarkList">CurrentRowSelected</property> to true adds the Bookmark property of the dataset to the Items array if it is not already there.  Setting <property namespace="DBGrids" class="TBookmarkList">CurrentRowSelected</property> to false removes the Bookmark of the dataset from the Items array if it is there.  If the Bookmark property of the dataset is an empty string (no bookmark), setting <property namespace="DBGrids" class="TBookmarkList">CurrentRowSelected</property> does nothing.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Trying to read or write <property namespace="DBGrids" class="TBookmarkList">CurrentRowSelected</property> when the dataset is not active will raise an EInvalidGridOperation exception.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides indexed access to the bookmarks for marked records in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TBookmarkList">Items</property> to obtain a bookmark string from the set maintained by the <property namespace="DBGrids" class="TBookmarkList">TBookmarkList</property> object.  Each bookmark string represents a single record in the dataset of the associated DBGrid. Bookmark strings can be compared with other bookmark strings to determine relative position within the database, and used to position the dataset on an arbitrary record. The Index parameter indicates the index of the bookmark, where 0 is the index of the first bookmark, 1 is the index of the second bookmark, and so on.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TBookmarkList">Items</property> with the Count property to iterate through all of the bookmarks in the list.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Bookmarks in the bookmark list are not automatically deleted when records in the dataset are deleted.  As a result, some bookmarks in the <property namespace="DBGrids" class="TBookmarkList">Items</property> array may become invalid. Call the Refresh method to delete invalid bookmarks from the <property namespace="DBGrids" class="TBookmarkList">Items</property> array. </para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TDBGridOption">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDBGridOption</type> and <type namespace="DRIntf">TDBGridOption</type>s indicate display and behavioral property of a DB grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDBGridOption</type>s is a set drawn from the following <type namespace="DRIntf">TDBGridOption</type> values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgEditing</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The user can edit data using the grid. dgEditing is ignored if Options includes dgRowSelect.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgAlwaysShowEditor</para>
                  
                  </td>
                  
                  <td>
                     
                     <para> The grid is always in edit mode. That is, the user does not have to press Enter or F2 before editing the contents of a cell. dgAlwaysShowEditor does nothing unless dgEditing is also included in Options. dgAlwaysShowEditor is ignored if Options includes dgRowSelect.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgTitles</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Titles appear at the top of the columns in the grid.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgIndicator</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>A small pointer appears in the first column to indicate which row is current.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgColumnResize</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Columns that are bound to fields can be resized or moved.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgColLines</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Lines appear between columns in the grid.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgRowLines</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Lines appear between the rows of the grid.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgTabs</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The user can navigate through the grid using the Tab and Shift+Tab keys.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgRowSelect</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The user can select an entire row, as well as selecting individual cells. If Options includes dgRowSelect, dgEditing and dgAlwaysShowEditor are ignored.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgAlwaysShowSelection</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The selected cell displays the focus rectangle even when the grid does not have focus.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgConfirmDelete</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>A message box appears, asking for confirmation, when the user types Ctrl+Delete to delete a row in the grid.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgCancelOnExit</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>When the user exits the grid from an inserted record to which the user made no modifications, the inserted record is not posted to the dataset. This prevents the inadvertent posting of empty records.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dgMultiSelect</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>More than one row in the grid can be selected at a time.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TCustomDBGrid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TCustomDBGrid</class> is the base class for grid controls that display the records from a dataset in a tabular format.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TCustomDBGrid</class> introduces new properties, events, and methods to expand the capabilities of TCustomGrid for displaying the fields from a dataset. At runtime, users can manipulate <class namespace="DBGrids">TCustomDBGrid</class> objects using the TDBNavigator object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not create instances of <class namespace="DBGrids">TCustomDBGrid</class>. Use <class namespace="DBGrids">TCustomDBGrid</class> as a base class when declaring grid objects that display information from datasets. Properties and methods of <class namespace="DBGrids">TCustomDBGrid</class> provide basic behavior that descendant classes inherit as well as behavior that components can override to customize their behavior.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.RawToDataColumn">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts the index of a column in the visual display to the corresponding index in the Columns property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. It is used internally to allow the data-aware grid to adjust to the presence or absence of the column that contains the row indicator.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DataToRawColumn">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a column index in the Columns property to the index of the corresponding column in the visual display.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. It is used internally to allow the data-aware grid to adjust to the presence or absence of the column that contains the row indicator.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.AcquireLayoutLock">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls BeginLayout if the table is not currently being reformatted.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. <method namespace="DBGrids" class="TCustomDBGrid">AcquireLayoutLock</method> is called before recomputing Columns when the fields in the dataset change or when the Columns property changes. <method namespace="DBGrids" class="TCustomDBGrid">AcquireLayoutLock</method> returns true if the table is not already being laid out, to indicate that the computation of Columns should proceed. <method namespace="DBGrids" class="TCustomDBGrid">AcquireLayoutLock</method> prevents the computation of Columns from looping endlessly because of the changes that must occur during the computation.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CanEditAcceptKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the Key parameter can be entered into the current cell.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Data-aware grids use <method namespace="DBGrids" class="TCustomDBGrid">CanEditAcceptKey</method> internally to determine whether keys typed by the user are valid for the field represented by the current cell. <method namespace="DBGrids" class="TCustomDBGrid">CanEditAcceptKey</method> calls the IsValidChar method of the field component associated with the column that has input focus.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">CanEditAcceptKey</method> provides a crude validation of keyboard input. More refined validation is provided when the value in the cell is written to the record in the dataset, or by an edit mask.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CanEditModify">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the current column of the grid can be edited.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Data-aware grids use <method namespace="DBGrids" class="TCustomDBGrid">CanEditModify</method> internally to determine whether to allow the user to edit the current cell. <method namespace="DBGrids" class="TCustomDBGrid">CanEditModify</method> returns true if the field in the current column can be edited. <method namespace="DBGrids" class="TCustomDBGrid">CanEditModify</method> returns false if the field cannot be edited. If the dataset is not in edit mode, <method namespace="DBGrids" class="TCustomDBGrid">CanEditModify</method> will attempt to put it in edit mode.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DBGrids" class="TCustomDBGrid">CanEditModify</method> returns false when the current field is a binary large object (BLOB) field. BLOB fields can only be edited through the clipboard or by streaming.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CanEditShow">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the inplace edit control can be created to allow editing.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</method> overrides the inherited method to prevent the inplace edit control from coming up while the layout of the grid is being recomputed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Grid controls call <method namespace="DBGrids" class="TCustomDBGrid">CanEditShow</method> internally before creating the editor for a cell. <method namespace="DBGrids" class="TCustomDBGrid">CanEditShow</method> is called after the grid has determined that the field can be edited by calling CanEditModify.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ColumnAtDepth">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the column object associated with nth parent field of the given column. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">ColumnAtDepth</method> is used to calculate MasterCol used in the CalcTitleRec method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CreateColumns">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates the TDBGridColumns object that stores the column descriptors for the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call <method namespace="DBGrids" class="TCustomDBGrid">CreateColumns</method>. It is exposed as a protected method so that component writers can substitute a descendant of TDBGridColumns to manage the column descriptors of a data-aware grid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CreateEditor">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates the inplace editor that allows the cells of the grid to be edited.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">CreateEditor</method> overrides the inherited method to create a data-aware descendant of TInplaceEdit.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CreateDataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Creates the data link that the grid uses to manage the connection to its data source.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</method> calls <method namespace="DBGrids" class="TCustomDBGrid">CreateDataLink</method> from its constructor to create the data link that manages the connection to a data source. Descendant classes can override this method to create a different TGridDataLink descendant.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.GetColField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the field component that represents the binding of a specified column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TCustomDBGrid">GetColField</method> to obtain the field component for a column in the data-aware grid. The DataCol parameter is the index of the column in the Columns property, where 0 is the first column, 1 is the second column, and so on.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unlike the Fields property, <method namespace="DBGrids" class="TCustomDBGrid">GetColField</method> will return field components for columns that do not represent fields in the dataset, such as calculated fields. <method namespace="DBGrids" class="TCustomDBGrid">GetColField</method> will return nil (Delphi) or NULL (C++) if no field is associated with the column or if the dataset is not active.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.GetEditLimit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the number of characters that can be typed into cells representing string fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">GetEditLimit</method> is called by the inplace editor to determine what limit, if any, should be placed on the number of characters a user can type into a cell. <method namespace="DBGrids" class="TCustomDBGrid">GetEditLimit</method> sets no limits except when the selected cell represents a string field.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.GetEditMask">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the input mask associated with the field for the selected cell.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The inplace editor calls <method namespace="DBGrids" class="TCustomDBGrid">GetEditMask</method> to obtain any input mask associated with the field binding of the indicated cell. <method namespace="DBGrids" class="TCustomDBGrid">GetEditMask</method> returns the EditMask property of the field component from the Columns array.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ACol and ARow parameters indicate the index of the row and column of the cell in the grid. The ACol parameter is not the same as the index of the column in the Columns array if the Options property includes dgIndicator.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.GetEditStyle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Indicates whether a specified cell has an ellipsis button or drop-down arrow.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBGrids" class="TCustomDBGrid">GetEditStyle</method> indicates whether the specified cell can only be edited directly (esSimple), whether it has an ellipsis button that users can click to launch an editor for modifying field values (esEllipsis ), or whether it has a drop-down arrow that users can click to display a pick list of possible values (esPickList).</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">ACol is the column that contains the cell. ARow is the row that contains the cell.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">In <method namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</method>, <method namespace="DBGrids" class="TCustomDBGrid">GetEditStyle</method> checks the properties of the column object that corresponds to ACol.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">If the column has a ButtonStyle of cbsEllipsis or if it has a ButtonStyle of cbsAuto and it represents a dataset or reference field, then <method namespace="DBGrids" class="TCustomDBGrid">GetEditStyle</method> returns esEllipsis.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">If the column has a ButtonStyle of cbsAuto, is not read-only, and either has a pick list or represents a lookup field, then <method namespace="DBGrids" class="TCustomDBGrid">GetEditStyle</method> returns esPickList.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">If the column has a ButtonStyle of cbsNone or neither of the two previous conditions are met, then <method namespace="DBGrids" class="TCustomDBGrid">GetEditStyle</method> returns esSimple.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.GetEditText">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the value of the indicated cell formatted for editing.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The inplace editor calls <method namespace="DBGrids" class="TCustomDBGrid">GetEditText</method> to obtain the text for the indicated cell. <method namespace="DBGrids" class="TCustomDBGrid">GetEditText</method> locates the field component for the cell from the Columns array and returns its value formatted for editing.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ACol and ARow parameters indicate the index of the row and column of the cell in the grid. The ACol parameter is the "raw" column index, which is not the same as the index of the column in the Columns array if the Options property includes dgIndicator.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The string returned by <method namespace="DBGrids" class="TCustomDBGrid">GetEditText</method> may differ from the string returned by the GetFieldValue method if the field formats its value differently for editing and display.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.GetFieldValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the value of the indicated cell formatted for display.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The DefaultDrawColumnCell method calls <method namespace="DBGrids" class="TCustomDBGrid">GetFieldValue</method> to obtain the text that should be displayed in a cell. Applications do not call this protected method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ACol parameter is the index of the column in the columns array. If the Options property includes dgIndicator, this is not the same as the index of the column in the physical display.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.HighlightCell">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a specified cell should be highlighted when it is drawn.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. It is called internally by the DrawCell method to determine whether the cell specified by the DataCol and DataRow parameters should be highlighted. <method namespace="DBGrids" class="TCustomDBGrid">HighlightCell</method> returns true if the cell has focus, the cell is selected and Options includes dgAlwaysShowSelection, or the cell is in a selected row and Options includes dgRowSelect. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.StoreColumns">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the columns of the grid are stored when the grid is saved, or whether they are generated dynamically.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">StoreColumns</method> causes the Columns property to be stored only when the Columns property has a State property of csCustomized. The State property for Columns indicates whether the columns are generated automatically from the fields in the dataset, or if they are specified programmatically or by the Columns editor.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.UseRightToLeftAlignmentForField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the alignment of a specified field should be changed from left-aligned to right-aligned.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">UseRightToLeftAlignmentForField</method> is called internally when drawing field values to determine whether the Alignment of AField should be changed from left-aligned to right-aligned. <condition os="Windows">This method lets the data-aware grid honor the current setting of the BiDiMode property. </condition>UseRightToLeftAlignment returns true if the application is running in a mideast locale (where alignment should be reversed), the field contains text (as opposed to numeric or date/time values), and the specified alignment is not taCenter.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.BeginColumnDrag">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Starts the dragging of a column in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">BeginColumnDrag</method> is called automatically when the user clicks a column to initiate a drag operation.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Origin is the column number of the column to move. When <method namespace="DBGrids" class="TCustomDBGrid">BeginColumnDrag</method> is called, this is the column under the mouse. <method namespace="DBGrids" class="TCustomDBGrid">BeginColumnDrag</method> may adjust this value to take into account non-scrolling columns.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Destination is the current destination of the column. On both entry and exit, this is the same as Origin, because the column has not yet moved.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MousePt is the coordinates of the mouse at the point when the button was clicked.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">BeginColumnDrag</method> returns true if the grid permits the column to be moved, false if the column move should be aborted.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CheckColumnDrag">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Validates whether the column currently selected for dragging can be dropped at the current location.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBGrids" class="TCustomDBGrid">CheckColumnDrag</method> to validate that the column currently selected for dragging can be dropped at the current location.  <method namespace="DBGrids" class="TCustomDBGrid">CheckColumnDrag</method> can change the Origin (the column being dragged) and/or the Destination (the drop target), as needed, to keep the grid's columns in order.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.EndColumnDrag">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ends the dragging of a column in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TCustomDBGrid">EndColumnDrag</method> to end a drag operation. <method namespace="DBGrids" class="TCustomDBGrid">EndColumnDrag</method> enables the grid to control where the column can be dropped. It is exposed as a protected method so that descendants of <method namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</method> can customize column dragging in a grid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Executes an action with the DB grid as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">ExecuteAction</method> is called automatically when the user invokes an action with the DB grid as its target. The Action parameter specifies the action that was invoked. <method namespace="DBGrids" class="TCustomDBGrid">ExecuteAction</method> returns a boolean value indicating whether the action was successfully executed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">ExecuteAction</method> first calls the inherited method, which checks whether the action knows how to execute with the grid as a target. If this does not successfully dispatch the action, <method namespace="DBGrids" class="TCustomDBGrid">ExecuteAction</method> attempts to invoke the action with the grid's associated dataset as a target. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">UpdateAction</method> is called automatically when the application is idle allow the grid to set action properties to reflect the current state of the grid. The Action parameter is the action to be updated. <method namespace="DBGrids" class="TCustomDBGrid">UpdateAction</method> returns a boolean that indicates whether the action was updated by the grid.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</method>, <method namespace="DBGrids" class="TCustomDBGrid">UpdateAction</method> checks whether the action relies on the state of the associated dataset, and if so, updates the action accordingly.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ValidFieldIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether an index into the columns array refers to a valid field in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TCustomDBGrid">ValidFieldIndex</method> to determine whether a column displays data from a field in the dataset. <method namespace="DBGrids" class="TCustomDBGrid">ValidFieldIndex</method> returns true if the column is associated with a database field. <method namespace="DBGrids" class="TCustomDBGrid">ValidFieldIndex</method> returns false if the column is a calculated field or if the field for the column is undefined.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">Create</method>s and initializes an instance of <method namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TCustomDBGrid">Create</method> to instantiate a data-aware grid at runtime. Grids placed on a form at design time are created automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pass a single Component as a parameter to provide the grid with an Owner that is responsible for freeing the grid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.BeginLayout">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Increments the LayoutLock property when the column bindings or fields in the dataset change.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. Data-aware grids call <method namespace="DBGrids" class="TCustomDBGrid">BeginLayout</method> internally before making changes to the Columns property or any of the individual TColumn objects in Columns. Once the change is complete, the data-aware grid calls EndLayout. If the response to the change must be canceled or postponed, the grid calls CancelLayout.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Each call to <method namespace="DBGrids" class="TCustomDBGrid">BeginLayout</method> increments the LayoutLock property. Each call to EndLayout or CancelLayout decrements the LayoutLock property. If LayoutLock returns to 0 in a call to EndLayout, the Fields property is updated to match both the bindings of the Columns property and the fields available in the dataset. The Columns property is then updated in turn to match the Fields property. This ensures that the Columns property matches both the specified column bindings and the fields available in the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.BeginUpdate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Increments the UpdateLock property when the data in the grid changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. Data-aware grids call <method namespace="DBGrids" class="TCustomDBGrid">BeginUpdate</method> internally before making changes that affect the data that is drawn in the grid. Once the change is complete, the data-aware grid calls EndUpdate, which decrements the UpdateLock property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">While UpdateLock is greater than 0, the grid does not repaint its cells. <method namespace="DBGrids" class="TCustomDBGrid">BeginUpdate</method> and EndUpdate prevent the grid from flickering when the grid is resized or the user scrolls through the data.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CalcSizingState">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines the appearance of the mouse cursor during resizing.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBGrids" class="TCustomDBGrid">CalcSizingState</method> to determine if the mouse cursor should be changed to a resize or drag cursor based on where the mouse is in the grid. For example, cursor over a grid line, in the fixed cell region, and column resize is enabled = resize cursor.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CancelLayout">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Decrements the LayoutLock property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. Data-aware grids call <method namespace="DBGrids" class="TCustomDBGrid">CancelLayout</method> internally when postponing the recomputation of Columns. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Each call to BeginLayout increments the LayoutLock property. Each call to EndLayout or <method namespace="DBGrids" class="TCustomDBGrid">CancelLayout</method> decrements the LayoutLock property. If LayoutLock returns to 0 in a call to <method namespace="DBGrids" class="TCustomDBGrid">CancelLayout</method>, the Columns property is not updated. <method namespace="DBGrids" class="TCustomDBGrid">CancelLayout</method> is called from the DeferLayout method to decrement the LayoutLock and prevent the recomputation of Columns until a more appropriate time.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CellClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBGrids" class="TCustomDBGrid">CellClick</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot directly call <method namespace="DBGrids" class="TCustomDBGrid">CellClick</method>. It is exposed as a protected method so that descendants can call the On<method namespace="DBGrids" class="TCustomDBGrid">CellClick</method> event handler in response to other events or override the response when the user releases the mouse in a cell of the grid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ColumnMoved">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBGrids" class="TCustomDBGrid">ColumnMoved</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot directly call <method namespace="DBGrids" class="TCustomDBGrid">ColumnMoved</method>. It is exposed as a protected method so that descendants can call the On<method namespace="DBGrids" class="TCustomDBGrid">ColumnMoved</method> event handler in response to other events or override the response after a column in the grid is moved.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ColEnter">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBGrids" class="TCustomDBGrid">ColEnter</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot directly call <method namespace="DBGrids" class="TCustomDBGrid">ColEnter</method>. It is exposed as a protected method so that descendants can call the OnCellEnter event handler in response to other events or override the response when a cell in the grid is selected.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ColExit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBGrids" class="TCustomDBGrid">ColExit</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot directly call <method namespace="DBGrids" class="TCustomDBGrid">ColExit</method>. It is exposed as a protected method so that descendants can call the On<method namespace="DBGrids" class="TCustomDBGrid">ColExit</method> event handler in response to other events or override the response when a cell in the grid loses focus.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ColWidthsChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the column widths in the Columns property when the user resizes the columns.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot directly call <method namespace="DBGrids" class="TCustomDBGrid">ColWidthsChanged</method>. It is called automatically when the user resizes the columns in the grid. <method namespace="DBGrids" class="TCustomDBGrid">ColWidthsChanged</method> overrides the inherited method to update the column widths in the Columns property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.CreateWnd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Creates the window used to display the data-aware grid.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">The Windows control for the grid can be temporarily destroyed and recreated in order to set properties that require changing the window creation parameters. <method namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</method> calls <method namespace="DBGrids" class="TCustomDBGrid">CreateWnd</method> to create this Windows control when necessary.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBGrids" class="TCustomDBGrid">CreateWnd</method> overrides the inherited method to set up the relationship between the visual display and the data source after the window is created.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DeferLayout">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Decrements the LayoutLock property and posts a message to the grid to trigger a new layout sequence at a more appropriate time.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. Data-aware grids call <method namespace="DBGrids" class="TCustomDBGrid">DeferLayout</method> internally to postpone the recomputation of the Columns property after the dataset changes when it is inappropriate to recompute columns immediately.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">DeferLayout</method> calls CancelLayout to decrement the LayoutLock property, which was incremented in response to the change in the dataset. It then posts a message to the grid, which triggers another layout attempt at a later point in time. When the message is received, the grid calls BeginLayout and then either EndLayout or <method namespace="DBGrids" class="TCustomDBGrid">DeferLayout</method>, depending on whether it is an appropriate time to proceed with the computation of Columns.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefineFieldMap">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Builds the Fields array from the Columns property and the data source.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. <method namespace="DBGrids" class="TCustomDBGrid">DefineFieldMap</method> rebuilds the Fields array to reflect the fields from the data source that correspond to the columns in the Columns property. After calling <method namespace="DBGrids" class="TCustomDBGrid">DefineFieldMap</method>, the Columns property should be updated to use the field components in the Fields array. This ensures that the Columns property reflects any changes imposed by the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefineProperties">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Defines a savable version of the Columns property when necessary.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">DefineProperties</method> overrides the inherited method to load and save the Columns property if the columns have been customized.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DrawCell">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Draws the cell specified by the ACol and ARow parameters.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">DrawCell</method> overrides the inherited method to use the Columns property when drawing cells in the grid.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">DrawCell</method> sets up the font and brush and paints the background of the cell. If the DefaultDrawing property is true, <method namespace="DBGrids" class="TCustomDBGrid">DrawCell</method> fetches the data for the cell and writes it to the position described by the ARect parameter. Whether DefaultDrawing is true or false, <method namespace="DBGrids" class="TCustomDBGrid">DrawCell</method> generates the OnDrawDataCell and OnDrawColumnCell events. Finally, if DefaultDrawing is true and either the cell has focus or the cell is selected and Options includes dgAlwaysShowSelection, <method namespace="DBGrids" class="TCustomDBGrid">DrawCell</method> draws a focus rectangle around the cell.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DrawDataCell">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBGrids" class="TCustomDBGrid">DrawDataCell</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call <method namespace="DBGrids" class="TCustomDBGrid">DrawDataCell</method> directly. It is exposed as a protected method so that descendants can call the On<method namespace="DBGrids" class="TCustomDBGrid">DrawDataCell</method> event handler or override the method to block the event.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DrawColumnCell">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBGrids" class="TCustomDBGrid">DrawColumnCell</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call <method namespace="DBGrids" class="TCustomDBGrid">DrawColumnCell</method> directly. It is exposed as a protected method so that descendants can call the On<method namespace="DBGrids" class="TCustomDBGrid">DrawColumnCell</method> event handler or override the method to block the event.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.EditButtonClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBGrids" class="TCustomDBGrid">EditButtonClick</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call <method namespace="DBGrids" class="TCustomDBGrid">EditButtonClick</method> directly. It is exposed as a protected method so that descendants can call the On<method namespace="DBGrids" class="TCustomDBGrid">EditButtonClick</method> event handler or override the method to block the event.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.EndLayout">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Decrements the LayoutLock property and recomputes the Columns property if LayoutLock reaches 0.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. Data-aware grids call <method namespace="DBGrids" class="TCustomDBGrid">EndLayout</method> internally after changes to the Columns property or the dataset. <method namespace="DBGrids" class="TCustomDBGrid">EndLayout</method> decrements the LayoutLock property which was previously incremented by BeginLayout before the Columns property was changed or when notification of the change to the dataset was received.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If LayoutLock returns to 0, <method namespace="DBGrids" class="TCustomDBGrid">EndLayout</method> updates the Fields property to match both the bindings of the Columns property and the fields available in the dataset. The Columns property is then updated in turn to match the Fields property. This ensures that the Columns property matches both the specified column bindings and the fields available in the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.EndUpdate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Decrements the UpdateLock property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. Data-aware grids call <method namespace="DBGrids" class="TCustomDBGrid">EndUpdate</method> internally after making changes that affect the data that is drawn in the grid. <method namespace="DBGrids" class="TCustomDBGrid">EndUpdate</method> returns the UpdateLock to the state it was in before the BeginUpdate method was called at the start of the changes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">While UpdateLock is greater than 0, the grid does not repaint its cells. When UpdateLock returns to 0, painting is reenabled. BeginUpdate and <method namespace="DBGrids" class="TCustomDBGrid">EndUpdate</method> prevent the grid from flickering when the grid is resized or the user scrolls through the data.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.KeyDown">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides special processing when the user presses down on a key.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call <method namespace="DBGrids" class="TCustomDBGrid">KeyDown</method>. It is called automatically when the user presses a key, before the KeyPress method is called. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">KeyDown</method> generates an On<method namespace="DBGrids" class="TCustomDBGrid">KeyDown</method> event and then responds to the following keystrokes:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Keystroke</th>
                        
                  <th>Response</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>UpArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the previous row. If Options includes dgRowSelect, select it.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+UpArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the first row in the grid. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>DownArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the next row. If Options includes dgRowSelect, select it.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+DownArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the last row in the grid. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>PageUp</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move up by the number of records shown in the grid. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+PageUp</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the first row in the grid. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>PageDown</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move down by the number of records shown in the grid. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>LeftArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move left one column. If Options includes dgRowSelect, move to the previous row without selecting it.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+LeftArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the first column in the current row.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>RightArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move right one column. If Options includes dgRowSelect, move to the next row without selecting it.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+RightArrow</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the last column in the current row.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Home</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the first column of the current row. If Options includes dgRowSelect or the grid has only one column, move to the first record in the dataset. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+Home</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the first record in the dataset. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>End</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the last column of the current row. If Options includes dgRowSelect or the grid has only one column, move to the last record in the dataset. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+End</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the last record in the dataset. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Tab</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the next cell in the grid.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Shift+Tab</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Move to the previous cell in the grid.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Ctrl+Delete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Delete the current selection.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Insert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Insert a new row above the current one, and move to it. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Escape</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Cancel any unposted edits. Deselect any selected rows.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>F2</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Put the grid in edit mode.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.KeyPress">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Responds when the user presses a key.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">When the user presses a key, first the KeyDown method is called, then the <method namespace="DBGrids" class="TCustomDBGrid">KeyPress</method> method, and finally the KeyUp method when the user releases the key. <method namespace="DBGrids" class="TCustomDBGrid">KeyPress</method> overrides the inherited method to write edits to the dataset when the user presses Return.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.InvalidateTitles">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invalidates the column titles so that they will be repainted.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TCustomDBGrid">InvalidateTitles</method> to cause the column titles to be repainted.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.LayoutChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Recomputes the Columns property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. It is called automatically in response to changes the affect the layout of the columns. These include</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Changes to the fields in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Changes in the Options property that affect the layout.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Changes to the TitleFont property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">LayoutChanged</method> calls AcquireLayoutLock to initiate the changes to Columns. If AcquireLayoutLock does not indicate that the call to <method namespace="DBGrids" class="TCustomDBGrid">LayoutChanged</method> is recursive, <method namespace="DBGrids" class="TCustomDBGrid">LayoutChanged</method> calls EndLayout to perform the actual computation.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.LinkActive">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Recomputes the Columns property and the vertical scroll bar of the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. It is called automatically when the dataset is opened. <method namespace="DBGrids" class="TCustomDBGrid">LinkActive</method> calls LayoutChanged to recompute the Columns property, and adjusts the vertical scroll bar for the data in the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Loaded">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets up the Columns property once the data grid and all its child components are loaded.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method. <method namespace="DBGrids" class="TCustomDBGrid">Loaded</method> overrides the inherited method to lay out the grid once all of its parts have been loaded.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.MouseDown">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides special processing when the user clicks on the mouse.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">MouseDown</method> is called automatically when the user presses the mouse button. If the mouse is pressed in the row or column resize region of the grid, <method namespace="DBGrids" class="TCustomDBGrid">MouseDown</method> posts any pending edits and calls the inherited method to handle the resize. When Options includes dgRowSelect, <method namespace="DBGrids" class="TCustomDBGrid">MouseDown</method> selects the row that received the click, or toggles its selection state if the Ctrl key is pressed. If the mouse is clicked in a data cell, <method namespace="DBGrids" class="TCustomDBGrid">MouseDown</method> tries to put the grid into edit mode.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.MouseUp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides special processing when the user releases the mouse button.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">MouseUp</method> is called automatically when the user releases the mouse button. After calling the inherited method, <method namespace="DBGrids" class="TCustomDBGrid">MouseUp</method> locates the cell that was under the mouse when it was released. <method namespace="DBGrids" class="TCustomDBGrid">MouseUp</method> generates an OnTitleClick or OnCellClick event, depending on the location of the mouse.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Notification">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to notifications that components are about to be destroyed.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the inherited method, <method namespace="DBGrids" class="TCustomDBGrid">Notification</method>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks if the pop-up menu for any of its columns is going away, and if so, resets the PopupMenu property of the column object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks if the data source is going away, and if so, sets the DataSource property to nil (Delphi) or NULL (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks if any of the field components associated with its columns is going away, and if so, removes the column from the layout.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Scroll">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the image of the grid to reflect a new record position.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">Scroll</method> is called in response to changes in the current record in the dataset. <method namespace="DBGrids" class="TCustomDBGrid">Scroll</method> updates the image in the grid, scrolling the data if necessary.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.SetEditText">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the edited version of the current cell's data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The inplace editor calls <method namespace="DBGrids" class="TCustomDBGrid">SetEditText</method> so that the grid can store the new value for the current cell. The grid stores this value until the user moves to a new cell or presses Escape. If the user moves to a new cell, this value is written to the record in the database. If the user presses Escape, the value is discarded.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.TimedScroll">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves the current record in response to the user dragging the mouse outside of the data cells.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the Direction parameter includes sdUp, <method namespace="DBGrids" class="TCustomDBGrid">TimedScroll</method> moves the dataset to the first visible record in the grid. If the Direction parameter includes sdDown, <method namespace="DBGrids" class="TCustomDBGrid">TimedScroll</method> moves the dataset to the last visible record in the grid. After adjusting the current record, <method namespace="DBGrids" class="TCustomDBGrid">TimedScroll</method> calls the inherited method to update the image.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.TitleClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBGrids" class="TCustomDBGrid">TitleClick</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call <method namespace="DBGrids" class="TCustomDBGrid">TitleClick</method> directly. It is exposed as a protected method so that descendants can call the On<method namespace="DBGrids" class="TCustomDBGrid">TitleClick</method> event handler or override the method to block the event.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.TopLeftChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the position of the inplace editor when the grid scrolls.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">TopLeftChanged</method> is called whenever the LeftCol or TopRow property changes.  InvalidateTitles and the inherited method <method namespace="DBGrids" class="TCustomDBGrid">TopLeftChanged</method> method are called.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultDrawDataCell">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Draws the text in a column cell.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TCustomDBGrid">DefaultDrawDataCell</method> from an OnDrawDataCell event handler to lookup up the text representation of a field and write it to the cell. Unlike what the grid draws when the DefaultDrawing property is true, <method namespace="DBGrids" class="TCustomDBGrid">DefaultDrawDataCell</method> gets the alignment for the text from the field component rather than the column descriptor, and it never draws a focus rectangle on selected cells.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Rect parameter gives the position of the cell on the canvas. The Field parameter gives the field component that provides the data and alignment for the cell. The State parameter indicates whether the cell has input focus, whether the cell is selected, and whether the cell is a fixed (non-data) cell such as a column header.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultDrawColumnCell">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Draws the text in a column cell.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TCustomDBGrid">DefaultDrawColumnCell</method> from an OnDrawColumnCell event handler to lookup up the text representation of a field and write it to the cell. <method namespace="DBGrids" class="TCustomDBGrid">DefaultDrawColumnCell</method> does exactly what the grid does when the DefaultDrawing property is true, except it never draws a focus rectangle on selected cells.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Rect parameter is the position of the cell on the canvas. The DataCol parameter is the index of the column in the Columns array. The Column parameter is the TColumn object that describes the display attributes and field binding for the cell. The State parameter indicates whether the cell has input focus, whether the cell is selected, and whether the cell is a fixed (non-data) cell such as a column header.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultHandler">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Displays the popup menu when a column is right-clicked.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBGrids" class="TCustomDBGrid">DefaultHandler</method> is the last method to receive Windows messages that are sent to the grid. After calling the inherited method and allowing it to process the message, <method namespace="DBGrids" class="TCustomDBGrid">DefaultHandler</method> checks if the Msg parameter indicates the right mouse button was released over a column with a popup menu. If the column has a popup menu with its AutoPopup property set to</condition>
                     
               <condition os="Windows">true, <method namespace="DBGrids" class="TCustomDBGrid">DefaultHandler</method> displays the popup menu.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">When overriding <method namespace="DBGrids" class="TCustomDBGrid">DefaultHandler</method>, be sure to call the inherited method for all unhandled messages.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ShowPopupEditor">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Displays the nested dataset associated with Column in a new window.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBGrids" class="TCustomDBGrid">ShowPopupEditor</method> to display a nested dataset or ADT in a new grid in a new window.  Column is the column that is representing the dataset or reference field of the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, if the seventh column in the grid represents a dataset field, the following code displays the dataset associated with that field for the current record.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBGrid1.ShowPopupEditor(DBGrid1.Columns[7]);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBGrid1-&gt;ShowPopupEditor(DBGrid1-&gt;Columns-&gt;Items[7]);</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">ShowPopupEditor</method> expects the TColumn object field type passed to be ftDataSet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the ellipsis button in the grid cell of a nested dataset or reference field is clicked, EditButtonClick is called. If the grid's OnEditButtonClick event has an event handler, that event is fired and <method namespace="DBGrids" class="TCustomDBGrid">ShowPopupEditor</method> is not called. If the event handler is not assigned, <method namespace="DBGrids" class="TCustomDBGrid">ShowPopupEditor</method> is called.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The X and Y parameters are screen coordinates to position the popup editor form. The default behavior is to position the form below the cell in the grid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBGrids" class="TCustomDBGrid">Destroy</method>s an instance of <method namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBGrids" class="TCustomDBGrid">Destroy</method> directly in an application. Instead, call Free. Free verifies that the data-aware grid is not nil, and only then calls <method namespace="DBGrids" class="TCustomDBGrid">Destroy</method>. <method namespace="DBGrids" class="TCustomDBGrid">Destroy</method> frees all the helper objects used by the grid.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Columns">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Describes the display attributes and field bindings of the columns.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TCustomDBGrid">Columns</property> to read or set the field bindings and display attributes of the columns in the data-aware grid. The <property namespace="DBGrids" class="TCustomDBGrid">Columns</property> property is an indexed collection of TColumn objects. Use the properties of the TColumn objects to specify the display attributes or field bindings of individual columns in the grid. The field binding of a column designates a field within the dataset specified by the DataSource property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TCustomDBGrid">Columns</property> can be set at design time through the <property namespace="DBGrids" class="TCustomDBGrid">Columns</property> editor, or programmatically at runtime.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DefaultDrawing">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the cells in the data-aware grid are drawn automatically.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBGrids" class="TCustomDBGrid">DefaultDrawing</property> to true to allow the data-aware grid to draw the data in the cells of the grid automatically. Set <property namespace="DBGrids" class="TCustomDBGrid">DefaultDrawing</property> to false to turn off the default drawing when providing customized painting in an OnDrawColumnCell event handler or an OnDrawDataCell event handler. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBGrids" class="TCustomDBGrid">DefaultDrawing</property> is true, the data-aware grid fetches the data for each cell from the appropriate entry in the Fields array, and writes it to the cell. It then draws the focus rectangle if the cell has focus, or if the cell is selected and the Options property includes dgAlwaysShowSelection.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBGrids" class="TCustomDBGrid">DefaultDrawing</property> is false, the data-aware grid draws the appropriate background color on the cell and sets up the brush and font described by the appropriate TColumn object. However, the value of the field is not written to the cell, and no focus rectangle is drawn.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Helps the data-aware grid manage its link to the data source and respond to data events.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not need to use the <property namespace="DBGrids" class="TCustomDBGrid">DataLink</property> property. It is exposed as a protected property so that component writers can use descendants of TGrid<property namespace="DBGrids" class="TCustomDBGrid">DataLink</property> to respond to additional data events.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TCustomDBGrid">DataLink</property> helps <property namespace="DBGrids" class="TCustomDBGrid">TCustomDBGrid</property> to</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Resolve the field bindings specified by Columns with the fields in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Respond to changes in the values of fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Respond to changes in record currency.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Respond to changes in the editing state of the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep track of unposted edits and discard or post them as appropriate.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.IndicatorOffset">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the index of the first column in the grid that contains data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TCustomDBGrid">IndicatorOffset</property> to convert between the positions of the columns in the Columns property and the columns drawn on the data-aware grid. <property namespace="DBGrids" class="TCustomDBGrid">IndicatorOffset</property> is 1 if the Options property includes dgIndicator, because the first column of the grid is used for the current row indicator. <property namespace="DBGrids" class="TCustomDBGrid">IndicatorOffset</property> is 0 if all columns contain data.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.LayoutLock">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Counts the number of times BeginLayout has been called without an EndLayout or CancelLayout call.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TCustomDBGrid">LayoutLock</property> to determine when the column bindings change. Whenever a column width or binding changes or the fields in the data source change, the BeginLayout method is called. BeginLayout increments <property namespace="DBGrids" class="TCustomDBGrid">LayoutLock</property> to keep track of the fact that the column bindings are changing. When changes are complete, the EndLayout method is called. EndLayout decrements <property namespace="DBGrids" class="TCustomDBGrid">LayoutLock</property>. When <property namespace="DBGrids" class="TCustomDBGrid">LayoutLock</property> returns to 0, the data-aware grid knows that all changes are complete, and the Fields and Columns properties are updated.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Options">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies various display and behavioral properties of the data-aware grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBGrids" class="TCustomDBGrid">Options</property> to include the desired properties for the data-aware grid.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the grid is used for display only, or whether the user can edit data using the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBGrids" class="TCustomDBGrid">ReadOnly</property> to true to prevent users from changing the data in the dataset. Set <property namespace="DBGrids" class="TCustomDBGrid">ReadOnly</property> to false to allow users to edit data using the grid. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBGrids" class="TCustomDBGrid">ReadOnly</property> is true, users cannot use the Insert key to insert a new row in the grid or use the Down Arrow key to add a row to the end of the grid.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.SelectedRows">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies a set of bookmarks for all the records in the dataset that correspond to rows selected in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties and methods of the TBookmarkList object returned by <property namespace="DBGrids" class="TCustomDBGrid">SelectedRows</property> to </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determine the number of rows in the grid that are selected.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determine whether the current record in the dataset is selected.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determine whether a particular record in the dataset is selected.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Delete all selected rows from the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TCustomDBGrid">SelectedRows</property> is only meaningful when the Options property includes dgRowSelect and dgMultiSelect.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.TitleFont">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Describes the font used to draw the column titles in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBGrids" class="TCustomDBGrid">TitleFont</property> to change the font used to draw the column headings. <property namespace="DBGrids" class="TCustomDBGrid">TitleFont</property> is only meaningful if the Options property includes dgTitles.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.UpdateLock">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Counts the number of times BeginUpdate is called without a corresponding call to EndUpdate.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TCustomDBGrid">UpdateLock</property> prevents the grid from repainting while the data in the grid changes. Whenever a change is made that affects the data that is drawn in the grid, the BeginUpdate method is called. BeginUpdate increments <property namespace="DBGrids" class="TCustomDBGrid">UpdateLock</property> to keep track of the fact that the contents of the grid are changing. When changes are complete, the EndUpdate method is called. EndUpdate decrements <property namespace="DBGrids" class="TCustomDBGrid">UpdateLock</property>. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBGrids" class="TCustomDBGrid">UpdateLock</property> returns to 0, the data-aware grid can repaint its cells. When <property namespace="DBGrids" class="TCustomDBGrid">UpdateLock</property> is greater than 0, the grid defers repaints. <property namespace="DBGrids" class="TCustomDBGrid">UpdateLock</property> prevents the grid from flickering when the grid is resized or the user scrolls through the data.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.FieldCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of fields (columns) displayed in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TCustomDBGrid">FieldCount</property> to iterate through all the field components indexed by the Fields property. <property namespace="DBGrids" class="TCustomDBGrid">FieldCount</property> may differ from the number of fields in the underlying dataset because the grid may contain calculated fields, and not all fields in the dataset are necessarily shown in the grid. Individual fields are removed and calculated fields are added using the Columns editor at design time. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBGrids" class="TCustomDBGrid">FieldCount</property> is the same as the number of columns at runtime. At design time, the grid may contain empty columns.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.Fields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides indexed access to the field components that correspond to the columns.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBGrids" class="TCustomDBGrid">Fields</property> to gain direct access to the field component in the dataset for a particular column in the grid. The field for the first data column is obtained using an Index of 0, the field for the second data column using an Index of 1, and so on. The range for Index is 0... FieldCount - 1. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The first data column in the grid may not be the same as the first column in the grid. If Options includes dgIndicator, the first column in the grid is a non-scrolling column that contains the current row indicator.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The individual field components in <property namespace="DBGrids" class="TCustomDBGrid">Fields</property> can be used to obtain information such as the value of the field on the current record, its preferred display width, or the string to draw when displaying or editing the field. Use the field component to write values directly to the dataset without using the editor in the cell.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the column in the grid represents a calculated field, there is no field component for that column in the dataset. <property namespace="DBGrids" class="TCustomDBGrid">Fields</property> returns nil (Delphi) or NULL (C++) when the Index specifies the column that contains a calculated field. To obtain the field component for a calculated field, use the GetColField method.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.SelectedField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field component for the currently selected cell in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBGrids" class="TCustomDBGrid">SelectedField</property> to move focus to a particular field in the grid. Read <property namespace="DBGrids" class="TCustomDBGrid">SelectedField</property> to obtain access to the field component for the currently selected cell. If there is not currently selected cell, <property namespace="DBGrids" class="TCustomDBGrid">SelectedField</property> is nil (Delphi) or NULL (C++). For example, when an entire row is selected, <property namespace="DBGrids" class="TCustomDBGrid">SelectedField</property> is nil or NULL.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.SelectedIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the index of the currently selected column in the Columns array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBGrids" class="TCustomDBGrid">SelectedIndex</property> to move focus to a column in the grid that is identified by position. Read <property namespace="DBGrids" class="TCustomDBGrid">SelectedIndex</property> to determine which column in the grid has focus. A value of 0 indicates the first data column, 1 is the second data column, and so on. <property namespace="DBGrids" class="TCustomDBGrid">SelectedIndex</property> is -1 if there is no currently selected column.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the Options property includes dgIndicator, the index of the data column given by <property namespace="DBGrids" class="TCustomDBGrid">SelectedIndex</property> will differ from the index of the physical column in the grid.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To access the field component for the selected column, use the SelectedField property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the link to the dataset where the data-aware grid finds its data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBGrids" class="TCustomDBGrid">DataSource</property> to the T<property namespace="DBGrids" class="TCustomDBGrid">DataSource</property> object that links to the dataset where the data-aware grid should fetch its data. <property namespace="DBGrids" class="TCustomDBGrid">DataSource</property> allows the data-aware grid to read from, write to, and navigate around the dataset.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.OnColEnter">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when focus moves to a new cell in the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBGrids" class="TCustomDBGrid">OnColEnter</event> event handler to take specific action when a new cell has just been selected. Focus moves to a cell when</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The user navigates to the cell using the keyboard. For example, when the user uses the Tab key, or the Home key.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The user clicks the mouse button down in the cell.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The SelectedField or SelectedIndex property is set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the SelectedField or SelectedIndex property to determine which cell was just entered.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.OnColExit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs just before a cell in the grid loses input focus.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBGrids" class="TCustomDBGrid">OnColExit</event> event handler to take specific action when a cell is about to lose focus. For example, use <event namespace="DBGrids" class="TCustomDBGrid">OnColExit</event> to post edits to the underlying dataset when the user leaves a cell, rather than waiting for the user to leave the record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A cell loses focus when</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The user navigates out of the cell using the keyboard. For example, when the user presses the Tab key or the Home key.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The user clicks the mouse button down in another cell.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The SelectedField or SelectedIndex property is set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the selected cell in the data-aware grid changes, first the <event namespace="DBGrids" class="TCustomDBGrid">OnColExit</event> event occurs. Then the values of SelectedField and SelectedIndex are updated. Finally the OnColEnter event occurs. Thus, in an <event namespace="DBGrids" class="TCustomDBGrid">OnColExit</event> event handler, the SelectedField or SelectedIndex property can be used to determine which column is about to lose focus.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.OnDrawDataCell">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the grid needs to paint a cell if the State property of Columns is csDefault.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not write an <event namespace="DBGrids" class="TCustomDBGrid">OnDrawDataCell</event> event handler. <event namespace="DBGrids" class="TCustomDBGrid">OnDrawDataCell</event> is obsolete and included for backward compatibility. Instead, write an OnDrawColumnCell event handler.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.OnDrawColumnCell">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the grid needs to paint a cell.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBGrids" class="TCustomDBGrid">OnDrawColumnCell</event> event handler to provide customized drawing for the data in the cells of the grid. Draw on the cell using the methods of the Canvas property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An <event namespace="DBGrids" class="TCustomDBGrid">OnDrawColumnCell</event> event handler can call the DefaultDrawColumnCell method to instruct the data-aware grid to write the data value in the cell. The <event namespace="DBGrids" class="TCustomDBGrid">OnDrawColumnCell</event> event handler can augment the DefaultDrawColumnCell method to provide visual indications of selection and focus.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If DefaultDrawing is true, the data will already be drawn in the cell before the <event namespace="DBGrids" class="TCustomDBGrid">OnDrawColumnCell</event> event, and the grid draws a focus rectangle around selected cells after the <event namespace="DBGrids" class="TCustomDBGrid">OnDrawColumnCell</event> event.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the Columns property has a State property of csDefault, the OnDrawDataCell event occurs before the <event namespace="DBGrids" class="TCustomDBGrid">OnDrawColumnCell</event>. The OnDrawDataCell event is obsolete, and only included for backward compatibility. Do not set both an OnDrawDataCell event handler and an <event namespace="DBGrids" class="TCustomDBGrid">OnDrawColumnCell</event> event handler.</para>
                  
            </note>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.OnEditButtonClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the user presses the ellipsis button in a grid column.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBGrids" class="TCustomDBGrid">OnEditButtonClick</event> event handler to bring up an appropriate list or dialog when the user presses the ellipsis button in a grid cell. The <event namespace="DBGrids" class="TCustomDBGrid">OnEditButtonClick</event> event handler can set the value of the field based on the user response to the list or dialog. Use the SelectedField property to access the TField component whose value should be set.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.OnColumnMoved">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the user moves a column using the mouse.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBGrids" class="TCustomDBGrid">OnColumnMoved</event> event handler to take specific action just after a column in the grid has been moved. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <event namespace="DBGrids" class="TCustomDBGrid">OnColumnMoved</event> can only occur when the Options property includes dgColumnResize.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.OnCellClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the user releases the mouse in one of the cells of the grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBGrids" class="TCustomDBGrid">OnCellClick</event> event handler to take specific action when the user clicks in one of the cells of the data-aware grid. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <event namespace="DBGrids" class="TCustomDBGrid">OnCellClick</event> occurs when the user releases the mouse. To take action when the user clicks down on the mouse, use the OnColEnter event.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <event namespace="DBGrids" class="TCustomDBGrid">OnCellClick</event> will not occur when the mouse is released at the end of resizing a row or column, or when the cell is being edited.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBGrids.Borland.Vcl.DBGrids.OnTitleClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the user releases the mouse in one of the column headers.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBGrids" class="TCustomDBGrid">OnTitleClick</event> event handler to take specific action when the user clicks in one of the column headers. The Column parameter is the TColumn object that corresponds to the column where the mouse was when the user released the left mouse button.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBGrids.TDBGrid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TDBGrid</class> displays and manipulates records from a dataset in a tabular grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Put a <class namespace="DBGrids">TDBGrid</class> object on a form to display and edit the records from a database table or query. Applications can use the data grid to insert, delete, or edit data in the database, or simply to display it.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">At runtime, users can use the database navigator (TDBNavigator) to move through data in the grid, and to insert, delete, and edit the data. Edits that are made in the data grid are not posted to the underlying dataset until the user moves to a different record or closes the application.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBGrids">TDBGrid</class> implements the generic behavior introduced in TCustomDBGrid. <class namespace="DBGrids">TDBGrid</class> publishes many of the properties inherited from TCustomDBGrid, but does not introduce any new behavior.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TFieldDataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TFieldDataLink</class> helps a data-aware windowed control manage its link to a TField object and respond to data events.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TFieldDataLink</class> as a member in any data-aware object that needs to link to a TField object and respond to data events or track database information. The data-aware object must be a descendant of T<condition os="Windows">Win</condition>
               
               <condition os="Linux">Widget</condition>Control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The constructor of the data-aware object should call the constructor of the <class namespace="DBCtrls">TFieldDataLink</class> member, and initialize any relevant event-handlers. The data-aware object can then link to a TField object by using the FieldName property of the <class namespace="DBCtrls">TFieldDataLink</class> and can link to a dataset by using the DataSource property of the <class namespace="DBCtrls">TFieldDataLink</class>.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Edit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Attempts to drive the DataSource into an editing state if it is not already in one.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBCtrls" class="TFieldDataLink">Edit</method> to try to ensure that the contents of the field can be modified. A return value of true indicates that the field was already in an editing state, or that the DataSource was successfully changed to allow editing. A return value of false indicates that the DataSource could not be changed to allow editing. For example, if the CanModify property is false, <method namespace="DBCtrls" class="TFieldDataLink">Edit</method> fails, and returns false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TFieldDataLink">Create</method>s an instance of <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should never need to create a <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> component. Component writers will need to instantiate a <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> object from the constructor of data-aware controls. To do so, use the new keyword, which returns an indirect reference to the new <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> object.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ActiveChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBCtrls" class="TFieldDataLink">ActiveChanged</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Changes to the Active property trigger the <method namespace="DBCtrls" class="TFieldDataLink">ActiveChanged</method> method. If an OnActiveChange event handler is assigned, <method namespace="DBCtrls" class="TFieldDataLink">ActiveChanged</method> calls this event handler. If <method namespace="DBCtrls" class="TFieldDataLink">ActiveChanged</method> is triggered by a transition into an active state, then before calling the event handler, <method namespace="DBCtrls" class="TFieldDataLink">ActiveChanged</method> makes sure that the Field for this <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> is still valid. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.EditingChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enforces the CanModify property when the field binding changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Changing the field binding can change the validity of the CanModify property, since individual field components can disallow edits. If <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> is in an editing state when the Field property is changed, <method namespace="DBCtrls" class="TFieldDataLink">EditingChanged</method> checks the CanModify property. If CanModify is false, it changes back out of the editing state. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>This differs significantly from the<condition language="Delphi"/>inherited <method namespace="DBCtrls" class="TFieldDataLink">EditingChanged</method> method of TDataLink. The functionality of the inherited method is replaced in <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> by the OnEditingChange event handler.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.FocusControl">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the input focus to Control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TFieldDataLink">FocusControl</method> to give the Control associated with this <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> object the input focus. <method namespace="DBCtrls" class="TFieldDataLink">FocusControl</method> checks whether the Control can receive input focus, and if so, calls its SetFocus method to move focus to the Control.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.LayoutChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ensures that the Field property is valid after changes in the layout of a container of the Control for this <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TFieldDataLink">LayoutChanged</method> is called after changes in the layout of one of the containers of the Control for this <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> that might change the validity of its field binding. For example, if the Control is embedded within a TCustomDBGrid, and one of the columns is deleted, the Field property for the Control might become invalid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.RecordChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an OnDataChange event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications can not call this protected method. It is triggered automatically when the contents of the current record change. <method namespace="DBCtrls" class="TFieldDataLink">RecordChanged</method> calls the OnDataChange event handler if there is one.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DBCtrls" class="TFieldDataLink">UpdateData</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TFieldDataLink">UpdateData</method> overrides the default <method namespace="DBCtrls" class="TFieldDataLink">UpdateData</method> method to call the On<method namespace="DBCtrls" class="TFieldDataLink">UpdateData</method> event handler where the data-aware control can write any pending edits to the record in the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Modified">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keeps track of changes made to the data for this field that are not yet written to the record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TFieldDataLink">Modified</method> when the Control for this <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> begins processing edits.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Reset">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ignores all pending changes and generates an OnDataChange event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Control that owns a <method namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</method> object calls its <method namespace="DBCtrls" class="TFieldDataLink">Reset</method> method to process a UI action that cancels edits to the field. <method namespace="DBCtrls" class="TFieldDataLink">Reset</method> calls the OnDataChange event handler without writing any pending changes to the record in the dataset.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.CanModify">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the Control can modify a field in the database table managed by <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TFieldDataLink">CanModify</property> to find out whether the Control that owns this <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property> is able to alter the data in the database that this field represents. <property namespace="DBCtrls" class="TFieldDataLink">CanModify</property> may be false because the control is read-only, or because the underlying field does not permit updates.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Control">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the data-aware component that uses this <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property> object to manage its link to a TField object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This property should only be set by components that use <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property> to manage the link to a TField object. In their own constructors, these data-aware components can set the <property namespace="DBCtrls" class="TFieldDataLink">Control</property> property of their <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property> member to self (Delphi) or this (C++), after calling the <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property> constructor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBCtrls" class="TFieldDataLink">Control</property> property can be read to access methods of the component when processing data events.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Editing">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset that contains the associated field is in edit mode.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TFieldDataLink">Editing</property> to determine whether the value of the field associated with this TDataLink can currently be edited. If <property namespace="DBCtrls" class="TFieldDataLink">Editing</property> is false, calling the Edit method may drive the dataset into edit mode. The Edit method may not be successful, however, if the field cannot be edited. For example, if the CanModify property is false, <property namespace="DBCtrls" class="TFieldDataLink">Editing</property> will always be false.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field component managed by this T<property namespace="DBCtrls" class="TFieldDataLink">Field</property>DataLink object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TFieldDataLink">Field</property> to gain access to the field object to which the Control of this T<property namespace="DBCtrls" class="TFieldDataLink">Field</property>DataLink is bound.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Before using <property namespace="DBCtrls" class="TFieldDataLink">Field</property> to alter the value of a field's contents, applications should check the CanModify property. The <property namespace="DBCtrls" class="TFieldDataLink">Field</property> object will not be aware of all constraints to edits for this T<property namespace="DBCtrls" class="TFieldDataLink">Field</property>DataLink.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.FieldName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of the field to which the Control of this <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property> is bound.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TFieldDataLink">FieldName</property> to implement the <property namespace="DBCtrls" class="TFieldDataLink">FieldName</property> property of the data-aware control that owns the <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property>. Setting <property namespace="DBCtrls" class="TFieldDataLink">FieldName</property> links the <property namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</property>, and hence the control, to the field in the dataset with that name. </para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.OnDataChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the contents of the dataset change.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBCtrls" class="TFieldDataLink">OnDataChange</event> event handler to take specific action when there is a change to the contents of the field. <event namespace="DBCtrls" class="TFieldDataLink">OnDataChange</event> allows the control to respond when the dataset sends notifications that the data has changed. </para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.OnEditingChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after the DataSource transitions into or out of an editing state.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBCtrls" class="TFieldDataLink">OnEditingChange</event> event handler to take specific action when the DataSource transitions into or out of an editing state. This event can be used to create visual indications of the editing state in the control that uses this <event namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</event>.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.OnUpdateData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when it is time to post any pending changes to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBCtrls" class="TFieldDataLink">OnUpdateData</event> event handler to write the data in the representation of the field to the database record. Posting the data from within <event namespace="DBCtrls" class="TFieldDataLink">OnUpdateData</event> does not trigger a call to OnDataChange.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.OnActiveChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the Active property of the <event namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</event> changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBCtrls" class="TFieldDataLink">OnActiveChange</event> event handler to take specific action immediately after the dataset transitions into or out of an active state. <event namespace="DBCtrls" class="TFieldDataLink">OnActiveChange</event> is particularly useful for updating objects to reflect changes that occurred while the dataset was not active, as the object can not respond to events while its <event namespace="DBCtrls" class="TFieldDataLink">TFieldDataLink</event> is not Active.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TPaintControl">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbctrls">TPaintControl</class> draws data aware controls that are replicated in a data control grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Several data-aware controls use <class namespace="dbctrls">TPaintControl</class> — including TDBCheckBox, TDBComboBox, and TDBMemo - to replicate themselves within a data control grid (TDBCtrlGrid).</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbctrls" class="TPaintControl">Create</method>s and initializes a <method namespace="dbctrls" class="TPaintControl">TPaintControl</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="dbctrls" class="TPaintControl">Create</method> method creates an instance of <method namespace="dbctrls" class="TPaintControl">TPaintControl</method>.  The Owner parameter specifies the data-aware control that uses this <method namespace="dbctrls" class="TPaintControl">TPaintControl</method> object to paint its image. The ClassName parameter specifies the Window class that should be created by the paint control.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DestroyHandle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Destroys the window used by the paint control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The destructor of <method namespace="dbctrls" class="TPaintControl">TPaintControl</method> calls <method namespace="dbctrls" class="TPaintControl">DestroyHandle</method> to release the Windows resources allocated on behalf of the paint control.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbctrls" class="TPaintControl">Destroy</method>s the <method namespace="dbctrls" class="TPaintControl">TPaintControl</method> and frees its memory.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="dbctrls" class="TPaintControl">Destroy</method> directly in an application. Instead, call Free. Free verifies that the <method namespace="dbctrls" class="TPaintControl">TPaintControl</method> reference is not nil, and only then calls <method namespace="dbctrls" class="TPaintControl">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbctrls" class="TPaintControl">Destroy</method> frees the window used by the paint control.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Ctl3DButton">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the control has a three-dimensional look.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbctrls" class="TPaintControl">Ctl3DButton</property> is provided for backward compatibility. It has no effect on 32-bit Windows and NT 4.0 and later. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbctrls" class="TPaintControl">Ctl3DButton</property> controlled whether the data-aware control had beveled borders, and required Ctl3d32.dll to be installed in the System 32 directory.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Handle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides access to paint control's window handle.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbctrls" class="TPaintControl">Handle</property> is the window handle of the <property namespace="dbctrls" class="TPaintControl">TPaintControl</property> instance. It represents a window with the classname supplied to the constructor of the <property namespace="dbctrls" class="TPaintControl">TPaintControl</property> object.  The characteristics of the window are determined by the Owner supplied to the constructor of the paint control object.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBEdit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBEdit</class> represents a single-line edit control that can display and edit a field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBEdit</class> to enable users to edit a database field. <class namespace="DBCtrls">TDBEdit</class> uses the Text property to represent the contents of the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBEdit</class> permits only a single line of text. If the field may contain lengthy data that would require multiple lines, consider using a TDBMemo object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the application does not require the data-aware capabilities of <class namespace="DBCtrls">TDBEdit</class>, use an edit control (TEdit) or a masked edit control (TMaskEdit) instead, to conserve system resources.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To provide a mask that restricts input and controls the display format of the data, use mask-related properties of TField and descendants. Such properties include: EditMask (TField), DisplayFormat (TDateTimeField), and DisplayFormat (TNumericField). Which property you should use depends on the field's type and the TField descendant that corresponds to that type.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.EditCanModify">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Allows or disallows editing of the text depending on whether the dataset is in edit mode.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBEdit">EditCanModify</method> overrides the inherited method so that the control will only allow edits when the dataset is in edit mode. If the edit control should never allow edits, the ReadOnly property should be set.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">
                           
                     <method namespace="DBCtrls" class="TDBEdit">EditCanModify</method> is a protected method. Applications cannot call it directly.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBEdit">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBEdit">ExecuteAction</method> returns true if the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBEdit">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBEdit">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UseRightToLeftAlignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Specifies whether the control's alignment is in a right-to-left mode.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Call <method namespace="DBCtrls" class="TDBEdit">UseRightToLeftAlignment</method> to determine whether the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method>'s alignment is in a right-to-left mode. This information can be used when painting the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> data or when responding to mouse events.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBEdit">UseRightToLeftAlignment</method> returns true for middle east locales if the BiDiMode property is bdRightToLeft. Otherwise, it returns false.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBEdit">Create</method>s an instance of <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBEdit">Create</method> to create a <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> object at runtime. <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> objects placed on a form at design time are created automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBEdit">Create</method> overrides the inherited constructor  to initialize the database handling capabilities of the edit control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component, typically the form, that is responsible for freeing the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> instance. It becomes the value of the Owner property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Change">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Responds when the text is modified.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Applications cannot call this protected method directly: It is triggered automatically by Windows' events. </condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBEdit">Change</method> responds to changes in the text by internally keeping track of the fact that the text has been modified. This information can then be used to know whether there are any changes to post to the dataset or to remove if the user requests a reset.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Additionally, <method namespace="DBCtrls" class="TDBEdit">Change</method> calls the inherited method, which generates an On<method namespace="DBCtrls" class="TDBEdit">Change</method> event.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyDown">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Supplements the inherited method to drive the dataset into edit mode when the user presses Del or Shift+Insert.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBEdit">KeyDown</method> first calls the inherited method, which calls the On<method namespace="DBCtrls" class="TDBEdit">KeyDown</method> event handler. <method namespace="DBCtrls" class="TDBEdit">KeyDown</method> next attempts to put the dataset into an editing state when the user types Del or Shift+Insert. Derived classes can override <method namespace="DBCtrls" class="TDBEdit">KeyDown</method> to handle additional key combinations, but the inherited method should always be called.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">
                           
                     <method namespace="DBCtrls" class="TDBEdit">KeyDown</method> is a protected method. Applications cannot call it directly. It is called automatically in response to user actions.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyPress">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Supplements the inherited method to handle any keystrokes that alter the state of the edit control.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBEdit">KeyPress</method> first calls the inherited method, which calls the On<method namespace="DBCtrls" class="TDBEdit">KeyPress</method> event handler. Next, <method namespace="DBCtrls" class="TDBEdit">KeyPress</method> discards the keystroke if it is not a valid character for the field type, or if there is no link to a database field. Valid characters cause <method namespace="DBCtrls" class="TDBEdit">KeyPress</method> to attempt to put the dataset into edit mode.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Pressing the Escape key causes <method namespace="DBCtrls" class="TDBEdit">KeyPress</method> to call Reset, throwing away all unposted edits.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">
                           
                     <method namespace="DBCtrls" class="TDBEdit">KeyPress</method> is a protected method. Applications cannot call it directly. It is called automatically in response to user actions.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Notification">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Overrides the inherited method to respond to opRemove notifications on the DataSource.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">After calling the inherited method, <method namespace="DBCtrls" class="TDBEdit">Notification</method> checks whether the notification indicates the removal of the DataSource. If so, <method namespace="DBCtrls" class="TDBEdit">Notification</method> sets the DataSource property to nil (Delphi) or NULL (C++). </condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Derived classes can override <method namespace="DBCtrls" class="TDBEdit">Notification</method> method to handle additional notifications, but the inherited method should be always be called.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">
                           
                     <method namespace="DBCtrls" class="TDBEdit">Notification</method> is a protected method. Applications can't call it directly. </condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Reset">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Cancels all unposted edits.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBEdit">Reset</method> overrides the default method to cancel all unposted edits to the dataset when the user presses the Escape key.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">
                           
                     <method namespace="DBCtrls" class="TDBEdit">Reset</method> is a protected method. Applications cannot call it directly. It is called automatically when the user presses the Escape key.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBEdit">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBEdit">Destroy</method> directly in an application. Instead, call Free. Free checks that the <method namespace="DBCtrls" class="TDBEdit">TDBEdit</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBEdit">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBEdit">Destroy</method> overrides the inherited destructor to free the helper objects that were allocated to manage display issues and database interactions.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the T<property namespace="DBCtrls" class="TDBEdit">Field</property> object for the database field the edit box represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TDBEdit">Field</property> to get direct access to the contents and properties of the database field without going through the edit window. Use <property namespace="DBCtrls" class="TDBEdit">Field</property> to change the contents of the database field programmatically:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBEdit1.Field.AsString := 'San Francisco Baking';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBEdit1-&gt;Field-&gt;AsString = "San Francisco Baking";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the Text property instead if you want to change the contents of the edit window without immediately posting the changes to the dataset. Changing the Text property allows the user to cancel the changes.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field from which the edit control displays data. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBEdit">DataField</property> to the field name of the field component that the check box represents:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBEdit1.DataField := 'Company';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBEdit1-&gt;DataField = "Company";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access by the <property namespace="DBCtrls" class="TDBEdit">TDBEdit</property> to the dataset in which the field is located is provided by a TDataSource component, specified in the DataSource property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the <property namespace="DBCtrls" class="TDBEdit">DataField</property> refers to a database field that contains integer or floating-point data, only characters that are valid in such a field can be entered in the edit box. Characters that are not legal are not accepted.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the edit control to the dataset that contains the field it represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBEdit">DataSource</property> to specify the data source component through which the data from a dataset component is provided to the <property namespace="DBCtrls" class="TDBEdit">TDBEdit</property>:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBEdit1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBEdit1-&gt;DataSource = DataSource1;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To allow the check box to represent the data for a field, both the <property namespace="DBCtrls" class="TDBEdit">DataSource</property> and the DataField properties must be set.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the user can use the database edit box to change the value of the field in the current record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBEdit">ReadOnly</property> to true to prevent the user from changing the contents of the database field. When <property namespace="DBCtrls" class="TDBEdit">ReadOnly</property> is true, the edit control is used only to display the contents of the field. If <property namespace="DBCtrls" class="TDBEdit">ReadOnly</property> is false, the user can change the field's value as long as the dataset is in edit mode.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBText">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBText</class> represents a data-aware control that displays the value of a field on a form.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBText</class> to display the contents of a field in the current record of a dataset on a form. Field values displayed by database text controls cannot be modified by the user using the text control. To allow the user to edit the field value, use TDBEdit or TDBMemo instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the application does not require the data-aware capabilities of <class namespace="DBCtrls">TDBText</class>, use the label component (TLabel) <condition os="Windows">or the static text component (TStaticText) </condition>instead to conserve system resources.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBText">TDBText</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBText">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBText">TDBText</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBText">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBText">TDBText</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBText">TDBText</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBText">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBText">TDBText</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBText">TDBText</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBText">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UseRightToLeftAlignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Specifies whether the control's alignment is in a right-to-left mode.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Call <method namespace="DBCtrls" class="TDBText">UseRightToLeftAlignment</method> to determine whether the <method namespace="DBCtrls" class="TDBText">TDBText</method>'s alignment is in a right-to-left mode. This information can be used when painting the <method namespace="DBCtrls" class="TDBText">TDBText</method>.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBText">UseRightToLeftAlignment</method> returns true for middle east locales if the BiDiMode property is bdRightToLeft. Otherwise, it returns false.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBText">Create</method>s an instance of <method namespace="DBCtrls" class="TDBText">TDBText</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBText">Create</method> to instantiate a <method namespace="DBCtrls" class="TDBText">TDBText</method> object at runtime. For <method namespace="DBCtrls" class="TDBText">TDBText</method> objects placed on forms or data modules at design time, <method namespace="DBCtrls" class="TDBText">Create</method> is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The AOwner parameter specifies the Owner for the <method namespace="DBCtrls" class="TDBText">TDBText</method> control. The Owner is responsible for freeing the control. Typically, this is a form.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBText">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBText">TDBText</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBText">Destroy</method> directly in an application. Instead, call Free. Free checks that the <method namespace="DBCtrls" class="TDBText">TDBText</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBText">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBText">Destroy</method> frees the helper objects of the <method namespace="DBCtrls" class="TDBText">TDBText</method> before calling the inherited destructor.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the T<property namespace="DBCtrls" class="TDBText">Field</property> object for the database field the database text control represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DBCtrls" class="TDBText">Field</property> object to change the value of the data in the field programmatically.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBText1.Field.AsString := 'Santa Cruz Wharf';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBText1-&gt;Field-&gt;AsString = "Santa Cruz Wharf";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.AutoSize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the database text control automatically resizes to the width and length of the current string.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBText">AutoSize</property> to make the database text control adjust its size automatically so the client area accommodates the height and width of the field value. When <property namespace="DBCtrls" class="TDBText">AutoSize</property> is false (the default), the control is fixed in size. When <property namespace="DBCtrls" class="TDBText">AutoSize</property> is true, the size of the control is readjusted whenever its caption changes. The size of the control is also readjusted when the Font property changes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When WordWrap is true, the width of the database text control is fixed. If <property namespace="DBCtrls" class="TDBText">AutoSize</property> is also true, changes to the field value cause the control to change in height. When <property namespace="DBCtrls" class="TDBText">AutoSize</property> is true and WordWrap is false, the height of the control is determined by the font, and changes to the field value cause the control to change in width.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field whose value is displayed by the database text control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBText">DataField</property> to bind the database text control to a field in the dataset. To fully specify a database field, both the dataset and the field within that dataset must be defined. The DataSource property of the control specifies the dataset that contains the <property namespace="DBCtrls" class="TDBText">DataField</property>.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBText1.DataField := 'Company';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBText1-&gt;DataField = "Company";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the text control to the dataset that contains the field it represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBText">DataSource</property> to link the database text control to a dataset in which the data can be found. To fully specify a database field for the control, both the dataset and a field within that dataset must be defined. Use the DataField property to specify the particular field within the dataset.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBText1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBText1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBCheckBox">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBCheckBox</class> is a data-aware control that allows the user to select or deselect a single value. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBCheckBox</class> to place a data-aware check box on a form. A check box presents an option to the user; the user can check it to select the option or uncheck it to deselect the option. A database check box (<class namespace="DBCtrls">TDBCheckBox</class>) is much like an ordinary check box (TCheckBox), except that it is aware of the data in a particular field of a dataset. Because check boxes can represent only two values (checked and unchecked), database check boxes are most appropriate for boolean fields. They can, however, be used to group the values of any field into two sets.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For applications that don't require the data-aware capabilities of <class namespace="DBCtrls">TDBCheckBox</class>, use TCheckBox instead to conserve system resources.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBCheckBox">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBCheckBox">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBCheckBox">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBCheckBox">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBCheckBox">Create</method>s an instance of <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBCheckBox">Create</method> to instantiate a <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> object at runtime. For <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> objects placed on forms or data modules at design time, <method namespace="DBCtrls" class="TDBCheckBox">Create</method> is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pass a single Component as a parameter to provide the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> object with an Owner that is responsible for freeing it.After calling the inherited constructor to allocate and initialize a generic check box, <method namespace="DBCtrls" class="TDBCheckBox">Create</method>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds csReplicatable to ControlStyle.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBCheckBox">Create</method>s and initializes the helper objects needed to link to a dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBCheckBox">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBCheckBox">Destroy</method> directly in an application. Instead, call Free. Free verifies that the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBCheckBox">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBCheckBox">Destroy</method> frees the helper objects of the <method namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</method> before calling the inherited destructor.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the T<property namespace="DBCtrls" class="TDBCheckBox">Field</property> object whose current value the check box represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the T<property namespace="DBCtrls" class="TDBCheckBox">Field</property> reference provided by the <property namespace="DBCtrls" class="TDBCheckBox">Field</property> property when you want to change the value of the data in the field programmatically.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBCheckBox1.Field.AsBoolean := True;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBCheckBox1-&gt;Field-&gt;AsBoolean = true;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field from which the data-aware control displays data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBCheckBox">DataField</property> to the field name of the field component that the check box represents. Access by the <property namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</property> to the dataset in which the field is located is provided by a TDataSource component, specified in the DataSource property.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBCheckBox1.DataField := 'HasPaid';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBCheckBox1-&gt;DataField = "HasPaid";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the check box to a dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specify the data source component through which the data from a dataset component is provided to the <property namespace="DBCtrls" class="TDBCheckBox">TDBCheckBox</property>. To allow the check box to represent the data for a field, both the <property namespace="DBCtrls" class="TDBCheckBox">DataSource</property> and the DataField properties must be set.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBCheckBox1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBCheckBox1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the user can change the value of the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBCheckBox">ReadOnly</property> to specify whether the check box allows the user to change the field value by checking or unchecking the box. When <property namespace="DBCtrls" class="TDBCheckBox">ReadOnly</property> is true, the check box can only be used to display the value of the field on the current record. When <property namespace="DBCtrls" class="TDBCheckBox">ReadOnly</property> is false, the user can use the check box to change the field value.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ValueChecked">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field value that corresponds to the checked state of the check box. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property> to specify the field value represented by the check box when it is checked. If the value of the <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property> property is equal to the data in the field of the current record of the dataset, the database check box appears checked. When the user checks the database check box, the field value is set to <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property> can represent more than one value in a semicolon-delimited list of items. If any of the items matches the contents of the field of the current record in the dataset, the check box appears checked. For example, set the value of <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property> string like this:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBCheckBox1.ValueChecked := 'True;Yes;On';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBCheckBox1-&gt;ValueChecked = "True;Yes;On";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the contents of the associated field is the string true, Yes, or On, the check box is checked. The value of the field is compared to <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property> in a case-insensitive comparison. If the user selects a check box where <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property> represents more than one value, the first item in the list is assigned to the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the contents of the field of the current record matches a string specified as the value of the ValueUnchecked property, the check box appears unchecked. If the contents of the field matches no string in either <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property> or ValueUnchecked, the check box appears gray.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the DataField of the database check box is a logical field, the check box is always checked if the contents of the field is true, and it is always unchecked if the contents of the field is false. The values of the <property namespace="DBCtrls" class="TDBCheckBox">ValueChecked</property> and ValueUnchecked properties have no affect on logical fields.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ValueUnchecked">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field value that corresponds to the unchecked state of the check box. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property> to specify the field value represented by the check box when it is unchecked. If the value of the <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property> property is equal to the data in the field of the current record of the dataset, the database check box appears unchecked. When the user unchecks the database check box, the field value is set to <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property> can represent more than one value in a semicolon-delimited list of items. If any of the items matches the contents of the field of the current record in the dataset, the check box appears unchecked. For example, set the value of <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property> string like this:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBCheckBox1.ValueUnchecked := 'False;No;Off';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBCheckBox1-&gt;ValueUnchecked = "False;No;Off";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the contents of the associated field is the string false, No, or Off, the check box appears unchecked. The value of the field is compared to <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property> in a case-insensitive comparison. If the user unchecks a check box where <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property> represents more than one value, the first item in the list is assigned to the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the contents of the field of the current record matches a string specified as the value of the ValueChecked property, the check box appears checked. If the contents of the field matches no string in either ValueChecked or <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property>, the check box appears gray.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the DataField of the database check box is a logical field, the check box is always unchecked if the contents of the field is false, and it is always checked if the contents of the field is true. The values of the ValueChecked and <property namespace="DBCtrls" class="TDBCheckBox">ValueUnchecked</property> properties have no affect on logical fields.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBComboBox">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBComboBox</class> represents a data-aware combo box control. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBComboBox</class> to allow users to change the value of a field on the current record in a dataset either by selecting an item from a list or by typing in the edit box part of the control. The selected item or entered text becomes the new value of the field if the database combo box's ReadOnly property is false. The combo box can be customized to enable or disable typing in the edit region of the control<condition os="Windows">, to display the list as a drop down or as a permanently displayed list, to sort the items in the list, and so on</condition>.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBComboBox">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBComboBox">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBComboBox">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBComboBox">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBComboBox">Create</method>s an instance of <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBComboBox">Create</method> to instantiate a <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method> object at runtime. For <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method> objects placed on forms at design time, <method namespace="DBCtrls" class="TDBComboBox">Create</method> is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component, typically the form, that is responsible for freeing the combo box. It becomes the value of the Owner property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBComboBox">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBComboBox">Destroy</method> directly in an application. Instead, call Free. Free verifies that the <method namespace="DBCtrls" class="TDBComboBox">TDBComboBox</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBComboBox">Destroy</method>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the T<property namespace="DBCtrls" class="TDBComboBox">Field</property> object whose current value the combo box represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the T<property namespace="DBCtrls" class="TDBComboBox">Field</property> reference provided by the <property namespace="DBCtrls" class="TDBComboBox">Field</property> property when you want to change the value of the data in the field programmatically.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBComboBox1.Field.AsString := 'Brazil';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBComboBox1-&gt;Field-&gt;AsString = "Brazil";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Text">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Linux">Specifies the value in the edit portion of the combo box.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Linux">Use <property namespace="DBCtrls" class="TDBComboBox">Text</property> to supply read a field value from the combo box or assign a value to the field that the combo box represents. If the combo box has the style csDropDownList, then the value of <property namespace="DBCtrls" class="TDBComboBox">Text</property> is the same as the item in the drop-down list identified by the ItemIndex property. For other styles of combo boxes, the value of <property namespace="DBCtrls" class="TDBComboBox">Text</property> can be a value that is not included in the drop-down list.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Style">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines how the combo box displays its items.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBComboBox">Style</property> to specify whether the user can type values into the edit region as well as select values from the list, <condition os="Windows">whether the list drops down when the user clicks a button or if it is always displayed, </condition>whether the list is owner-drawn, and so on. By default, <property namespace="DBCtrls" class="TDBComboBox">Style</property> is csDropDown, meaning that the combo box displays each item as a string in a drop-down list, and that users can edit the value in the edit region. <property namespace="DBCtrls" class="TDBComboBox">Style</property> can be any of the values: csDropDown, <condition os="Windows">csSimple,</condition> csDropDownList, csOwnerDrawFixed, and csOwnerDrawVariable.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Owner-draw combo boxes can display items other than strings. For example, a combo box could display graphical images along with or instead of its strings. Owner-draw combo boxes require more programming, however, as the application must render the image for each item in the list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBCtrls" class="TDBComboBox">Style</property> is csOwnerDrawFixed or csOwnerDrawVariable, the OnDrawItem event occurs when the list items need to be drawn. If <property namespace="DBCtrls" class="TDBComboBox">Style</property> is csOwnerDrawVariable, an OnMeasureItem event occurs as well.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field from which the combo box displays data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBComboBox">DataField</property> to specify which field is represented by the combo box. (Note that this is does not refer to the source of the list, but to the field into which the selected value is inserted. The list values must be supplied manually using the Items property.) The combo box displays the current value of this field, and allows the user to set the value of this field on the current record. The dataset the field is located in is specified by the DataSource property.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBComboBox1.DataField := 'CountryName';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBComboBox1-&gt;DataField = "CountryName";</codeBlock>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>For a data-aware combo box component, where the list values are automatically supplied, use a TDBLookupComboBox instead.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the combo box to a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specify the data source component that identifies the dataset in which the target field is found. To allow the combo box to represent the data for a field, both the <property namespace="DBCtrls" class="TDBComboBox">DataSource</property> and the DataField properties must be set.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBComboBox1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBComboBox1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the strings that appear in the list of the database combo box.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBComboBox">Items</property> to supply the values in the list from which the user can choose. Because <property namespace="DBCtrls" class="TDBComboBox">Items</property> is an object of type TStrings, you can add, delete, insert, and move items using the Add, Delete, Insert, Exchange, and Move methods of the TStrings object. For example, to add each string to the combo box list, write code such as the following:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">while not CountryTbl.Eof do begin</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  DBComboBox1.Items.Add(CountryTbl.FieldByName('Country').AsString);
  CountryTbl.Next;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">end;</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">while (!CountryTbl-&gt;Eof)</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">{
  DBComboBox1-&gt;Items-&gt;Add(CountryTbl-&gt;FieldByName("Country")-&gt;AsString);
  CountryTbl-&gt;Next();
}</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ItemIndex property determines which item is selected, if any.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines if the user can change the value of the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBComboBox">ReadOnly</property> to specify whether the combo box should be used for display purposes only. If <property namespace="DBCtrls" class="TDBComboBox">ReadOnly</property> is true, the combo box can only be used to display the value of the field on the current record. If <property namespace="DBCtrls" class="TDBComboBox">ReadOnly</property> is false, the user can use the combo box to edit the field's value.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBListBox">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBListBox</class> represents a data-aware list box that allows users to change field values by selecting an item from a list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBListBox</class> to add a list box to a form that permits users to change the value of a field on the current record to one of a fixed set of choices.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the application doesn't require the data-aware capabilities of <class namespace="DBCtrls">TDBListBox</class>, use a list box (TListBox) instead to conserve system resources.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Component writers wanting to create a customized list box objects should use TCustomListBox as a base class.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBListBox">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBListBox">ExecuteAction</method> returns true if the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBListBox">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBListBox">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBListBox">Create</method>s and initializes an instance of <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBListBox">Create</method> to instantiate a <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> object at runtime. For <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> objects placed on forms or data modules at design time, <method namespace="DBCtrls" class="TDBListBox">Create</method> is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component, typically the form, that is responsible for freeing the <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> instance. It becomes the value of the Owner property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBListBox">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBListBox">Destroy</method> directly in an application. Instead, call Free. Free checks that the <method namespace="DBCtrls" class="TDBListBox">TDBListBox</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBListBox">Destroy</method>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the T<property namespace="DBCtrls" class="TDBListBox">Field</property> object the listbox is linked to.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DBCtrls" class="TDBListBox">Field</property> object when you want to change the value of the data in the field programmatically.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBListBox1.Field.AsString := 'Lithuania';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBListBox1-&gt;Field-&gt;AsString = "Lithuania";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field whose value is displayed by the listbox.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBListBox">DataField</property> to specify which field is represented by the listbox. The listbox displays the current value of this field, and lets the user set its value on the current record. The dataset in which the field is located is specified by the DataSource property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBListBox">DataField</property> to specify which field is represented by the listbox. (Note that this is does not refer to the source of the list, but to the field into which the selected value is inserted. The list values must be supplied manually using the Items property.) The listbox displays the current value of this field as the selected (highlighted) item, and allows the user to set the value of this field on the current record by selecting a value from the list. The dataset the field is located in is specified by the DataSource property.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBListBox1.DataField := 'CountryName';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBListBox1-&gt;DataField = "CountryName";</codeBlock>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>For a data-aware listbox component for which the list values are automatically supplied, use a TDBLookupListBox instead.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the listbox to a dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specify the data source component that identifies the dataset the data is found in. To allow the listbox to represent the data for a field, both the <property namespace="DBCtrls" class="TDBListBox">DataSource</property> and the DataField properties must be set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specify the data source component that identifies the dataset in which the target field is found. To allow the listbox to represent the data for a field, both the <property namespace="DBCtrls" class="TDBListBox">DataSource</property> and the DataField properties must be set.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBListBox1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBListBox1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the strings that appear in the list box.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBListBox">Items</property> to specify the values the user can choose from. Because <property namespace="DBCtrls" class="TDBListBox">Items</property> is an object of type TStrings, you can add, delete, insert, and move items using the Add, Delete, Insert, Exchange, and Move methods of the TStrings object. For example, to add each string to the listbox, write code such as the following:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">while not CountryTbl.Eof do begin
  DBListBox1.Items.Add(CountryTbl.FieldByName('Country').AsString);
  CountryTbl.Next;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBListBox1-&gt;Items-&gt;Add("AFieldValue");</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The ItemIndex property determines which item is selected, if any.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines if the user can change the field value using the listbox.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBListBox">ReadOnly</property> to specify whether the listbox should be used for display purposes only. If <property namespace="DBCtrls" class="TDBListBox">ReadOnly</property> is true, the listbox can only be used to display the value of the field on the current record. If <property namespace="DBCtrls" class="TDBListBox">ReadOnly</property> is false, the user can use the listbox to change the field's value to one of the values in the Items list.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBRadioGroup">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBRadioGroup</class> represents a group of radio buttons connected to a database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBRadioGroup</class> to group a set of data-aware radio buttons. Radio buttons that are contained directly in the same control component are said to be "grouped"; when a radio button is checked, all other radio buttons in its group become unchecked. Database radio groups provide an easy way to ensure that the user enters one (or at most one) of the options presented for a field. They are also useful for displaying data from fields that have only a few possible values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To add radio buttons to a <class namespace="DBCtrls">TDBRadioGroup</class>, edit the Items property in the Object Inspector. Each string in Items makes a radio button appear in the group box with the string as its caption. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the user selects a radio button, the "value" of the selected button becomes the contents of the linked field for the current record in the dataset. Specify values for the buttons by editing the Values property in the Object Inspector; the first string in Values corresponds to the first string in Items, and so forth. If no Values strings are set, each button's caption serves as its value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRadioGroup">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBRadioGroup">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRadioGroup">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBRadioGroup">UpdateAction</method> returns true if the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UseRightToLeftAlignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Specifies whether the control's alignment is in a right-to-left mode.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Call <method namespace="DBCtrls" class="TDBRadioGroup">UseRightToLeftAlignment</method> to determine whether the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method>'s alignment is in a right-to-left mode. This information can be used when painting the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> data or when responding to mouse events.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBRadioGroup">UseRightToLeftAlignment</method> returns true for Middle East locales if the BiDiMode property is bdRightToLeft. Otherwise, it returns false.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRadioGroup">Create</method>s and initializes a <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> instance.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBRadioGroup">Create</method> to instantiate a <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> object at runtime. For radio groups placed on forms at design time, <method namespace="DBCtrls" class="TDBRadioGroup">Create</method> is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pass a single Component as a parameter to provide the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> object with an Owner that is responsible for freeing it. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRadioGroup">Create</method> calls the inherited constructor method, then initializes internal objects and variables used to control data access.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRadioGroup">Destroy</method>s the <method namespace="DBCtrls" class="TDBRadioGroup">TDBRadioGroup</method> instance and the radio buttons it contains.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRadioGroup">Destroy</method> frees internally created objects that control data access, then calls the inherited destructor method.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the T<property namespace="DBCtrls" class="TDBRadioGroup">Field</property> component to which the radio group is linked.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBRadioGroup">Field</property> holds the T<property namespace="DBCtrls" class="TDBRadioGroup">Field</property> object that the linked dataset component creates to access the database.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBRadioGroup1.Field.AsString := 'Yes';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBRadioGroup1-&gt;Field-&gt;AsString = "Yes";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Holds the content of the linked field for the current record in the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBRadioGroup">Value</property> holds the content of the linked field for the current record. If the user selects a different radio button, the <property namespace="DBCtrls" class="TDBRadioGroup">Value</property> property changes.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field from which the radio group displays data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBRadioGroup">DataField</property> to specify the name of the database field that the radio group represents.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBRadioGroup1.DataField := 'PaymentMethod';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBRadioGroup1-&gt;DataField = "PaymentMethod";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines where the database radio group obtains the data to display.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBRadioGroup">DataSource</property> holds a T<property namespace="DBCtrls" class="TDBRadioGroup">DataSource</property> object that points to a dataset component. The dataset component should be linked to the database you want to access.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBRadioGroup1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBRadioGroup1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the radio buttons in the radio group.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBRadioGroup">Items</property> holds a TStrings object that lists the captions of the radio buttons in the group. (To add or remove radio buttons, edit the <property namespace="DBCtrls" class="TDBRadioGroup">Items</property> list from the Object Inspector. These captions become the "values" of the radio buttons, unless you override them in the Values property; when a button is selected, its value becomes the content of the linked field for the current record in the database.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the user can select a different radio button in the group, and hence modify the data in the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBRadioGroup">ReadOnly</property> is true, the radio group displays data from the current record, but cannot be used to change the contents of the field. The default is false.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Values">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines the values of the radio buttons.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the user selects a radio button, the "value" of that button is written to the linked field in the database. By default, the value of a button is simply the caption that appears next to it on the screen, as determined by the Items property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In some cases, you may want the values of the radio buttons to differ from their captions. For example, if you use radio buttons to represent a database field whose content can be "Y" or "N", you may want the buttons' captions to be "Yes" and "No". In this case, you would enter "Yes" and "No" in the Items list, and enter "Y" and "N" in the <property namespace="DBCtrls" class="TDBRadioGroup">Values</property> list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">You can edit the <property namespace="DBCtrls" class="TDBRadioGroup">Values</property> list in the Object Inspector, just as you would the Items list. To keep the buttons' captions as their values, leave the <property namespace="DBCtrls" class="TDBRadioGroup">Values</property> property empty.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.OnChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the user changes the data in the linked field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <event namespace="DBCtrls" class="TDBRadioGroup">OnChange</event> event occurs when a change is made to the contents of the database field accessed by the radio group. Use an <event namespace="DBCtrls" class="TDBRadioGroup">OnChange</event> event handler to implement any special processing that should be executed when the radio group is updated.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBMemo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBMemo</class> represents a multiline edit control that can display and edit a field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBMemo</class> to let users edit a field that may contain lengthy textual data or to simply display the contents of such a field. <class namespace="DBCtrls">TDBMemo</class> uses the Text property to represent the contents of the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBMemo</class> permits multiple lines of text. Thus, <class namespace="DBCtrls">TDBMemo</class> is appropriate for long alphanumeric fields or text binary large objects (BLOBs). For short alphanumeric fields, consider using a TDBEdit component instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the application doesn't require the data-aware capabilities of <class namespace="DBCtrls">TDBMemo</class>, use a memo control (TMemo) instead, to conserve system resources.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBMemo">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBMemo">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBMemo">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBMemo">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBMemo">Create</method>s an instance of <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBMemo">Create</method> to create and initialize an instance of <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method>. <method namespace="DBCtrls" class="TDBMemo">Create</method> overrides the inherited constructor to initialize the data handling aspects of a <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component, typically the form, that is responsible for freeing the DB memo instance. It becomes the value of the Owner property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Change">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Informs the data source of changes to the value of the text, before invoking the On<method namespace="DBCtrls" class="TDBMemo">Change</method> event handler.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Applications do not call the <method namespace="DBCtrls" class="TDBMemo">Change</method> method directly: it is triggered automatically by Windows events. Derived classes can override the <method namespace="DBCtrls" class="TDBMemo">Change</method> method to make additional responses to changes in the Text property. Any class that overrides the <method namespace="DBCtrls" class="TDBMemo">Change</method> method should call the inherited method as well.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyDown">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Overrides the inherited method to put the dataset in an editing state if the user types Del or Shift+Insert.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBMemo">KeyDown</method> first calls the inherited method, which calls the On<method namespace="DBCtrls" class="TDBMemo">KeyDown</method> event handler. <method namespace="DBCtrls" class="TDBMemo">KeyDown</method> next attempts to put the dataset into an editing state when the user types Del or Shift+Insert. If the memo control is not linked to a dataset, <method namespace="DBCtrls" class="TDBMemo">KeyDown</method> discards the keystroke. Derived classes can override <method namespace="DBCtrls" class="TDBMemo">KeyDown</method> to handle additional key combinations, but the inherited method should always be called.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyPress">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBMemo">KeyPress</method> overrides the inherited method to handle any keystrokes that alter the state of the edit control.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBMemo">KeyPress</method> first calls the inherited method, which calls the On<method namespace="DBCtrls" class="TDBMemo">KeyPress</method> event handler. Next, <method namespace="DBCtrls" class="TDBMemo">KeyPress</method> checks the value of the key, and throws it away if it is not a valid character for the field type, or if there is no link to a database field. Valid characters cause <method namespace="DBCtrls" class="TDBMemo">KeyPress</method> to attempt to put the dataset into edit mode.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">If the field for the memo control is a text BLOB, pressing the Pause key causes <method namespace="DBCtrls" class="TDBMemo">KeyPress</method> to call the LoadMemo method. Pressing the Escape key causes <method namespace="DBCtrls" class="TDBMemo">KeyPress</method> to throw away unposted edits.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Notification">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Overrides the inherited method to respond to opRemove notifications on the DataSource.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">After calling the inherited method, <method namespace="DBCtrls" class="TDBMemo">Notification</method> checks whether the notification indicates the removal of the DataSource. If so, <method namespace="DBCtrls" class="TDBMemo">Notification</method> sets the DataSource property to nil (Delphi) or NULL (C++). </condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Derived classes can override <method namespace="DBCtrls" class="TDBMemo">Notification</method> method to handle additional notifications, but the inherited method should be always be called.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.WndProc">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Provides specific message responses for the memo control.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBMemo">WndProc</method> overrides the <method namespace="DBCtrls" class="TDBMemo">WndProc</method> for TWinControl to handle window messages that are specific to painting a <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method> control, and sends all others to the inherited <method namespace="DBCtrls" class="TDBMemo">WndProc</method>.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Derived classes that override <method namespace="DBCtrls" class="TDBMemo">WndProc</method> to provide specialized responses to messages should call the inherited <method namespace="DBCtrls" class="TDBMemo">WndProc</method> at the end to dispatch any other messages.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.LoadMemo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBMemo">LoadMemo</method> loads the text BLOB from the field in the database into the memo control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBMemo">LoadMemo</method> allows an application to control when the memo control displays the actual contents of a text BLOB field. Use <method namespace="DBCtrls" class="TDBMemo">LoadMemo</method> to update the text in the memo control to the value of the field in the current record. <method namespace="DBCtrls" class="TDBMemo">LoadMemo</method> only works with text BLOB fields, when the AutoDisplay property is false, so that the value of the field is not loaded automatically. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBMemo">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBMemo">Destroy</method> directly in an application. Instead, call Free. Free checks that the <method namespace="DBCtrls" class="TDBMemo">TDBMemo</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBMemo">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBMemo">Destroy</method> frees up the memory associated with data handling that was allocated in the constructor, before calling the inherited destructor.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the T<property namespace="DBCtrls" class="TDBMemo">Field</property> component the database memo is linked to. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TDBMemo">Field</property> to get direct access to the contents and properties of the database field without going through the edit window. Use <property namespace="DBCtrls" class="TDBMemo">Field</property> to change the contents of the database field programmatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the Text property instead to change the contents of the memo control without immediately writing the changes to the record in the dataset. Changing the Text property allows the user to cancel the changes.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">(DBMemo1.Field as TMemoField).Assign(Memo1.Lines);</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.AutoDisplay">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether to automatically display the contents of a memo or graphic BLOB in a database memo.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBMemo">AutoDisplay</property> is true, the control automatically displays new data when the underlying BLOB field changes (such as when moving to a new record).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBMemo">AutoDisplay</property> is false, the control shows only the field name whenever the underlying BLOB field changes. To display the data, the user can double-click on the control or select it and press Enter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">The effect of <property namespace="DBCtrls" class="TDBMemo">AutoDisplay</property> is not purely cosmetic. The data shown by the <property namespace="DBCtrls" class="TDBMemo">TDBMemo</property> is the value of the Text property. When <property namespace="DBCtrls" class="TDBMemo">AutoDisplay</property> is false, if the data changes, the value of the Text property changes to the name of the field. Thus, if <property namespace="DBCtrls" class="TDBMemo">AutoDisplay</property> is false, applications should be cautious about using the value of the Text property to ascertain the value of the underlying field.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calling the LoadMemo method causes Text to update to the current value of the BLOB field. This change will also be reflected in the appearance of the control on screen.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Change the value of <property namespace="DBCtrls" class="TDBMemo">AutoDisplay</property> to false if the automatic loading of BLOB fields takes too long.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DBCtrls" class="TDBMemo">AutoDisplay</property> only applies to BLOB fields. If the control is bound to another type of text field, <property namespace="DBCtrls" class="TDBMemo">AutoDisplay</property> has no effect.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of the field for which the database memo displays data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBMemo">DataField</property> to link the memo control to a field in the dataset. Just setting <property namespace="DBCtrls" class="TDBMemo">DataField</property> by itself will not link the memo control to a database field. Additionally, the dataset which contains the field must be specified by setting the DataSource property.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBMemo1.DataField := 'Notes';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBMemo1-&gt;DataField = "Notes";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the memo control to the dataset that contains the field for which the memo control displays data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Link the memo control with a dataset by setting <property namespace="DBCtrls" class="TDBMemo">DataSource</property> to a data source component that identifies the desired dataset. Specify which field in the dataset contains the memo data using the DataField property.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBMemo1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBMemo1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the user can change the contents of the database memo. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBMemo">ReadOnly</property> is true, the user can't change the contents. If <property namespace="DBCtrls" class="TDBMemo">ReadOnly</property> is false, the user can modify the contents.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBCtrls" class="TDBMemo">ReadOnly</property> property determines whether the user can use the database memo to change the value of the field of the current record, or if the control only displays the value. If <property namespace="DBCtrls" class="TDBMemo">ReadOnly</property> is false, the user can change the field's value as long as the dataset is in edit mode.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBImage">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBImage</class> represents a graphic image from a BLOB (binary large object) field of the current record of a dataset.<condition language="CBuilder"/>
            
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBImage</class> to represent the value of graphic fields. <class namespace="DBCtrls">TDBImage</class> allows a form to display graphical data from a dataset. <class namespace="DBCtrls">TDBImage</class> can allow the user to edit graphical data using the clipboard. While the application is running and the database image control has focus, users can cut, copy, and paste using the standard <condition os="Windows">Windows </condition>accelerator keys<condition os="Windows"> (Ctrl+X, Ctrl+C, and Ctrl+V)</condition>. Users can return to the original state of the database image control by pressing Esc before moving to another record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the application doesn't require the data-aware capabilities of <class namespace="DBCtrls">TDBImage</class>, use an image control (TImage) instead to conserve system resources.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to actions that execute with the <method namespace="DBCtrls" class="TDBImage">TDBImage</method> as target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBImage">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBImage">TDBImage</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBImage">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBImage">TDBImage</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBImage">TDBImage</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBImage">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBImage">TDBImage</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBImage">TDBImage</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBImage">UpdateAction</method> returns true if the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBImage">Create</method>s and initializes an instance of <method namespace="DBCtrls" class="TDBImage">TDBImage</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBImage">Create</method> to instantiate a <method namespace="DBCtrls" class="TDBImage">TDBImage</method> object at runtime. For <method namespace="DBCtrls" class="TDBImage">TDBImage</method> objects placed on forms or data modules at design time, the constructor is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pass a single Component as a parameter to provide the TDBLookupComboBox object with an Owner that is responsible for freeing it.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.CopyToClipboard">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies the picture in the image control to the Clipboard.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBCtrls" class="TDBImage">CopyToClipboard</method> to put a copy of the graphic specified by the Picture property in the Clipboard.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.CutToClipboard">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes the image in the control and copies it to the Clipboard.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <method namespace="DBCtrls" class="TDBImage">CutToClipboard</method> method to delete the image in the control when copying it to the Clipboard. <method namespace="DBCtrls" class="TDBImage">CutToClipboard</method> gives the associated field a null value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.LoadPicture">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Loads the image stored in the field into the database image control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the value of the AutoDisplay property is false, the image of a database image control is not automatically loaded. If AutoDisplay is false, control when the image is loaded at runtime by calling <method namespace="DBCtrls" class="TDBImage">LoadPicture</method> when the image should appear in the control.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.PasteFromClipboard">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies the contents of the Clipboard to the control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBCtrls" class="TDBImage">PasteFromClipboard</method> to set the field value to an image stored in the Clipboard.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBImage">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBImage">TDBImage</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBImage">Destroy</method> directly in an application. Instead, call Free. Free checks that the <method namespace="DBCtrls" class="TDBImage">TDBImage</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBImage">Destroy</method>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the T<property namespace="DBCtrls" class="TDBImage">Field</property> component the database image is linked to.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TDBImage">Field</property> to get direct access to the contents and properties of the database field without going through the image control's window. Use <property namespace="DBCtrls" class="TDBImage">Field</property> to change the contents of the database field programmatically. Use the Picture property to set the value of the field and display it in the image control's window.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">(DBEdit1.Field as TBlobField).Assign(Image1.Picture.Bitmap);</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Picture">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the image that appears on the database image control. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TDBImage">Picture</property> to obtain the T<property namespace="DBCtrls" class="TDBImage">Picture</property> object that represents the value of the field. Set <property namespace="DBCtrls" class="TDBImage">Picture</property> to programmatically change the value of the graphic field. The property value is a T<property namespace="DBCtrls" class="TDBImage">Picture</property> object which can contain an icon, metafile, bitmap, or other graphic object.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Image1.Picture.Assign(DBImage1.Picture);</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.AutoDisplay">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether to automatically display the contents of a graphic BLOB in the database image control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBImage">AutoDisplay</property> is true (the default value), the image automatically displays new data when the underlying BLOB field changes (such as when moving to a new record).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBImage">AutoDisplay</property> is false, the image clears whenever the underlying BLOB field changes. To display the data, the user can double-click on the control or select it and press Enter. In addition, calling the LoadPicture method ensures that the control is showing data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Change the value of <property namespace="DBCtrls" class="TDBImage">AutoDisplay</property> to false if the automatic loading of BLOB fields seems to take too long.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.BorderStyle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the database image control has a border.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBImage">BorderStyle</property> to specify whether a single line border should be drawn around the database image control. </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Center">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the image is centered in the image control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the image does not fit perfectly within the image control, use <property namespace="DBCtrls" class="TDBImage">Center</property> to position the image. When <property namespace="DBCtrls" class="TDBImage">Center</property> is true, the image is centered in the control. When <property namespace="DBCtrls" class="TDBImage">Center</property> is false, the upper left corner of the image is positioned at the upper left corner of the control.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DBCtrls" class="TDBImage">Center</property> has no effect if the Stretch property is true.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field from which the database image displays data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBImage">DataField</property> to bind the image control to a field in the dataset. To fully specify a database field, both the dataset and the field within that dataset must be defined. The DataSource property of the image control specifies the dataset which contains the <property namespace="DBCtrls" class="TDBImage">DataField</property>. <property namespace="DBCtrls" class="TDBImage">DataField</property> should specify a graphic field.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBImage1.DataField := 'Portrait';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBImage1-&gt;DataField = "Portrait";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the image control to a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBImage">DataSource</property> to link the image control to a dataset in which the data can be found. To fully specify a database field for the image control, both the dataset and a field within that dataset must be defined. Use the DataField property to specify the particular field within the dataset.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBImage1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBImage1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the user can change the contents of the field using the image control. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBImage">ReadOnly</property> to true to prevent the user from changing the contents of the database field. When <property namespace="DBCtrls" class="TDBImage">ReadOnly</property> is true, the image control is used only to display the contents of the field. If <property namespace="DBCtrls" class="TDBImage">ReadOnly</property> is false, the user can change the field's value as long as the dataset is in edit mode.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.QuickDraw">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition status="hold">Specifies whether the image is displayed using a palette.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition status="hold">Syntax:</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition status="hold">Set <property namespace="DBCtrls" class="TDBImage">QuickDraw</property> to specify whether a customized palette should be used when displaying field values. If false, a palette is used, to provide the best possible image quality at the expense of additional processing time. If true, no special palette is used, which is faster, but results in poorer picture quality, especially with 256-color images on a 256-color video driver.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Stretch">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether bitmaps <condition os="Windows">and metafiles </condition>assume the size and shape of the database image.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBImage">Stretch</property> to true to cause the picture to assume the size and shape of the image control. When the image control resizes, the picture resizes also. <property namespace="DBCtrls" class="TDBImage">Stretch</property> resizes the height and width of the image independently. Thus, unlike a simple change in magnification, stretch can distort the image if the image control is not the same shape as the image.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TNavigateBtn">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TNavigateBtn</type> defines values identifying different possible buttons on a TDBNavigator object. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Each <type namespace="DRIntf">TNavigateBtn</type> value identifies a different button that can appear on a TDBNavigator object. The following table lists all the button types, their corresponding <type namespace="DRIntf">TNavigateBtn</type> values, and the action associated with each button:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ButtonValueAction</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Button</th>
                  
                  <th>Value</th>
                  
                  <th>Action</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>First</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbFirst</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Go to the first record</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Prior</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbPrior</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Go to the previous record</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Next</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbNext</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Go to the next record</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Last</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbLast</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Go to the last record</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Insert</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbInsert</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Insert a blank record</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Delete</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbDelete</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Delete the current record</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Edit</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbEdit</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Permit users to edit the current record</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Post</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbPost</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Post the current record</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Cancel</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbCancel</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Cancel the current edit</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Refresh</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>nbRefresh</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Refresh the data in the dataset</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TButtonSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TButtonSet</type> is a set of TNaviageBtn values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TButtonSet</type> represents a set of zero or more of the buttons that can appear on a TDBNavigator control.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBNavigator">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBNavigator</class> (the database navigator) is used to move through the data in a dataset and perform operations on the data, such as inserting a blank record or posting a record. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the database navigator on forms that contain data-aware controls, such as TDBGrid or TDBEdit. <class namespace="DBCtrls">TDBNavigator</class> lets the user control the dataset when editing or viewing the data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the user chooses one of the navigator buttons, the appropriate action occurs on the dataset to which the navigator is linked. For example, if the user clicks the Insert button, a blank record is inserted in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBNavigator</class> can show any or all of the following buttons:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Button</th>
                  
                  <th>Purpose</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>First</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Sets the current record to the first record in the dataset, disables the First and Prior buttons, and enables the Next and last buttons if they are disabled.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Prior</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Sets the current record to the previous record and enables the Last and Next buttons if they are disabled.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Next</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Sets the current record to the next record and enables the First and Prior buttons if they are disabled.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Last</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Sets the current record to the last record in the dataset, disables the Last and Next buttons, and enables the First and Prior buttons if they are disabled.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Insert</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Inserts a new record before the current record, and sets the dataset into Insert and Edit states.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Delete</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Deletes the current record and makes the next record the current record.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Edit</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Puts the dataset into Edit state so that the current record can be modified.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Post</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Writes changes in the current record to the database.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Cancel</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Cancels edits to the current record, restores the record display to its condition prior to editing, and turns off Insert and Edit states if they are active.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Refresh</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Refreshes the buffered data in the associated dataset. </para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBNavigator">Create</method>s an instance of <method namespace="DBCtrls" class="TDBNavigator">TDBNavigator</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBNavigator">Create</method> to instantiate <method namespace="DBCtrls" class="TDBNavigator">TDBNavigator</method> at runtime. For <method namespace="DBCtrls" class="TDBNavigator">TDBNavigator</method> objects placed on a form at design time, the constructor is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pass a single component as a parameter to provide the <method namespace="DBCtrls" class="TDBNavigator">TDBNavigator</method> object with an owner that is responsible for freeing it. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.SetBounds">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the database navigator's boundary properties all at once.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBNavigator">SetBounds</method> when to set more than one of the navigator's boundary properties at a time. The Left, Top, Width, and Height properties are set to the values passed in the ALeft, ATop, AWidth, and AHeight parameters, respectively. <method namespace="DBCtrls" class="TDBNavigator">SetBounds</method> arranges the buttons on the navigator to fit within the boundaries.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Although you can always set the individual boundaries, using <method namespace="DBCtrls" class="TDBNavigator">SetBounds</method> makes several changes at once without rearranging the buttons for each change.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.BtnClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Simulates a button click on the database navigator, invoking the action of the button. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBCtrls" class="TDBNavigator">BtnClick</method> when you want the application, not the user, to control the database navigator. Call <method namespace="DBCtrls" class="TDBNavigator">BtnClick</method>, specifying a TNavigateBtn type as the value of the Index parameter, to invoke the command associated with the selected button.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Calling <method namespace="DBCtrls" class="TDBNavigator">BtnClick</method> triggers the navigator's OnClick event after the default action of the button.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBNavigator">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBNavigator">TDBNavigator</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBNavigator">Destroy</method> directly in an application. Instead, call Free. Free checks that the <method namespace="DBCtrls" class="TDBNavigator">TDBNavigator</method> reference is not nil and only then calls destroy.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the navigator to the dataset that it controls.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DBCtrls" class="TDBNavigator">DataSource</property> property to link the database navigator with a dataset. Specify the data source component that identifies the dataset that the navigator manipulates.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.VisibleButtons">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines which buttons appear on the database navigator. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBNavigator">VisibleButtons</property> to select the buttons that will appear on the navigator. Leave any of the navigator buttons out of the <property namespace="DBCtrls" class="TDBNavigator">VisibleButtons</property> set to hide those buttons and thereby prevent the user from performing certain operations. For example, to only allow the user to view the records in the dataset, <property namespace="DBCtrls" class="TDBNavigator">VisibleButtons</property> should include only the nbFirst, nbPrior, nbNext, and nbLast </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Flat">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the buttons of the navigator have a three-dimensional (3-D) look with borders or two-dimensional look without borders.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBCtrls" class="TDBNavigator">Flat</property> is true, the navigator buttons appear flat and do not have borders separating them. When <property namespace="DBCtrls" class="TDBNavigator">Flat</property> is false, the buttons are clearly defined.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Hints">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides a way to customize the Help <property namespace="DBCtrls" class="TDBNavigator">Hints</property> for the buttons on the database navigator.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DBCtrls" class="TDBNavigator">Hints</property> property to supply Help <property namespace="DBCtrls" class="TDBNavigator">Hints</property> of your choosing for the individual navigator buttons. Each button has a default Help Hint. <property namespace="DBCtrls" class="TDBNavigator">Hints</property> allow the values of any or all of these default Help <property namespace="DBCtrls" class="TDBNavigator">Hints</property> to be replaced by customized hints. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBNavigator">Hints</property> is a string list. Each hint is a string. The first string in the string list becomes the Help Hint for the first button on the navigator (the First button). The seventh hint becomes the Help Hint for the seventh button (the Edit button). </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When specifying <property namespace="DBCtrls" class="TDBNavigator">Hints</property> at runtime, enter an empty string for any Help Hint that should keep the default value. Simply leave the line blank when using the string list property editor of the Object Inspector for the <property namespace="DBCtrls" class="TDBNavigator">Hints</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To have the Help <property namespace="DBCtrls" class="TDBNavigator">Hints</property> appear at runtime, set the ShowHint property to true.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ConfirmDelete">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether a message box appears asking the user to confirm record deletions initiated using the database navigator.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DBCtrls" class="TDBNavigator">ConfirmDelete</property> property to help prevent the user from accidentally deleting a record from the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBNavigator">ConfirmDelete</property> is true, a message box appears when the user presses the delete button and the record isn't deleted unless the user chooses the OK button. If <property namespace="DBCtrls" class="TDBNavigator">ConfirmDelete</property> is false, no message box appears and the record is simply deleted.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.BeforeAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when a button on the database navigator is clicked, before the action is executed.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DBCtrls" class="TDBNavigator">BeforeAction</event> event handler to take specific action before the default response when a user clicks a button in the database navigator.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.OnClick">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when a button on the database navigator is clicked, after the action is executed.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <event namespace="DBCtrls" class="TDBNavigator">OnClick</event> event handler to write code that responds to the click event. Because the buttons on the navigator already have default actions that occur when they are clicked, it isn't necessary to write an <event namespace="DBCtrls" class="TDBNavigator">OnClick</event> event handler.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <event namespace="DBCtrls" class="TDBNavigator">OnClick</event> event occurs when</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The user clicks one the buttons on the navigator with the mouse</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The user presses Spacebar while the navigator has focus.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The BtnClick method is called.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The <event namespace="DBCtrls" class="TDBNavigator">OnClick</event> event occurs after the default action for the clicked button.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TNavDataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TNavDataLink</class> helps manage the link to the dataset for a TDBNavigator object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TNavDataLink</class> is tailored to work with a TDBNavigator. It should only be used by the TDBNavigator class.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TNavDataLink">Create</method>s an instance of <method namespace="DBCtrls" class="TNavDataLink">TNavDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not create instances of <method namespace="DBCtrls" class="TNavDataLink">TNavDataLink</method>. The TDBNavigator that owns a <method namespace="DBCtrls" class="TNavDataLink">TNavDataLink</method> calls <method namespace="DBCtrls" class="TNavDataLink">Create</method> from its own constructor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TNavDataLink">Create</method> calls its inherited <method namespace="DBCtrls" class="TNavDataLink">Create</method> constructor, and then sets VisualControl to true.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.EditingChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs TDBNavigator of changes to the editing state of the DataSource.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call the <method namespace="DBCtrls" class="TNavDataLink">EditingChanged</method> procedure directly. Changes to the editing state of the DataSource trigger this procedure, which in turn causes the navigator to enable or disable editing buttons as appropriate.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSetChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the TDBNavigator of changes to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications do not need to call the <method namespace="DBCtrls" class="TNavDataLink">DataSetChanged</method> procedure. It is called automatically following changes to the contents of the dataset. <method namespace="DBCtrls" class="TNavDataLink">TNavDataLink</method> informs the TDBNavigator of these changes so that it can enable and disable buttons as appropriate.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ActiveChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs TDBNavigator of changes in the Active property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call the <method namespace="DBCtrls" class="TNavDataLink">ActiveChanged</method> procedure directly. Changes in the Active property trigger this procedure, which in turn causes the navigator to enable or disable its buttons, as appropriate.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TNavDataLink">Destroy</method>s an instance of <method namespace="DBCtrls" class="TNavDataLink">TNavDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not free <method namespace="DBCtrls" class="TNavDataLink">TNavDataLink</method> objects. The TDBNavigator that owns a <method namespace="DBCtrls" class="TNavDataLink">TNavDataLink</method> calls Free to destroy the <method namespace="DBCtrls" class="TNavDataLink">TNavDataLink</method> from its own destructor.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDataSourceLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDataSourceLink</class> helps manage the link to the data source for a TDBLookupControl object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDataSourceLink</class> is tailored to work with TDBLookupControl. It should only be used by the TDBLookupControl class.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.FocusControl">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves input focus to the data field of the TDBLookupControl object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call the <method namespace="DBCtrls" class="TDataSourceLink">FocusControl</method> procedure. It is called automatically when a field component in the DataSet tries to set focus to a control on the form that represents the field. <method namespace="DBCtrls" class="TDataSourceLink">FocusControl</method> moves focus to the DataField of the TDBLookupControl if it matches the Field parameter.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ActiveChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the TDBLookupControl of changes in the Active property of its DataSource.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call the <method namespace="DBCtrls" class="TDataSourceLink">ActiveChanged</method> procedure directly. Changes in the Active property trigger this procedure. When the Active property becomes true, <method namespace="DBCtrls" class="TDataSourceLink">ActiveChanged</method> causes the TDBLookupControl object to re-acquire its DataField property. This ensures that the lookup control is working with the correct field component.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.LayoutChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to changes in the representation of the data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDataSourceLink">LayoutChanged</method> updates the associated lookup control so that its field bindings remain accurate when the field order in the dataset changes.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.RecordChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the TDBLookupControl of changes in the current record or field of the DataSource.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call <method namespace="DBCtrls" class="TDataSourceLink">RecordChanged</method> directly. It is triggered automatically after changes in the contents of the current record. If the Field parameter is the key field of the lookup control, or if the Field parameter is nil (Delphi) or NULL (C++), indicating that the entire record changed, <method namespace="DBCtrls" class="TDataSourceLink">RecordChanged</method> causes the lookup control to refetch the value of its key field.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TListSourceLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TListSourceLink</class> helps manage the link to the ListSource of a TDBLookupControl object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TListSourceLink</class> is tailored to work with TDBLookupControl. It should only be used by the TDBLookupControl class.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TListSourceLink">Create</method>s an instance of TDataSourceLink.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TListSourceLink">Create</method> is called from the constructor of any TlookupControl descendant object that uses a <method namespace="DBCtrls" class="TListSourceLink">TListSourceLink</method> to implement its ListSource property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TListSourceLink">Create</method> calls the inherited <method namespace="DBCtrls" class="TListSourceLink">Create</method> method and then sets VisualControl to True.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ActiveChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the TDBLookupControl of changes to the Active property of the dataset that it maintains for the ListSource.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call the <method namespace="DBCtrls" class="TListSourceLink">ActiveChanged</method> procedure directly. Changes in the Active property of the dataset trigger this procedure. <method namespace="DBCtrls" class="TListSourceLink">ActiveChanged</method> causes the TDBLookupControl to re-acquire its lookup list.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSetChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the TDBLookupControl of changes to the current record of the dataset that the TDBLookupControl uses to populate its list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call the <method namespace="DBCtrls" class="TListSourceLink">DataSetChanged</method> procedure directly. These calls are triggered automatically by the dataset. <method namespace="DBCtrls" class="TListSourceLink">DataSetChanged</method> informs the <method namespace="DBCtrls" class="TListSourceLink">TListSourceLink</method> of dataset changes so that it can move to the appropriate record in the dataset.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBLookupControl">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBLookupControl</class> is the base class for controls that provide the user with a list of lookup items for filling in fields that require data from another dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBLookupControl</class> as a base class when defining controls that permit the user to set a field value by selecting a corresponding value from another dataset. The TDBLookupComboBox and TDBLookupListBox controls are both descended from the <class namespace="DBCtrls">TDBLookupControl</class> and provide the user with automatic lookup capabilities that are implemented in the <class namespace="DBCtrls">TDBLookupControl</class> object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not create instances of <class namespace="DBCtrls">TDBLookupControl</class>. Instead, instantiate a descendant of <class namespace="DBCtrls">TDBLookupControl</class> to allow the user to set field values from a set of lookup values.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.CanModify">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the lookup control has rights to modify data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">CanModify</method> is used internally to determine whether the lookup control is able to modify the value of the field specified by the DataField property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">CanModify</method> returns trueif </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ReadOnly property is false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ListActive property is true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The DataField property refers to a field that can be modified.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Otherwise, <method namespace="DBCtrls" class="TDBLookupControl">CanModify</method> returns false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.GetTextHeight">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates how many pixels are required for one line of text in the list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">GetTextHeight</method> is used internally to manage the height of the control so that the list does not include partial (clipped) rows. It indicates the number of pixels required for a single row of text in the list.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.LocateKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Locates the value specified by KeyValue in the lookup dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">LocateKey</method> is used internally to look up key values in the lookup dataset so that the control can find the appropriate display values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">LocateKey</method> calls the lookup dataset's Locate method, passing in the current values of KeyField and KeyValue. If the key value is found, <method namespace="DBCtrls" class="TDBLookupControl">LocateKey</method> positions the lookup dataset on the record with the matching value and returns true. Otherwise, it returns false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBLookupControl">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBLookupControl">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">Create</method>s an instance of <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBLookupControl">Create</method> to instantiate a lookup control at runtime.  For lookup controls placed on forms or data modules at design time, <method namespace="DBCtrls" class="TDBLookupControl">Create</method> is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component that is responsible for freeing the lookup control. It becomes the value of the Owner property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyValueChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the control when the value of the protected KeyValue property changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">KeyValueChanged</method> is called automatically when the value of the KeyValue property changes. It allows the lookup control to make any necessary adjustments to display the new value in the list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method>, <method namespace="DBCtrls" class="TDBLookupControl">KeyValueChanged</method> does nothing. Descendant classes override this method to update the display properties of the control to reflect the new value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ListLinkDataChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the control when its data binding changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">ListLinkDataChanged</method> is called automatically when the data displayed in the lookup list changes for any reason.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method>, <method namespace="DBCtrls" class="TDBLookupControl">ListLinkDataChanged</method> does nothing. Descendant classes override this method to update any internal properties that depend on the current list.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Notification">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to notifications that components are being created or destroyed.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the inherited class' method, <method namespace="DBCtrls" class="TDBLookupControl">Notification</method> checks whether the notification indicates the removal of DataSource or ListSource. If so, <method namespace="DBCtrls" class="TDBLookupControl">Notification</method> sets the property to nil (Delphi) or NULL (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Derived classes can override <method namespace="DBCtrls" class="TDBLookupControl">Notification</method> method to handle additional notifications, but the inherited class' method should be always be called.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ProcessSearchKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a character to the protected SearchText property and updates the selection to the first matching list value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">ProcessSearchKey</method> is called automatically when the user types a key into the lookup control. It forms the basis of the control's incremental searching, updating the list to the string that begins with the characters typed in thus far.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.SelectKeyValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the value of the control so that it reflects a new key field value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">SelectKeyValue</method> is used internally to set the value of the control to reflect the specified value on its KeyField.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Value is the new value for the KeyValue property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateDataFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the control when the DataField property changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">UpdateDataFields</method> is called automatically when the DataField property changes. It updates the internal properties that keep track of the field that the lookup control represents.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateListFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates the control when the list of lookup values changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">UpdateListFields</method> is called automatically when the list of lookup values changes. It synchronizes all the properties of the control so that they reflect the new list of values.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupControl">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBLookupControl">Destroy</method> directly in an application. Instead, call Free. Free checks that the <method namespace="DBCtrls" class="TDBLookupControl">TDBLookupControl</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBLookupControl">Destroy</method>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field whose value is represented by the lookup control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBLookupControl">DataField</property> to bind the lookup control to a field in the dataset specified by the DataSource property. The <property namespace="DBCtrls" class="TDBLookupControl">DataField</property> is the field whose value can be set by the lookup control, not the field which supplies the lookup values that are displayed by the lookup control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBLookupControl">DataField</property> specifies a lookup field component, there is no need to set the KeyField or ListField properties, as the field component contains all the information about the relationship between the data field value and the lookup value.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Helps the lookup control manage its link to the data source and respond to data events.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <property namespace="DBCtrls" class="TDBLookupControl">DataLink</property> is used internally to access the TDataSourceLink that coordinates communication between the dataset in which you find the field that this control represents, the data source for that dataset (identified by the DataSource property), and the lookup control.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the lookup control to the dataset that contains the DataField.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBLookupControl">DataSource</property> to specify the data source component that identifies the dataset the lookup control represents. The lookup control represents a field in one table by displaying the value of a corresponding field in another table. <property namespace="DBCtrls" class="TDBLookupControl">DataSource</property> links to the dataset for the field the control represents, as opposed to the ListSource, which links the lookup control to the lookup table that holds the field that is actually displayed. If the lookup control is used to edit data, the field that actually gets changed is the one in the <property namespace="DBCtrls" class="TDBLookupControl">DataSource</property>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.HasFocus">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Indicates whether the lookup control has input focus.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <property namespace="DBCtrls" class="TDBLookupControl">HasFocus</property> is used internally to determine whether the lookup control has input focus. Applications should use the public Focused method instead.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field in the ListSource dataset that must match the value of the DataField field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBLookupControl">KeyField</property> to link the ListSource of the lookup control to the DataSource. Although the name of the field specified as the <property namespace="DBCtrls" class="TDBLookupControl">KeyField</property> does not have to be the same as the name of the field specified as the DataField, the two fields must have the same values. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After specifying the ListField, choose which field the lookup control will actually display with the ListField property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the DataField field is a lookup field, don't specify anything for <property namespace="DBCtrls" class="TDBLookupControl">KeyField</property> or ListField; lookup controls automatically use the data field's Lookup<property namespace="DBCtrls" class="TDBLookupControl">KeyField</property>s property for <property namespace="DBCtrls" class="TDBLookupControl">KeyField</property>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the common value of the KeyField field and the DataField field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use KeyField to determine the value represented by the lookup control (not the value displayed by the lookup control). When <property namespace="DBCtrls" class="TDBLookupControl">KeyValue</property> is set, the lookup control attempts to find a record from the ListSource's dataset where the value of KeyField matches <property namespace="DBCtrls" class="TDBLookupControl">KeyValue</property>. If such a match is found, the lookup control displays the value of ListField on that record.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ListActive">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the ListFields property is currently being updated.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBLookupControl">ListActive</property> is used internally to prevent the lookup control from attempting to use its data-aware properties while it is in the middle of an update. While refreshing the ListFields cache to reflect the current fields in the dataset, <property namespace="DBCtrls" class="TDBLookupControl">ListActive</property> is false. At all other times, <property namespace="DBCtrls" class="TDBLookupControl">ListActive</property> is true.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ListField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field or fields whose values are displayed in the lookup control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The lookup control represents a field in one table by displaying the value of one or more corresponding fields in another table. <property namespace="DBCtrls" class="TDBLookupControl">ListField</property> is the name of the field or fields in the lookup table that are actually displayed, as opposed to the DataField, which is the field in the DataSource that the lookup control actually represents, or the KeyField, which is the field in the lookup table with the same value as the DataField. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To fully specify the list fields, both a dataset for the lookup table and the fields within that dataset must be defined. The ListSource property of the lookup control specifies the dataset for the lookup table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBLookupControl">ListField</property> can represent more than one field. Separate multiple field names with semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Before specifying <property namespace="DBCtrls" class="TDBLookupControl">ListField</property>, specify the link between the two datasets using the KeyField property. If <property namespace="DBCtrls" class="TDBLookupControl">ListField</property> is not set, lookup controls display KeyField field values by default. If the DataField field is a lookup field, don't specify anything for <property namespace="DBCtrls" class="TDBLookupControl">ListField</property>; the data controls automatically use the lookup field's LookupResultField property as <property namespace="DBCtrls" class="TDBLookupControl">ListField</property>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ListFieldIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies which field from the ListField property is used for incremental searching.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the ListField property specifies more than one field, use <property namespace="DBCtrls" class="TDBLookupControl">ListFieldIndex</property> to specify which of those fields is the one to use for incremental searches. For the TDBLookupComboBox object, <property namespace="DBCtrls" class="TDBLookupControl">ListFieldIndex</property> also determines which field appears in the edit region of the combo box.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBLookupControl">ListFieldIndex</property> allows the most important value to appear in a position other than the first when all the values of the ListField fields are displayed. The value of <property namespace="DBCtrls" class="TDBLookupControl">ListFieldIndex</property> must be less than the number of fields specified by the ListField property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ListFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the field components whose values are displayed in the lookup control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBLookupControl">ListFields</property> caches the field components that are named by the ListField property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ListLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the TListSourceLink object that coordinates data communication with the lookup dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBLookupControl">ListLink</property> is used internally to access the TListSourceLink that coordinates communication between the lookup dataset, the lookup data source (identified by the ListSource property), and the lookup control.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ListSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies a data source for the data displayed in the lookup control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set LookupSource to the data source that contains the KeyField and ListField fields. If the DataField field is a lookup field, don't specify anything for <property namespace="DBCtrls" class="TDBLookupControl">ListSource</property>; data controls automatically use the lookup field's LookupDataSet property to create a data source.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.NullValueKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Specifies the key combination that assigns a blank value to the associated field.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Set <property namespace="DBCtrls" class="TDBLookupControl">NullValueKey</property> to let users enter a "blank" value into the associated field. When the user types the key combination that this shortcut represents, the associated field is cleared.</condition>
                  
            </para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">Use the ShortCut function or the TextToShortCut function to create a value to assign to <property namespace="DBCtrls" class="TDBLookupControl">NullValueKey</property>.</condition>
                     
               </para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the T<property namespace="DBCtrls" class="TDBLookupControl">Field</property> object the lookup control represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DBCtrls" class="TDBLookupControl">Field</property> object to directly access the field component for the field the lookup control represents. If <property namespace="DBCtrls" class="TDBLookupControl">Field</property> is a lookup field, the properties of the field component describe the relationship between the field and the lookup dataset. To allow a lookup control to represent a set of lookup values that do not come from another dataset, use the Data<property namespace="DBCtrls" class="TDBLookupControl">Field</property> property to bind to a lookup field and use the LookupList property of the T<property namespace="DBCtrls" class="TDBLookupControl">Field</property> object to specify a list of lookup values.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBLookupListBox">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBLookupListBox</class> provides a list of lookup items for filling in fields that require data from another dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBLookupListBox</class> to provide users with a convenient list of lookup items to set a field value using the values of a field in another dataset. Lookup list boxes usually display values that are a represent a more meaningful description of the actual field value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <class namespace="DBCtrls">TDBLookupListBox</class> is linked to a lookup field component, it automatically reads the relationship between the field value and the lookup values in the lookup dataset from the field component. The relationship between field values and the corresponding values in the lookup dataset can also be explicitly set using the properties of the lookup list box when the list box is not linked to a lookup field component.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Performs an action directed at the DB lookup list box.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupListBox">ExecuteAction</method> is called automatically when the user invokes an action with the DB lookup list box as a target. The Action parameter specifies the action component that was invoked.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupListBox">ExecuteAction</method> first calls the inherited method, which checks whether the action component knows how to perform its function with the DB lookup list box as a target. If the action does not handle the invocation with the list box as a target, <method namespace="DBCtrls" class="TDBLookupListBox">ExecuteAction</method> checks whether this is an action that takes a dataset as a target. If so, <method namespace="DBCtrls" class="TDBLookupListBox">ExecuteAction</method> invokes the action, using the dataset associated with the DataSource property as a target.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action component to reflect the current state of the DB lookup list box.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupListBox">UpdateAction</method> is called automatically when the CPU is idle to allow the DB lookup list box the opportunity of updating an action. For example, <method namespace="DBCtrls" class="TDBLookupListBox">UpdateAction</method> disables actions that require the dataset to be active when the dataset associated with the DataSource property is not active. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupListBox">Create</method>s an instance of <method namespace="DBCtrls" class="TDBLookupListBox">TDBLookupListBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBLookupListBox">Create</method> to instantiate a <method namespace="DBCtrls" class="TDBLookupListBox">TDBLookupListBox</method> object at runtime. For <method namespace="DBCtrls" class="TDBLookupListBox">TDBLookupListBox</method> objects placed on forms or data modules at design time, <method namespace="DBCtrls" class="TDBLookupListBox">Create</method> is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pass a single Component as a parameter to provide the <method namespace="DBCtrls" class="TDBLookupListBox">TDBLookupListBox</method> object with an Owner that is responsible for freeing it.After calling the inherited constructor to allocate and initialize a generic lookup control, <method namespace="DBCtrls" class="TDBLookupListBox">Create</method> creates and initializes the helper objects needed to link to a dataset.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.SelectedItem">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the value displayed in the list box that is currently selected.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TDBLookupListBox">SelectedItem</property> to determine the value the user selected using the lookup list box. If no item is selected, <property namespace="DBCtrls" class="TDBLookupListBox">SelectedItem</property> is an empty string.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">StrVar := DBLookupListBox1.SelectedItem;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">StrVar = DBLookupListBox1-&gt;SelectedItem;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.BorderStyle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the lookup list box has a border.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBLookupListBox">BorderStyle</property> to specify whether a border should be drawn around the lookup list box. These are the possible values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>bsNone</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>No visible border</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>bsSingle</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Single-line border</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.RowCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies how many rows are visible in the list box. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBLookupListBox">RowCount</property> to the number of rows displayed in the lookup list box. The list box is resized to match the specified number of rows. Resizing the list box (such as by changing its Height property) automatically changes the value of <property namespace="DBCtrls" class="TDBLookupListBox">RowCount</property> to match the new height.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDropDownAlign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDropDownAlign</type> indicates the relative alignment of a drop-down list to the edit portion of a DB lookup combo box.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The following table summarizes the possible values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>daLeft</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The drop-down list is aligned with the left edge of the edit region.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>daRight</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The drop-down list is aligned with the right edge of the edit region.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>daCenter</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The drop-down list is centered beneath the edit region.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBLookupComboBox">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBLookupComboBox</class> represents a combo box that identifies a set of field values in one dataset with a corresponding set of values from another dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBCtrls">TDBLookupComboBox</class> to provide the user with a convenient drop-down list of lookup items for filling in fields that require data from another dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <class namespace="DBCtrls">TDBLookupComboBox</class> is linked to a lookup field component, it automatically reads the relationship between the field value and the lookup values in the lookup dataset from the field component. The relationship between field values and the corresponding values in the lookup dataset can also be explicitly set using the properties of the lookup combo box when the combo box is not linked to a lookup field component.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupComboBox">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBLookupComboBox">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupComboBox">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBLookupComboBox">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UseRightToLeftAlignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Specifies whether the control's alignment is in a right-to-left mode.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Call <method namespace="DBCtrls" class="TDBLookupComboBox">UseRightToLeftAlignment</method> to determine whether the <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method>'s alignment is in a right-to-left mode. This information can be used when painting the <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method> data or when responding to mouse events.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <method namespace="DBCtrls" class="TDBLookupComboBox">UseRightToLeftAlignment</method> returns true for middle east locales if the BiDiMode property is bdRightToLeft. Otherwise, it returns false.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBLookupComboBox">Create</method>s and initializes an instance of <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBLookupComboBox">Create</method> to instantiate a lookup combo box at runtime. <method namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</method> objects placed on forms at design time are created automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component that is responsible for freeing the lookup combo box instance. It becomes the value of the Owner property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.CloseUp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Closes an opened or "dropped-down" list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBLookupComboBox">CloseUp</method> to programmatically close the list of the lookup combo box. The Accept parameter determines whether to modify the field value with the value that corresponds to the selected value in the lookup list. </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBLookupComboBox1.CloseUp(True);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBLookupComboBox1-&gt;CloseUp(true);</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DropDown">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Opens or "drops down" the lookup list so that the user can choose a lookup value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBLookupComboBox">DropDown</method> to programmatically open the lookup list. Before the list is displayed, an On<method namespace="DBCtrls" class="TDBLookupComboBox">DropDown</method> event is generated.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ListVisible">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the lookup list is open or "dropped-down".</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TDBLookupComboBox">ListVisible</property> to determine whether the list of lookup values is currently in the open (dropped-down) position. If <property namespace="DBCtrls" class="TDBLookupComboBox">ListVisible</property> is true, the list is open; if <property namespace="DBCtrls" class="TDBLookupComboBox">ListVisible</property> is false, the list is closed.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Text">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the lookup value that corresponds to the value of the field on the current record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="DBCtrls" class="TDBLookupComboBox">Text</property> to determine the currently selected lookup value. <property namespace="DBCtrls" class="TDBLookupComboBox">Text</property> is the value that appears in the edit region of the lookup combo box. The user can change the value of <property namespace="DBCtrls" class="TDBLookupComboBox">Text</property> by entering a new value if ReadOnly is false and the dataset is in edit mode.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DropDownAlign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies how the drop-down list is aligned relative to its edit box.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBLookupComboBox">DropDownAlign</property> to specify the position of the drop-down list relative to the edit region of the lookup combo box. The drop down list can be aligned to the left or right, or centered with the edit box.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DropDownRows">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of items displayed in the drop-down list of the <property namespace="DBCtrls" class="TDBLookupComboBox">TDBLookupComboBox</property>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBLookupComboBox">DropDownRows</property> to specify how many rows appear in the drop down list of the combo box. If there are more lookup items than <property namespace="DBCtrls" class="TDBLookupComboBox">DropDownRows</property>, the lookup list box displays a scroll bar.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The default value for <property namespace="DBCtrls" class="TDBLookupComboBox">DropDownRows</property> is 7.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DropDownWidth">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the width, in pixels, of the drop-down list. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBLookupComboBox">DropDownWidth</property> to customize the width of the drop-down list. If <property namespace="DBCtrls" class="TDBLookupComboBox">DropDownWidth</property> is 0 (the default), the drop-down list is the same width as the combo box.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBCtrls" class="TDBLookupComboBox">DropDownWidth</property> is useful when displaying multiple lookup fields, and therefore, multiple columns in the database lookup combo box.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.OnCloseUp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs immediately after an opened or "dropped-down" list is closed. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBCtrls" class="TDBLookupComboBox">OnCloseUp</event> event handler to respond when the combo box list is closed. When the list is closed, the value that corresponds to the selected lookup value is assigned to the field. The list can be closed by the user or by calling the CloseUp method.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">procedure TForm1.DBLookupComboBox1CloseUp(Sender: TObject);
begin
  StatusBar1.SimpleText := DBLookupComboBox1.Text;
end;</codeBlock>
         </comments>
      </member>
      <member name="E:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.OnDropDown">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs immediately before the lookup list is opened.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBCtrls" class="TDBLookupComboBox">OnDropDown</event> event handler to take specific action before the lookup list is displayed to the user. The list can be opened by the user or by calling the DropDown method.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">procedure TForm1.DBLookupComboBox1DropDown(Sender: TObject);
begin
  StatusBar1.SimpleText := '';
end;</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.DBCtrls.TDBRichEdit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBRichEdit</class> represents a multiline edit control that can display and edit a rich text memo field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use a <class namespace="DBCtrls">TDBRichEdit</class> object to enable users to edit a database field in a rich text edit control. <class namespace="DBCtrls">TDBRichEdit</class> provides the properties and methods to enter and work with rich text. <class namespace="DBCtrls">TDBRichEdit</class> does not provide any user interface components to make these formatting options available to the user. Applications must implement the user interface components to surface the rich text capabilities of a <class namespace="DBCtrls">TDBRichEdit</class> object. make this easier, a number of pre-defined standard actions operate on rich edit controls to perform common formatting tasks.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBCtrls">TDBRichEdit</class> uses the Text property to represent the contents of the field.  Like other data-aware controls, <class namespace="DBCtrls">TDBRichEdit</class> controls automatically put the data source into edit mode when the value of the Text property is changed.  However, if only the formatting of the text is changed, but not the text itself, the application must explicitly put the data source into edit mode so that the changes will be saved. This should be implemented as part of the user interface for the rich text capabilities.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the database field does not include text formatting information, consider using a TDBMemo object or a TDBEdit object instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the application doesn't require the data-aware capabilities of <class namespace="DBCtrls">TDBRichEdit</class>, use a rich text edit control (TRichEdit) instead, to conserve system resources.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">ExecuteAction</method> is called automatically when the user invokes an action with the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> as a target. The Action parameter specifies the action that was invoked. <method namespace="DBCtrls" class="TDBRichEdit">ExecuteAction</method> returns trueif the action was successfully dispatched, and false if the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="DBCtrls" class="TDBRichEdit">UpdateAction</method> returns trueif the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">Create</method>s an instance of <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBCtrls" class="TDBRichEdit">Create</method> to instantiate a <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> object at runtime. For <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> objects placed on forms at design-time, the constructor is called automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pass a single Component as a parameter to provide the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> object with an Owner that is responsible for freeing it. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the inherited constructor to allocate and initialize a generic rich edit object, <method namespace="DBCtrls" class="TDBRichEdit">Create</method>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets ReadOnly to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets AutoDisplay to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">Create</method>s and initializes the helper objects needed to link to a dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Change">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keeps track of the fact that the text has been modified, before letting the inherited method call the On<method namespace="DBCtrls" class="TDBRichEdit">Change</method> event handler if it is assigned.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications cannot call this protected method directly. It is triggered automatically by Windows' events. <method namespace="DBCtrls" class="TDBRichEdit">Change</method> responds to these events by internally keeping track of the fact that the text has been modified. This information can then be used to know whether there are any changes to post to the dataset or to remove if the user requests a reset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">Change</method> also calls the inherited method, which calls the On<method namespace="DBCtrls" class="TDBRichEdit">Change</method> event handler if it is assigned.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyDown">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Supplements the inherited method to drive the dataset into edit mode when the user presses Del or Shift+Insert.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">KeyDown</method> first calls the inherited method, which calls the On<method namespace="DBCtrls" class="TDBRichEdit">KeyDown</method> event handler. <method namespace="DBCtrls" class="TDBRichEdit">KeyDown</method> next attempts to put the dataset into an editing state when the user types Del or Shift+Insert. Derived classes can override <method namespace="DBCtrls" class="TDBRichEdit">KeyDown</method> to handle additional key combinations, but the inherited method should always be called.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications cannot call this protected method directly. It is called automatically in response to Windows events.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.KeyPress">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Supplements the inherited method to handle any keystrokes that alter the state of the edit control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">KeyPress</method> first calls the inherited method, which calls the On<method namespace="DBCtrls" class="TDBRichEdit">KeyPress</method> event handler. Next, <method namespace="DBCtrls" class="TDBRichEdit">KeyPress</method> checks the value of the key, and throws it away if it is not a valid character for the field type, or if there is no link to a database field. Valid characters cause <method namespace="DBCtrls" class="TDBRichEdit">KeyPress</method> to attempt to put the dataset into edit mode.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pressing the Escape key causes <method namespace="DBCtrls" class="TDBRichEdit">KeyPress</method> to throw away all unposted edits. Pressing the Pause key causes <method namespace="DBCtrls" class="TDBRichEdit">KeyPress</method> to call LoadMemo to load the value of the memo field associated with the rich edit control.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications cannot call this protected method directly. It is called automatically in response to Windows events.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Notification">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Overrides the inherited method to respond to opRemove notifications on the DataSource.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the inherited method, <method namespace="DBCtrls" class="TDBRichEdit">Notification</method> checks whether the notification indicates the removal of the DataSource. If so, <method namespace="DBCtrls" class="TDBRichEdit">Notification</method> sets the DataSource property to nil (Delphi) or NULL (C++). </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Derived classes can override <method namespace="DBCtrls" class="TDBRichEdit">Notification</method> method to handle additional notifications, but the inherited method should be always be called.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DBCtrls" class="TDBRichEdit">Notification</method> is a protected method. Applications cannot call it directly. </para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.LoadMemo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">LoadMemo</method> loads the memo BLOB from the field in the database into the rich edit control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">LoadMemo</method> allows an application to control when the rich edit control displays the contents of the memo field. Use <method namespace="DBCtrls" class="TDBRichEdit">LoadMemo</method> to update the text in the rich edit control to the value of the field in the current record. <method namespace="DBCtrls" class="TDBRichEdit">LoadMemo</method> only works with BLOB fields when the AutoDisplay property is false, so that the value of the field is not loaded automatically. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">Destroy</method>s an instance of <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBCtrls" class="TDBRichEdit">Destroy</method> directly in an application. Instead, call Free. Free verifies that the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> reference is not nil and only then calls <method namespace="DBCtrls" class="TDBRichEdit">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBCtrls" class="TDBRichEdit">Destroy</method> frees the helper objects of the <method namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</method> before calling the inherited destructor.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.Field">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the T<property namespace="DBCtrls" class="TDBRichEdit">Field</property> object for the database field the rich edit control represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBCtrls" class="TDBRichEdit">Field</property> to get direct access to the contents and properties of the database field without going through the edit window. Use <property namespace="DBCtrls" class="TDBRichEdit">Field</property> to change the contents of the database field programmatically. Use the Text property instead if you want to change the contents of the edit window without immediately posting the changes to the dataset. Changing the Text property allows the user to cancel the changes.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">(DBRichEdit1.Field as TMemoField).Assign(RichEdit1.Lines);</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.AutoDisplay">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether to automatically display the contents of the memo field in the rich edit control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBRichEdit">AutoDisplay</property> is true, the rich edit control automatically displays new data when the underlying BLOB field changes (such as when moving to a new record).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBCtrls" class="TDBRichEdit">AutoDisplay</property> is false, the control shows only the field name whenever the underlying BLOB field changes. To display the data, the user can double-click on the control or select it and press Enter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The effect of <property namespace="DBCtrls" class="TDBRichEdit">AutoDisplay</property> is not purely cosmetic. The data shown by the <property namespace="DBCtrls" class="TDBRichEdit">TDBRichEdit</property> object is the value of the Text property. When <property namespace="DBCtrls" class="TDBRichEdit">AutoDisplay</property> is false, if the data changes, the value of the Text property changes to the name of the field. Thus, if <property namespace="DBCtrls" class="TDBRichEdit">AutoDisplay</property> is false, applications should be cautious about using the value of the Text property to ascertain the value of the underlying field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calling the LoadMemo method causes Text to update to the current value of the BLOB field. This change will also be reflected in the appearance of the control on screen.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Change the value of <property namespace="DBCtrls" class="TDBRichEdit">AutoDisplay</property> to false if the automatic loading of BLOB fields seems to take too long.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DBCtrls" class="TDBRichEdit">AutoDisplay</property> only applies to BLOB fields. If the control is bound to another type of text field, <property namespace="DBCtrls" class="TDBRichEdit">AutoDisplay</property> has no effect.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field from which the rich edit control displays data. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBRichEdit">DataField</property> to bind the rich edit control to a field in the dataset. To fully specify a database field, both the dataset and the field within that dataset must be defined. The DataSource property of the rich edit control specifies the dataset which contains the <property namespace="DBCtrls" class="TDBRichEdit">DataField</property>.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBRichEdit1.DataField := 'Document';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBRichEdit1-&gt;DataField = "Document";</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Links the rich edit control to the dataset that contains the field it represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBCtrls" class="TDBRichEdit">DataSource</property> to link the rich edit control to a dataset in which the data can be found. To fully specify a database field for the edit control, both the dataset and a field within that dataset must be defined. Use the DataField property to specify the particular field within the dataset.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DBRichEdit1.DataSource := DataSource1;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DBRichEdit1-&gt;DataSource = DataSource1;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.DBCtrls.Borland.Vcl.DBCtrls.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the user can use the rich database edit control to change the value of the field in the current record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBCtrls" class="TDBRichEdit">ReadOnly</property> to true to prevent the user from changing the contents of the database field. When <property namespace="DBCtrls" class="TDBRichEdit">ReadOnly</property> is true, the edit control is used only to display the contents of the field. If <property namespace="DBCtrls" class="TDBRichEdit">ReadOnly</property> is false, the user can change the field's value as long as the dataset is in edit mode.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.DBCtrls.DBUseRightToLeftAlignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a data-aware control's alignment is reversed to a right-to-left mode.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Dbctrls">DBUseRightToLeftAlignment</routine> to determine whether a control's alignment has been reversed to a right-to-left mode. This information can be used when painting the control or when responding to mouse events.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="Dbctrls">DBUseRightToLeftAlignment</routine> returns true for middle east locales if the BiDiMode property is bdRightToLeft. Otherwise, it returns false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AControl is the data-aware control to check.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AField is the field associated with the control specified in AControl. The AField parameter is necessary so that <routine namespace="Dbctrls">DBUseRightToLeftAlignment</routine> can be used with controls such as TDBLookupComboBox, which uses the list field and not the target field for determining alignment.</para>
         </comments>
      </member>
   </members>
</doc>