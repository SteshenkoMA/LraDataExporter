<?xml version="1.0" encoding="UTF-8"?>
<doc>
   <assembly>Borland.VclDbRtl</assembly>
   <members>
      <member name="T:Borland.Vcl.SqlTimSt.TSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TSQLTimeStamp</type> represents time and date values with a high degree of accuracy.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The dbExpress database drivers use <type namespace="DRIntf">TSQLTimeStamp</type> when working with date and time information. Year specifies a year from 1 to 9999. Month specifies a month from 1 to 12. Day specifies a day of the month, from 1 through 28, 29, 30, or 31, depending on the Month value. Hour specifies the hour from 0 to 23. Minute and Second can range from 0 to 59. Fractions specifies milliseconds from 0 to 999.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">You can create a Variant that represents a <type namespace="DRIntf">TSQLTimeStamp</type> value using the VarSQLTimeStampCreate function. In fact, the easiest way to manipulate <type namespace="DRIntf">TSQLTimeStamp</type> values is to create such a Variant and use the built-in operators provided by the Variant type.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.VarSQLTimeStampCreate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new Variant that stores its value internally as a TSQLTimeStamp value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="SqlTimSt">VarSQLTimeStampCreate</routine> to obtain a Variant that stores its value as a TSQLTimeStamp value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the first syntax, the Variant returned as aDest has the same value as ASQLTimeStamp.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the second syntax (passing no arguments), the returned Variant has a value of NullSQLTimeStamp.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the third syntax, the returned Variant has the same value as ASQLTimeStamp.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the fourth syntax, the returned Variant represents the same date and time as the TDateTime value AValue.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the fifth syntax, the string passed as AValue is parsed into a date-and-time value and assigned as the value of the returned Variant. If AValue does not represent a date-and-time value, the resulting Variant has a value of NullSQLTimeStamp.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.VarSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the TVarType constant that identifies the internal type of a Variant as a TSQLTimeStamp value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="SqlTimSt">VarSQLTimeStamp</routine> returns the TVarType constant that identifies a TSQLTimeStamp-valued Variant. This is the value that the VarType function returns when the Variant stores its value as a TSQLTimeStamp value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Variant type codes for custom Variants are dynamically allocated when the application loads the unit that implements them. <routine namespace="SqlTimSt">VarSQLTimeStamp</routine> allows the application to identify the Variant type code that is currently used for custom Variants that represent an SQL time stamp. This value, however, may not match the type code used by another application that uses a different set of custom Variant types.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.VarIsSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a specified Variant represents a TSQLTimeStamp value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="SqlTimSt">VarIsSQLTimeStamp</routine> returns true if the Variant aValue stores its value internally as a TSQLTimeStamp value. <routine namespace="SqlTimSt">VarIsSQLTimeStamp</routine> returns false otherwise.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.VarToSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a Variant that represents a TSQLTimeStamp value to the corresponding TSQLTimeStamp.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="SqlTimSt">VarToSQLTimeStamp</routine> to obtain a TSQLTimeStamp from a variant whose value represents a date-and-time value. If the Variant is a Null Variant, <routine namespace="SqlTimSt">VarToSQLTimeStamp</routine> returns NullSQLTimeStamp.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.SQLTimeStampToStr">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a TSQLTimeStamp value to a string.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="SqlTimSt">SQLTimeStampToStr</routine> to convert a TSQLTimeStamp value to <condition language="Delphi">a string</condition>
               
               <condition language="CBuilder">an AnsiString</condition>. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DateTimeToStr converts the TSQLTimeStamp value given by DateTime using the format given by Format and returns the resulting string. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the string specified by the Format parameter is empty, the TSQLTimeStamp value is formatted using the ShortDateFormat global variable followed by the LongTimeFormat global variable. The time is not displayed if all time fields in the DateTime parameter are 0.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To create a format string for the Format parameter, use the standard date-time format specifiers:</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.TryStrToSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a string to a TSQLTimeStamp value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="SqlTimSt">TryStrToSQLTimeStamp</routine> to convert the string S to a TSQLTimeStamp value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If S can be converted to a TSQLTimeStamp value, the result is returned as the TimeStamp parameter and <routine namespace="SqlTimSt">TryStrToSQLTimeStamp</routine> returns true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If S can't be converted to a TSQLTimeStamp value, TimeStamp is set to NullSQLTimeStamp and <routine namespace="SqlTimSt">TryStrToSQLTimeStamp</routine> returns false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.StrToSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a string to a TSQLTimeStamp value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="SqlTimSt">StrToSQLTimeStamp</routine> to convert the string S to a TSQLTimeStamp value. If S does not represent a valid date-and-time value, <routine namespace="SqlTimSt">StrToSQLTimeStamp</routine> raises an EConvertError exception.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>To convert strings to TSQLTimeStamp values without raising an exception when the string is not a valid date-and-time, use Try<routine namespace="SqlTimSt">StrToSQLTimeStamp</routine> instead.</para>
            
            </tip>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.DateTimeToSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a TDateTime value to a TSQLTimeStamp value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="SqlTimSt">DateTimeToSQLTimeStamp</routine> to convert the TDateTime value specified by DateTime to a TSQLTimeStamp value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.SQLTimeStampToDateTime">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a TSQLTimeStamp value to a TDateTime value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="SqlTimSt">SQLTimeStampToDateTime</routine> to convert the TSQLTimeStamp value specified by DateTime to a TDateTime value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.SQLDayOfWeek">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the day of the week when a specified TSQLTimeStamp value occurs.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="SqlTimSt">SQLDayOfWeek</routine> returns the day of the week of the specified date as an integer between 1 and 7, where Sunday is the first day of the week and Saturday is the seventh.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.SqlTimSt.CheckSqlTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks whether a TSQLTimeStamp value represents a valid date and time.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="SqlTimSt">CheckSqlTimeStamp</routine> checks that the specified TSQLTimeStamp value represents a valid date and time. If the fields of the ASQLTimeStamp parameter are out of the valid range, <routine namespace="SqlTimSt">CheckSqlTimeStamp</routine> raises an EConversionError exception.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.FMTBcd.TBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBcd</type> stores a binary coded decimal value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBcd</type> represents a binary coded decimal value. It contains the following fields:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Field</th>
                  
                  <th>Contents</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Precision</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The number of digits in the decimal version of the value.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>SignSpecialPlaces</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The sign bit (0 is positive, any other value negative)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>Fraction</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>An array of BCD nibbles, 00 to 99 per byte, high nibble first. Only the first Precision nibbles are used.</para>
                  
                  </td>
               
               </tr>
            
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">You can create a Variant that represents a <type namespace="DRIntf">TBcd</type> value using the VarFM<type namespace="DRIntf">TBcd</type>Create function. In fact, the easiest way to manipulate <type namespace="DRIntf">TBcd</type> values is to create Variants for them and use the built-in operators provided by the Variant type.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.FMTBcd.EBcdException">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="FMTBcd">EBcdException</class> is the exception class for errors that occur when working with BCD values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="FMTBcd">EBcdException</class> is raised when</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An attempt to convert a Variant or string to a BCD value is unsuccessful. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application tries to create a Variant that represents a BCD value, starting with a value that can't be successfully converted.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application tries to divide by a BCD type whose value is 0.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.FMTBcd.EBcdOverflowException">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="FMTBcd">EBcdOverflowException</class> is the exception class for errors that occur when a Variant can't create a BCD value due to the requested precision and number of decimals.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="FMTBcd">EBcdOverflowException</class> is raised when</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A call to VarFMTBcdCreate tries to create a BCD value with a precision and number of decimals that can't be supported. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application tries to cast a Variant to a BCD value but it can't be expressed using the default precision and number of decimals.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.VarFMTBcdCreate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new Variant that stores its value internally as a TBcd value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call VarBcdCreate to obtain a Variant that stores its value as a TBcd value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the first syntax, the Variant returned as aDest has the same value as ABcd.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the second syntax (passing no arguments), the returned Variant has a value of NullBcd.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the third syntax, the returned Variant has the same value as ABcd.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition status="hold">Using the fourth syntax, the returned Variant converts AValue (if necessary) to extract the value.</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using the remaining syntaxes, the AValue parameter is converted into a TBcd value with the specified Precision and Scale and the result is the value of the Variant.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.VarIsFMTBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a specified Variant represents a TBcd value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">VarIsBcd returns true if the Variant aValue stores its value internally as a TBcd value. VarIsBcd returns false otherwise.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.VarFMTBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the TVarType constant that identifies the internal type of a Variant as a TBcd value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">VarFMTBcd</routine> returns the Variant type code that identifies a TBcd-valued Variant. This is the value that the VarType function returns when the Variant stores its value as a TBcd value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Variant type codes for custom Variants are dynamically allocated when the application loads the unit that implements them. <routine namespace="FmtBcd">VarFMTBcd</routine> allows the application to identify the Variant type code that is currently used for custom Variants that represent a BCD value. This type code, however, may not match the type code used by another application that uses a different set of custom Variant types.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.StrToBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a string to the corresponding binary-coded decimal (BCD) value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">StrToBcd</routine> to convert a string into a binary-coded decimal value. The decimals and precision are inferred from the digits present in the string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">StrToBcd</routine> converts the string specified by aValue and returns the resulting BCD value. If aValue does not represent a value that can be expressed as a TBcd, <routine namespace="FmtBcd">StrToBcd</routine> raises an exception.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>To convert a string to a Bcd value without raising an exception for invalid strings, use the Try<routine namespace="FmtBcd">StrToBcd</routine> function instead.</para>
            
            </tip>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.DoubleToBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a double precision floating point value to the corresponding binary-coded decimal (BCD) value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">DoubleToBcd</routine> to convert a double precision floating point value into a binary-coded decimal value. <routine namespace="FmtBcd">DoubleToBcd</routine> infers the number of decimal places and significant digits from the specified value aValue, using only as many as necessary. It never sets the number of significant digits to a value greater than 15.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">aValue is the value to convert.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">bcd returns the resulting BCD value when using the second syntax. When using the first syntax, the BCD value is the return value of the function.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.VarToBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a Variant into a TBcd type.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use VarDoubleAsBcd to obtain a TBcd value from a Variant.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">aValue is the Variant to convert.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.IntegerToBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts an integer value to the corresponding binary-coded decimal (BCD) value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">IntegerToBcd</routine> to convert an integer into a binary-coded decimal value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdToDouble">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a binary-coded decimal value (BCD) to the corresponding double precision floating point value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">BcdToDouble</routine> to convert a binary-coded decimal value into a double precision floating point value. If the Bcd parameter represents a value that can't be expressed in double precision, <routine namespace="FmtBcd">BcdToDouble</routine> raises an exception.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdToInteger">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a binary-coded decimal value (BCD) to an integer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">BcdToInteger</routine> to convert a binary-coded decimal value into an integer. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Bcd is the value to convert.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Truncate indicates how to handle values that include a decimal portion. If Truncate is true, <routine namespace="FmtBcd">BcdToInteger</routine> truncates the value specified by Bcd and converts only the integer portion. If Truncate is false, <routine namespace="FmtBcd">BcdToInteger</routine> raises an exception if the Bcd parameter does not represent an integer value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.TryStrToBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a string to the corresponding binary-coded decimal (BCD) value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">TryStrToBcd</routine> to convert a string into a binary-coded decimal value. The decimals and precision are inferred from the digits present in the string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">TryStrToBcd</routine> converts the string specified by aValue and returns the resulting BCD value as Bcd. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">TryStrToBcd</routine> returns true if it successfully converts aValue to a TBcd value. If aValue can't be successfully converted to a TBcd value, <routine namespace="FmtBcd">TryStrToBcd</routine> returns false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.NormalizeBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a BCD value into another BCD value with a specified precision and number of decimals.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="FmtBcd">NormalizeBcd</routine> to give a TBcd value a specific precision and number of decimal places. If the specified precision or number of decimal places is less than that of the original BCD value, <routine namespace="FmtBcd">NormalizeBcd</routine> truncates the value (as opposed to rounding). </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">InBcd is the BCD value to convert.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">OutBcd returns the resulting BCD value with the specified precision and decimal places.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Prec is the number of significant digits in OutBcd.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Scale is the number of decimal places in OutBcd.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">NormalizeBcd</routine> returns true if the conversion can be made with no loss of precision. It returns false if the conversion required some digits to be truncated.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdCompare">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Compares two TBcd values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="FmtBcd">BcdCompare</routine> to compare two TBcd values. The return value is indicated in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Return value</th>
                  
                  <th>Condition</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>-1</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>bcd1&lt; bcd2</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>0</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>bcd1= bcd2</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>1</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>bcd1 &gt; bcd2</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdSubtract">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Subtracts one BCD value from another.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">BcdSubtract</routine> subtracts bcdIn2 from bcdIn1 and returns the result as bcdOut.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The return value is given a precision and number of decimal places that is sufficient to accurately represent the result of the subtraction. You can convert this to a specific precision and number of decimal places using the NormalizeBcd procedure.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdMultiply">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Multiplies two BCD values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">BcdMultiply</routine> multiplies the first two arguments and returns the result as bcdOut.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The return value is given a precision and number of decimal places that is sufficient to accurately represent the result of the multiplication, if possible. You can convert this to a specific precision and number of decimal places using the NormalizeBcd procedure.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdDivide">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Divides one BCD value by another.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">BcdDivide</routine> divides Dividend by Divisor and returns the result as bcdOut.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The return value is given a precision and number of decimal places that is sufficient to accurately represent the result of the division, if possible. (The number of decimal places in the result, however, will never exceed 10.) You can convert this to a specific precision and number of decimal places using the NormalizeBcd procedure.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdAdd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds two TBcd values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">BcdAdd</routine> adds bcdIn1 to bcdIn2 and returns the result as bcdOut.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The return value is given a precision and number of decimal places that is sufficient to accurately represent the result of the addition. You can convert this to a specific precision and number of decimal places using the NormalizeBcd procedure.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdToStr">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a string representation of a binary-coded decimal (BCD) value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">BcdToStr</routine> to convert a binary-coded decimal value into a string.  <routine namespace="FmtBcd">BcdToStr</routine> formats the string to display all of the digits stored in the BCD value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdPrecision">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the precision of a binary-coded decimal (BCD) value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">BcdPrecision</routine> to determine the number of significant digits in a specified BCD value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdScale">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the number of decimal places for a binary-coded decimal (BCD) value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">BcdScale</routine> to determine the number of decimal places in a specified BCD value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.IsBcdNegative">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a binary-coded decimal (BCD) value is less than 0.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="FmtBcd">IsBcdNegative</routine> returns true if Bcd is less than 0, false if Bcd is greater than or equal to 0.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.CurrToBCD">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a Currency value to the corresponding binary-coded decimal (BCD) value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">CurrToBCD</routine> to convert a Currency value, such as is used by TBCDField objects, into a binary-coded decimal value, such as is stored in a physical BCD database field. <routine namespace="FmtBcd">CurrToBCD</routine> returns true if the Currency object passed as the Curr parameter is successfully converted into a BCD value and passed out as the BCD parameter. The Precision parameter specifies the number of digits represented in the BCD value, and the Decimals parameter specifies the number of those digits that are after the decimal point.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BCDToCurr">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a binary-coded decimal value (BCD) to the corresponding Currency value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">BCDToCurr</routine> to convert a binary-coded decimal value, such as is stored in a physical BCD database field, into a Currency value, which is the representation used by TBCDField objects. <routine namespace="FmtBcd">BCDToCurr</routine> returns true if the BCD value passed as the BCD parameter is successfully converted into a Currency object which is passed out as the Curr parameter.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.BcdToStrF">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a string representation of a binary-coded decimal (BCD) value that reflects specified formatting.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">BcdToStrF</routine> to convert a binary-coded decimal value into a string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Value is the BCD value to convert to a string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Format is the formatting code that indicates the overall type of formatting to use.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Precision indicates the maximum number of significant digits in the resulting string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Digits indicates the maximum number of digits past the decimal point in the resulting string.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.FMTBcd.FormatBcd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a string representation of a binary-coded decimal (BCD) value that reflects specified formatting.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="FmtBcd">FormatBcd</routine> to convert a binary-coded decimal value into a string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Format indicates how the resulting string should be formatted. It uses the same format specifiers as pertain to the FormatFloat function.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Bcd is the value to convert to a string.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.EDatabaseError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">EDatabaseError</class> is the exception class for database errors.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">EDatabaseError</class> is raised when a component detects a database error. Use <class namespace="Db">EDatabaseError</class> in an exception handling block or to create a database exception.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.EUpdateError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="db">EUpdateError</class> is the exception class for dataset provider update errors.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="db">EUpdateError</class> is raised if an error occurs when updates are applied by a provider component. raise this exception class for update errors when implementing the IProviderSupport interface in a custom dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="db" class="EUpdateError">Create</method>s and initializes an instance of <method namespace="db" class="EUpdateError">EUpdateError</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="db" class="EUpdateError">Create</method> generates an <method namespace="db" class="EUpdateError">EUpdateError</method> object to represent another error that is caught while applying updates.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">NativeError specifies the error message for the exception. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Context is a string providing additional context information. It becomes the value of the Context property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ErrCode and PrevError specify error codes for this exception or the previous exception in this update operation. If the current exception or previous exception does not have an error code, the corresponding argument is 0. The ErrCode and PrevError parameters initialize the ErrorCode and PreviousError properties.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Exception specifies the exception that was caught (which this <method namespace="db" class="EUpdateError">EUpdateError</method> represents). It becomes the value of the OriginalException property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="db" class="EUpdateError">Destroy</method>s an instance of <method namespace="db" class="EUpdateError">EUpdateError</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="db" class="EUpdateError">Destroy</method> directly in an application. Instead, call Free, which checks that the <method namespace="db" class="EUpdateError">EUpdateError</method> reference is not nil before calling <method namespace="db" class="EUpdateError">Destroy</method>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Context">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains context information from the error stack.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="db" class="EUpdateError">Context</property> contains additional information returned with the error message. If there is no additional context information, <property namespace="db" class="EUpdateError">Context</property> is an empty string.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ErrorCode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the error code that this exception represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="db" class="EUpdateError">EUpdateError</property> objects represent exceptions that occur when updating records. These exceptions can be generated in response to error codes from the data access mechanism <condition os="Windows">(such as the BDE or ADO) </condition>or by other exceptions that are caught by resolver components. If the update error represents an error code returned by the data access mechanism, <property namespace="db" class="EUpdateError">ErrorCode</property> is that error code. Otherwise, <property namespace="db" class="EUpdateError">ErrorCode</property> is 0.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Linux">DBExpress does not return error codes. This property merely provides a mechanism for using custom data-access components that generate error codes rather than exceptions.</condition>
                     
               </para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If <property namespace="db" class="EUpdateError">ErrorCode</property> is 0, use the OriginalException property, which provides access to the exception that was caught.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.PreviousError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the previous error code for this update process.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="db" class="EUpdateError">PreviousError</property> is the error code of the last update error in this update operation. If the last update error did not have an error code, <property namespace="db" class="EUpdateError">PreviousError</property> is 0.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.OriginalException">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the exception object that this update error represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="db" class="EUpdateError">EUpdateError</property> objects represent exceptions that occur when updating records. <property namespace="db" class="EUpdateError">OriginalException</property> is the exception object that is caught during the update process. Use this value to obtain more information about the problem that occurred.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">If the <property namespace="db" class="EUpdateError">EUpdateError</property> object represents an EDBEngineError, the ErrorCode property provides immediate access to its BDE error code without going through the <property namespace="db" class="EUpdateError">OriginalException</property> property.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldType</type> is a set of values that parallel the data types of fields in tables.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldType</type> type is the set of values for the DataType property field objects, field definition objects, and parameter objects. Classes in which <type namespace="DRIntf">TFieldType</type> values are used include TField (and descendants), TFieldDef, TParam<condition os="Windows">, TParameter</condition>, and TAggregate. <type namespace="DRIntf">TFieldType</type> values are also used in field-related functions and methods like the Add method of TFieldDefs. The following table describes each value:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftUnknown</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Unknown or undetermined</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftString</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Character or string field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftSmallint</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>16-bit integer field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftInteger</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>32-bit integer field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftWord</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>16-bit unsigned integer field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftBoolean</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Boolean field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftFloat</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Floating-point numeric field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftCurrency</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Money field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftBCD</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Binary-Coded Decimal field that can be converted to Currency type without a loss of precision.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftDate</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Date field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftTime</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Time field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftDateTime</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Date and time field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftBytes</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Fixed number of bytes (binary storage)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftVarBytes</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Variable number of bytes (binary storage)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftAutoInc</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Auto-incrementing 32-bit integer counter field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftBlob</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Binary Large OBject field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftMemo</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Text memo field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftGraphic</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Bitmap field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftFmtMemo</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Formatted text memo field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftParadoxOle</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Paradox OLE field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftDBaseOle</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>dBASE OLE field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftTypedBinary</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Typed binary field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftCursor</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Output cursor from an Oracle stored procedure (TParam only)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftFixedChar</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Fixed character field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftWideString</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Wide string field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftLargeint</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Large integer field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftADT</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Abstract Data Type field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftArray</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Array field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftReference</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>REF field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftDataSet</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>DataSet field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftOraBlob</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>BLOB fields in Oracle 8 tables</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftOraClob</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>CLOB fields in Oracle 8 tables</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftVariant</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Data of unknown or undetermined type</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftInterface</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>References to interfaces (IUnknown)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftIDispatch</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>References to IDispatch interfaces</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftGuid</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>globally unique identifier (GUID) values</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftTimeStamp</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Date and time field accessed through dbExpress</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftFMTBcd</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Binary-Coded Decimal field that is too large for ftBCD.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDataSetState">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDataSetState</type> indicates the current operating mode of a dataset component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDataSetState</type> represents the values that may be in the State property of a dataset component. <type namespace="DRIntf">TDataSetState</type> indicates the current operating mode of that dataset component. The following table lists all possible values in the <type namespace="DRIntf">TDataSetState</type> type and describes what they indicate in the State property:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsInactive</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Dataset is closed, so its data is unavailable.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsBrowse</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Data can be viewed, but not changed. This is the default state of an open dataset.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsEdit</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Active record can be modified.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsInsert</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The active record is a newly inserted buffer that has not been posted. This record can be modified and then either posted or discarded.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsSetKey</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TClientDataSet only. Record searching is enabled, or a SetRange operation is under way. A restricted set of data can be viewed, and no data can be edited or inserted.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsCalcFields</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>An OnCalcFields event is in progress. Noncalculated fields cannot be edited, and new records cannot be inserted.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsFilter</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>An OnFilterRecord event is in progress. A restricted set of data can be viewed. No data can edited or inserted.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsNewValue</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Temporary state used internally when a field component's NewValue property is accessed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsOldValue</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Temporary state used internally when a field component's OldValue property is accessed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsCurValue</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Temporary state used internally when a field component's CurValue property is accessed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsBlockRead</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Data-aware controls are not updated and events are not triggered when moving to the next record.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsInternalCalc</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Temporary state used internally when values need to be calculated for a field that has a FieldKind of fkInternalCalc.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dsOpening</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>DataSet is in the process of opening but has not finished.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDataEvent">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDataEvent</type> identifies an event that occurs to a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The following table describes the possible values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deFieldChange</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>A field value changed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deRecordChange</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The contents of the current record changed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deDataSetChange</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>A change occurred that affects the entire dataset (such as the insertion or deletion of records, changes to the key, or edits).</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deDataSetScroll</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The set of displayed records was scrolled.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deLayoutChange</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The layout of data in a data-aware control changed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deUpdateRecord</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Edits to the current record were posted.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deUpdateState</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The state of the dataset changed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deCheckBrowseMode</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The state of the dataset is about to change.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>dePropertyChange</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>A property of the dataset or one of its fields changed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deFieldListChange</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The list of fields in the dataset changed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deFocusControl</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Focus needs to shift to the representation of a specified field.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deParentScroll</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The parent for which the dataset is a nested detail scrolled.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deConnectChange</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The connection to a remote dataset changed.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>deReconcileError</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The dataset encountered reconcile errors when applying updates.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TUpdateStatus">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TUpdateStatus</type> indicates the update status of a record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TUpdateStatus</type> is the return type of the UpdateStatus method. UpdateStatus indicates what change, if any, is cached for the current record. <type namespace="DRIntf">TUpdateStatus</type> includes the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>usUnmodified</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The current record has no unapplied updates.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>usModified</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The current record has unapplied modifications.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>usInserted</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The current record has been inserted but the insertion was not applied.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>usDeleted</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The current record represents a deleted record, where the deletion has not yet been applied.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TUpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TUpdateAction</type> Indicates how an a dataset should proceed after an event handler has processed an update.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TUpdateAction</type> is the type of a parameter on event handlers that intervene when applying cached updates (without using a client dataset and provider). The following table lists the possible values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>uaAbort</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Abort the update operation without displaying an error message.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>uaApplied</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The event handler applied the update (not used in error handling event handlers). Free the current record update from the cache.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>uaFail</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Abort the update operation and display an error message.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>uaRetry</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Repeat the update operation that originally raised the error condition (not used in OnUpdateRecord event handlers).</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>uaSkip</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Skip updating the current record and leave the unapplied changes in the cache.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TUpdateMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TUpdateMode</type> indicates how to locate records so that they can be updated.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TUpdateMode</type> is the type of the UpdateMode property. UpdateMode specifies how the records are located when the ApplyUpdates method is called. <type namespace="DRIntf">TUpdateMode</type> includes the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>upWhereAll</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>All columns (fields) are used to locate the record.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>upWhereChanged</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Only key field values and the original value of fields that have changed are used to find the record.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>upWhereKeyOnly</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Only key fields are used to find the record.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TUpdateKind">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TUpdateKind</type> defines the values for the UpdateKind parameter of OnUpdateError<condition os="Windows"> and OnUpdateRecord</condition> event handlers.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <type namespace="DRIntf">TUpdateKind</type> type defines the possible values for the UpdateKind parameter of OnUpdateError <condition os="Windows">and OnUpdateRecord </condition>event handlers, as described in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ukModify</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The update to the record is a modification to the record's contents.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ukInsert</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The update is the insertion of a new record.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ukDelete</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The update is the deletion of a record.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TCustomConnection">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TCustomConnection</class> is the base class for components that connect datasets to a remote source of data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DB">TCustomConnection</class> as a base class for components that represent a remote source of the data contained in a dataset. This source can be a remote database server, the middle tier of a multi-tiered database application,<condition os="Windows"> an interface such as the one used by ActiveX Data Objects (ADO),</condition> or any other driver that provides the information represented in a dataset. <class namespace="DB">TCustomConnection</class> introduces:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Methods for connecting to and disconnecting from the source of data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Login support for providing a user name and password when establishing a connection.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Properties for keeping track of the datasets that use the connection component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not create instances of <class namespace="DB">TCustomConnection</class>. To add a component that represents the connection to a source of data, use a <class namespace="DB">TCustomConnection</class> descendant such as <condition os="Windows">TDatabase, TADOConnection, TSQLConnection, or one of the DataSnap connection components such as TDCOMConnection</condition>
               
               <condition os="Linux">TSQLConnection or TSOAPConnection</condition>.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">Create</method>s an instance of <method namespace="DB" class="TCustomConnection">TCustomConnection</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TCustomConnection">Create</method> to instantiate a connection component at runtime. Connection components added to forms or data modules at design time are created automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Owner parameter specifies another component (usually a form or data module) that is responsible for freeing the connection component.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.DoConnect">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides the interface for a method that opens a connection.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Connected property uses <method namespace="DB" class="TCustomConnection">DoConnect</method> to establish a connection. Descendant classes override the <method namespace="DB" class="TCustomConnection">DoConnect</method> method to establish their connection as appropriate. As implemented in <method namespace="DB" class="TCustomConnection">TCustomConnection</method>, <method namespace="DB" class="TCustomConnection">DoConnect</method> does nothing.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.DoDisconnect">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides the interface for a method that terminates the connection.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Connected property uses <method namespace="DB" class="TCustomConnection">DoDisconnect</method> to close a connection. Descendant classes override the <method namespace="DB" class="TCustomConnection">DoDisconnect</method> method to drop a connection. As implemented in <method namespace="DB" class="TCustomConnection">TCustomConnection</method>, <method namespace="DB" class="TCustomConnection">DoDisconnect</method> does nothing.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Loaded">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Initializes the connection component after all objects in the form or data module have been loaded.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the protected <method namespace="DB" class="TCustomConnection">Loaded</method> method. It is called automatically after the form or data module that contains the connection component has loaded all its owned objects. <method namespace="DB" class="TCustomConnection">TCustomConnection</method> overrides the inherited method to establish a connection if the Connected property is true.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.RegisterClient">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Registers an object that uses the connection component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">RegisterClient</method> is used internally to associate objects with the connection component. Registered components can supply an event handler that responds when the connection is created or terminated.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Client is the object to register. If Client is a dataset, it is added to the DataSets property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Event is an event handler that is called after the connection is established or before it is terminated.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Datasets call this method when they start using the connection component. For <condition os="Windows">BDE-enabled datasets, ADO datasets, and </condition>dbExpress datasets, this is when they are activated. For client datasets, this is when the RemoteServer property is assigned.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SendConnectEvent">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs all registered clients that use the connection component when a connection is opened or closed.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">SendConnectEvent</method> is used internally to ensure that registered clients are informed when their connection is opened or closed. It is called automatically when the Connected property changes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">SendConnectEvent</method> iterates through all registered clients. For each client that supplied an event handler to the RegisterClient method, <method namespace="DB" class="TCustomConnection">SendConnectEvent</method> calls that event handler to inform the client that a connection has just been opened (when Connecting is true) or that the connection is about to close (when Connecting is false). If the client is a dataset, it is informed about the change even if it did not supply an event handler to RegisterClient.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.UnRegisterClient">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes a registered client so that it is no longer associated with the connection component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">UnRegisterClient</method> is used internally to remove objects from the internal list of objects that are informed when a connection is created or terminated.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Client is the object that is removed from the list. It should be an object that was previously registered by a call to RegisterClient. If Client is a dataset, it is removed from the DataSets property list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Datasets call this method when they stop using the connection component. For <condition os="Windows">BDE-enabled datasets, ADO datasets, and </condition>dbExpress datasets, this is when they are deactivated. For client datasets, this is when the RemoteServer property is changed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Open">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">Open</method>s the connection.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TCustomConnection">Open</method> to establish a connection to the remote source of database information. <method namespace="DB" class="TCustomConnection">Open</method> sets the Connected property to true.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Close">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">Close</method>s the connection.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TCustomConnection">Close</method> to disconnect from the remote source of database information. Before the connection component is deactivated, all associated datasets are closed. Calling <method namespace="DB" class="TCustomConnection">Close</method> is the same as setting the Connected property to false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In most cases, closing a connection frees system resources allocated to the connection.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If a previously active connection is closed and then reopened, any associated datasets must be individually reopened; reopening the connection does not automatically reopen associated datasets.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">Destroy</method>s the instance of a connection component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DB" class="TCustomConnection">Destroy</method> directly in an application. Instead, call Free, which verifies that the reference to the connection component is not nil before calling <method namespace="DB" class="TCustomConnection">Destroy</method>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCustomConnection">Destroy</method> closes all active datasets and closes its connection before freeing all internal resources.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.StreamedConnected">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the Connected property was true when the connection component was loaded from a stream.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TCustomConnection">StreamedConnected</property> is used internally to ensure that the connection component does not open a connection until all objects on the form or data module are loaded into memory. This property is set instead of the Connected property when loading the connection component. In the Loaded method, after all objects in the form or data module have been loaded into memory, the value of <property namespace="DB" class="TCustomConnection">StreamedConnected</property> is used to set the Connected property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Connected">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether a connection has been established to the remote source of data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TCustomConnection">Connected</property> to true to open the connection. Set <property namespace="DB" class="TCustomConnection">Connected</property> to false to terminate the connection. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="DB" class="TCustomConnection">Connected</property> to true generates a BeforeConnect event, calls the protected DoConnect method to establish the connection, and generates an AfterConnect event. In addition, when setting <property namespace="DB" class="TCustomConnection">Connected</property> to true, <property namespace="DB" class="TCustomConnection">TCustomConnection</property> may display a login dialog, depending on the value of LoginPrompt. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="DB" class="TCustomConnection">Connected</property> to false generates a BeforeDisconnect event, calls the protected DoConnect method to drop the connection, and generates an AfterDisconnect event.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When deriving custom connection components from <property namespace="DB" class="TCustomConnection">TCustomConnection</property>, override Get<property namespace="DB" class="TCustomConnection">Connected</property> to return true when a connection is established, and override DoConnect and DoDisconnect to create and drop the connection.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSets">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the datasets currently using this connection component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TCustomConnection">DataSets</property> to access the datasets that are currently using the connection component. Depending on the <property namespace="DB" class="TCustomConnection">TCustomConnection</property> descendant, <property namespace="DB" class="TCustomConnection">DataSets</property> may include only the active datasets that use the connection component (as is the case with <condition os="Windows">TDatabase and </condition>TSQLConnection), or it may list all datasets, regardless of whether they are active (as is the case with <condition os="Windows">TADODatabase and DataSnap connection components</condition>
                     
               <condition os="Linux">TSOAPConnection</condition>). If <property namespace="DB" class="TCustomConnection">DataSets</property> includes only active datasets, its value changes when datasets are opened and closed.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If a client dataset with an internal provider (for example TSQLClientDataSet<condition os="Windows"> or TBDEClientDataSet</condition>) uses the connection component to connect to a database server, <property namespace="DB" class="TCustomConnection">DataSets</property> lists the internal dataset that the client dataset creates to access data, not the client dataset itself.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSetCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of datasets associated with the connection component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TCustomConnection">DataSetCount</property> to determine the number of datasets listed by the DataSets property. Depending on the <property namespace="DB" class="TCustomConnection">TCustomConnection</property> descendant, DataSets may include only the active datasets that use the connection component (as is the case with <condition os="Windows">TDatabase and </condition>TSQLConnection), or it may list all datasets, regardless of whether they are active (as is the case with <condition os="Windows">TADODatabase and DataSnap connection components</condition>
                     
               <condition os="Linux">TSOAPConnection</condition>). If DataSets includes only active datasets, the value of <property namespace="DB" class="TCustomConnection">DataSetCount</property> changes when datasets are opened and closed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TCustomConnection">DataSetCount</property> as an upper bound when iterating through the DataSets property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.LoginPrompt">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether a login dialog appears immediately before opening a new connection.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TCustomConnection">LoginPrompt</property> to true to provide login support when establishing a connection. <property namespace="DB" class="TCustomConnection">LoginPrompt</property> controls two things: the occurrence of the OnLogin event, and the appearance of a default login dialog that prompts users for a name and password when you include DBLogDlg.hpp in your unit (C++) or add DBLogDlg to your uses clause (Delphi). When the OnLogin event occurs and when the default login dialog appears depend on the type of connection component:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> For <condition os="Windows">TDatabase, TIBDatabase, and </condition>TSQLConnection, the dialog appears after the BeforeConnect event and before the AfterConnect event, unless you supply an OnLogin event handler. If there is an OnLogin event handler, that event occurs in place of the login dialog, and there is no need to include DBLogDlg.hpp in your unit (C++) or add DBLogDlg to your uses clause (Delphi). If correct values for the user name and password are not supplied in the dialog or by the OnLogin event handler, the connection fails. The OnLogin event does not fire unless <property namespace="DB" class="TCustomConnection">LoginPrompt</property> is set to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows"> For TADOConnection components, the dialog appears after the OnWillConnect event and before the BeforeConnect event. If there is an OnLogin event handler, that event occurs after the login dialog. If you do not include DBLogDlg.hpp in your unit (C++) or add DBLogDlg to your uses clause (Delphi), the OnLogin event occurs but there is no default login dialog. If correct values for the user name and password are not supplied in the dialog or by the OnLogin event handler, the connection fails. The OnLogin event does not fire unless <property namespace="DB" class="TCustomConnection">LoginPrompt</property> is set to true.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> For <condition os="Windows">DataSnap</condition>
                     
               <condition os="Linux">SOAP</condition> connection components, the dialog appears after the OnGetUsername event and before the BeforeConnect, AfterConnect, and OnLogin events. If the user cancels from the login dialog, no attempt is made to open a connection.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TCustomConnection">LoginPrompt</property> is false, the application must supply user name and password values programmatically:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For TDatabase, the user name and password can be supplied as USER NAME and PASSWORD parameters in the Params property.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For TADOConnection, the user name and password can be supplied as the ConnectionString property.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For TSQLConnection, the user name, password, and database can be supplied as UserName, Password, and Database parameters in the Params property, or provided as connection parameters associated with the connection name.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For <condition os="Windows">DataSnap</condition>
                     
               <condition os="Linux">SOAP</condition> connection components, there is no built-in use for the user name and password supplied by the login dialog.<condition os="Windows"> (The UserName and Password properties of TWebConnection are unrelated).</condition>
                  
            </para>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Storing hard-coded user name and password entries as property values or in code for an OnLogin event handler can compromise server security.</para>
                  
            </warning>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterConnect">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after a connection is established.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TCustomConnection">AfterConnect</event> event handler to take application-specific actions immediately after the connection component opens a connection to the remote source of database information.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeConnect">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs immediately before establishing a connection.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TCustomConnection">BeforeConnect</event> event handler to take application-specific actions before the connection component opens a connection to the remote source of database information.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterDisconnect">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after the connection closes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TCustomConnection">AfterDisconnect</event> event handler to take application-specific actions after the connection component drops a connection.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeDisconnect">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs immediately before the connection closes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TCustomConnection">BeforeDisconnect</event> event handler to take application-specific actions before dropping a connection.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnLogin">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when a communication channel opens to the server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <event namespace="DB" class="TCustomConnection">OnLogin</event> occurs when connections are opened if the LoginPrompt property is true. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For <condition os="Windows">DataSnap</condition>
                     
               <condition os="Linux">SOAP</condition> connection components, the following sequence of events occurs when opening a connection to an application server:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1. An OnGetUsername event occurs, where the application can supply an initial user name for the login dialog.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2. The login dialog appears, where the user can supply a user name and password.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3. A BeforeConnect event occurs, the connection is opened, and an AfterConnect event occurs.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4. The <event namespace="DB" class="TCustomConnection">OnLogin</event> event occurs, where you can write code to log in to the application server using the username and password that were provided in the remote login dialog.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">Do not use the <event namespace="DB" class="TCustomConnection">OnLogin</event> event if the connection component provides a different scheme for logging in. For example, TWebConnection uses the Username and Password properties instead.</condition>
                     
               </para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For ADO connection components, the following sequence of events occurs when opening a connection to an application server:</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">1. A BeforeConnect event occurs.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">2. An OnWillConnect event occurs, where the application can supply an initial user name and password for the login dialog, as well as the connection options and status.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">2. The login dialog appears, where the user can supply a user name and password.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">3. The <event namespace="DB" class="TCustomConnection">OnLogin</event> event occurs, where you can write code to respond to the user-supplied values. (For example, you could convert an application-specific user name and password to database user name and password).</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">4. The connection is opened, and an AfterConnect event occurs.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">Some </condition>
                        
                  <condition os="Linux">C</condition>
                        
                  <condition os="Windows">c</condition>onnection components that do not connect to an application server in a multitiered database application replace the <event namespace="DB" class="TCustomConnection">OnLogin</event> event defined in <event namespace="DB" class="TCustomConnection">TCustomConnection</event> with a different event that occurs before a connection is established.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TNamedItem">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TNamedItem</class> is the base class for definitions used by datasets. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="Db">TNamedItem</class> as a base class when defining a class for definitions that are maintained in a collection by a dataset.  Sets of <class namespace="Db">TNamedItem</class> objects are maintained by a descendant of TDefCollection that is specific to the type of object defined.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Definition objects are used by datasets to specify the properties of database entities such as fields or indexes.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Name">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of the database entity defined by the T<property namespace="Db" class="TNamedItem">Name</property>dItem object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TNamedItem">Name</property> to specify the name that the underlying database table uses to refer to the defined object. For example, if the T<property namespace="Db" class="TNamedItem">Name</property>dItem object is a field definition, the value of <property namespace="Db" class="TNamedItem">Name</property> is the name of the corresponding field in the underlying database table.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">For dBASE maintained indexes, <property namespace="Db" class="TNamedItem">Name</property> refers to the tag name of the index. For Paradox tables, the <property namespace="Db" class="TNamedItem">Name</property> of the primary key is an empty string.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDefCollection">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TDefCollection</class> holds the definition objects (TNamedItem) that represent the specifications for database entities such as fields or indexes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TDefCollection</class> is used as a base class for collections of definition objects such as index or field definitions. <condition os="Windows">TTable objects and </condition>TClientDataSet objects use these definition objects to specify the attributes of a database entity before creating the underlying <condition os="Windows">table or </condition>dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties and methods of <class namespace="Db">TDefCollection</class> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access a specific definition object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add or delete definition objects from the list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Find out how many definition objects are defined.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copy a set of definitions to another dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Find">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Locates a definition object in the Items array from its name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TDefCollection">Find</method> to obtain information about a particular definition object. Specify the name of the definition object as the value of the Name parameter.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IndexOf">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Finds the index number of a definition in the Items array from its name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <method namespace="Db" class="TDefCollection">IndexOf</method> method to locate the position of a definition in the Items property array. <method namespace="Db" class="TDefCollection">IndexOf</method> returns a value from zero (the first position) to Count - 1. Specify the name of the definition as the Name parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Items contains no definition with the specified Name, the return value is -1.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Instantiates a <method namespace="Db" class="TDefCollection">TDefCollection</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="Db" class="TDefCollection">Create</method> method. <method namespace="Db" class="TDefCollection">TDefCollection</method> objects are created by the dataset that uses them to manage definition objects. The ADataset parameter specifies the dataset that creates the <method namespace="Db" class="TDefCollection">TDefCollection</method> object.  It becomes the value of the Dataset property. The AOwner parameter indicates the object on whose behalf the definition is created. The AClass parameter specifies a descendant class of TNamedItem, and indicates the type of definition objects in the Items property array.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetItemNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fills a TStrings object with the names of all definitions in the list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TDefCollection">GetItemNames</method> to retrieve the names of all definitions managed by the <method namespace="Db" class="TDefCollection">TDefCollection</method> object. Pass an empty string list as the List parameter. <method namespace="Db" class="TDefCollection">GetItemNames</method> fills the string list with the names of all definitions.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the dataset that uses the <property namespace="Db" class="TDefCollection">TDefCollection</property> object to manage its definition objects.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TDefCollection">Dataset</property> to access the dataset that uses the definitions in the Items array.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Updated">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the definition objects in the Items array match the corresponding instantiated objects in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TDefCollection">Updated</property> to determine whether the definitions managed by the <property namespace="Db" class="TDefCollection">TDefCollection</property> object match the corresponding entities (fields or indexes) of the dataset.  <property namespace="Db" class="TDefCollection">Updated</property> is set to true when the definitions are retrieved from the dataset at design time, or when the definitions are used to create the corresponding entities in the dataset.  <property namespace="Db" class="TDefCollection">Updated</property> is set to false when the properties of the definition objects are changed.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldClass">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldClass</type> is the class type of a TField descendant.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <type namespace="DRIntf">TFieldClass</type> to specify the type of a TField descendant.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldAttribute">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldAttribute</type> and <type namespace="DRIntf">TFieldAttribute</type>s indicate various attributes of a field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldAttribute</type>s is a set that describes the attributes of a physical field in an underlying database table. It can contain zero or more of the following <type namespace="DRIntf">TFieldAttribute</type> values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>faHiddenCol</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Internal flag for hidden columns</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>faReadonly</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Indicates whether the physical field in the underlying table is read-only.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>faRequired</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Indicates whether a value for the physical field in the underlying table is required. </para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>faLink</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Internal flag for nested datasets.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>faUnNamed</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Internal use only. Indicates a TObjectField in a nested table that has no name associated with it.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>faFixed</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Indicates that the field has a fixed size.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldDef">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldDef</class> is a field definition that corresponds to a physical field of a record in a table underlying a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A <class namespace="Db">TFieldDef</class> object contains the definition of one field in a table. The definition for a field includes such attributes as the field's name, data type, and size. <class namespace="Db">TFieldDef</class> objects are typically used in collections of such objects, such as the FieldDefs property of the TDataSet component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">There are two primary reasons for working with <class namespace="Db">TFieldDef</class> objects:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To obtain information about field types in a dataset without opening the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To specify field definitions for a new table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When using an existing table, a field definition is automatically created for each field in the dataset that comes from the underlying database. Inspect the properties of <class namespace="Db">TFieldDef</class> to retrieve information about specific fields in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When creating new tables, such as with the <condition os="Windows">CreateTable method of TTableor the </condition>CreateDataSet method of TClientDataSet, <class namespace="Db">TFieldDef</class> objects supply the definitions for the new fields that will comprise the new table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A field definition has a corresponding TField object, but not all TField objects have a corresponding field definition. For example, calculated fields do not have field definition objects.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AddChild">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a new <method namespace="Db" class="TFieldDef">TFieldDef</method> object to the ChildDefs array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TFieldDef">AddChild</method> to add a new field definition for a child field of the <method namespace="Db" class="TFieldDef">TFieldDef</method> object's field. <method namespace="Db" class="TFieldDef">AddChild</method> returns the new field definition for the subfield.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Typically, applications never need to call <method namespace="Db" class="TFieldDef">AddChild</method> because you can't create tables that include object fields.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CreateField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a TField component that matches the specifications of the <method namespace="Db" class="TFieldDef">TFieldDef</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A dataset object calls <method namespace="Db" class="TFieldDef">CreateField</method> to create the field components from the field definition objects. Applications need never call <method namespace="Db" class="TFieldDef">CreateField</method> directly.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.HasChildDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the field of the <method namespace="Db" class="TFieldDef">TFieldDef</method> object has any child field definitions.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the <method namespace="Db" class="TFieldDef">TFieldDef</method> object defines an object field, such as TADTField or TArrayField, <method namespace="Db" class="TFieldDef">HasChildDefs</method> returns true.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFieldDef">Create</method>s and initializes a <method namespace="Db" class="TFieldDef">TFieldDef</method> instance.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call <method namespace="Db" class="TFieldDef">Create</method> directly. A <method namespace="Db" class="TFieldDef">TFieldDef</method> is created automatically by the dataset for each field in an already existing table. When composing field definitions preparatory to creating a new dataset, the <method namespace="Db" class="TFieldDef">TFieldDef</method>s.AddFieldDef method (or the older <method namespace="Db" class="TFieldDef">TFieldDef</method>s.Add method) creates the needed instance of <method namespace="Db" class="TFieldDef">TFieldDef</method>.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Assign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies the properties of one field definition to another.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFieldDef">Assign</method> to copy a field definition. <method namespace="Db" class="TFieldDef">Assign</method> checks whether the Source parameter specifies another field definition, and if so, copies the values of the Name, DataType, Size, Precision, and InternalCalcField properties. Note that the value of FieldNo is not changed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the source is not a field definition, <method namespace="Db" class="TFieldDef">Assign</method> calls the inherited method, which assigns properties from any object that specifies how to copy to a field definition in its <method namespace="Db" class="TFieldDef">Assign</method>To method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFieldDef">Destroy</method>s the <method namespace="Db" class="TFieldDef">TFieldDef</method> instance and frees its memory.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFieldDef">Destroy</method> calls the inherited <method namespace="Db" class="TFieldDef">Destroy</method> method, and then frees and child field definition objects.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application will seldom need to destroy a <method namespace="Db" class="TFieldDef">TFieldDef</method> object using this method. Instead, call the Free method, inherited from TObject.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldClass">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines the class of the field object that corresponds to this field definition object. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect the read-only <property namespace="Db" class="TFieldDef">FieldClass</property> property to find out the class of field object to which this field definition corresponds. The <property namespace="Db" class="TFieldDef">FieldClass</property> is determined by the DataType of the field. For example, if the DataType is ftString, the <property namespace="Db" class="TFieldDef">FieldClass</property> is TStringField (Delphi) or __classid(TStringField) (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The field object created from a field definition by the CreateField method is an instance of the <property namespace="Db" class="TFieldDef">FieldClass</property>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldNo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the physical field number used to reference the field. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFieldDef">FieldNo</property> to find out where the physical field the field definition references is in the set of fields in the table. For example, if the value of <property namespace="Db" class="TFieldDef">FieldNo</property> is 2, then the field is the second field in the underlying database table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When adding field definitions to a dataset, set <property namespace="Db" class="TFieldDef">FieldNo</property> to specify the location at which to create the field.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.InternalCalcField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines if the field is calculated by the underlying database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="Db" class="TFieldDef">InternalCalcField</property> to find out if the field represents a value provided by the underlying database but is not a field in the physical database table. Internally calculated fields are calculated by SQL servers<condition os="Windows"> or the Borland Database Engine in a live query view</condition> and stored in the dataset like data fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For example, in the following SQL statement, the dataset includes a field for the calculated value ONHAND * COST. </condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SELECT PartNo, Description, OnHand, Cost, (OnHand * Cost)
FROM PARTS</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">When the TQuery object has its RequestLive property set to true, the field definition for that calculated value will have <property namespace="Db" class="TFieldDef">InternalCalcField</property> set to true.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TFieldDef">InternalCalcField</property> is a read-only property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ParentDef">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="Db" class="TFieldDef">ParentDef</property> property references the parent field definition for the field definition, if it exists.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the <property namespace="Db" class="TFieldDef">TFieldDef</property> object is the field definition of the child field of an object field, such as an ADT field or an array field, then <property namespace="Db" class="TFieldDef">ParentDef</property> references the parent object's field definition. If the <property namespace="Db" class="TFieldDef">TFieldDef</property> object does not define the child field of an object field, <property namespace="Db" class="TFieldDef">ParentDef</property> is nil (Delphi) or NULL (C++)..</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>You can't create tables that contain object fields. <property namespace="Db" class="TFieldDef">ParentDef</property> is only used in field definitions that reflect an existing dataset, not field definitions that are used to create a new dataset.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Required">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a value for the physical field in the underlying table is required. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFieldDef">Required</property> to find out if a field in a dataset must have a value. If <property namespace="Db" class="TFieldDef">Required</property> is true, the field must have a value. If <property namespace="Db" class="TFieldDef">Required</property> is false, the field can be left blank.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When adding field definitions to a dataset, set <property namespace="Db" class="TFieldDef">Required</property> to specify whether blank values for the new field should be prohibited.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Attributes">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies attributes of the field associated with the field def.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TFieldDef">Attributes</property> lists various attributes that are used to describe the role of the field that the <property namespace="Db" class="TFieldDef">TFieldDef</property> object defines.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>In Delphi, faReadonly value has the same name as a constant is in the SysUtils unit. If both the SysUtils and the Db units are used in your source files, you must disambiguate by specifying the unit to qualify the use of faReadonly. That is,write Db.faReadonly. In C++, this is not a problem because the constant in the SysUtils unit differs in case (faReadOnly).</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ChildDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the <property namespace="Db" class="TFieldDef">TFieldDef</property>s object that contains an array of child fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the field that the <property namespace="Db" class="TFieldDef">TFieldDef</property> object represents is an object field such as TADTField or TArrayField, child fields of the object field are stored in the <property namespace="Db" class="TFieldDef">TFieldDef</property>s array referenced by the <property namespace="Db" class="TFieldDef">ChildDefs</property> property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>You can't create tables that contain object fields. <property namespace="Db" class="TFieldDef">ChildDefs</property> is only used in field definitions that reflect an existing dataset, not field definitions that are used to create a new dataset.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines the type of a physical field. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFieldDef">DataType</property> to find out what type of data the field contains. When adding field definitions to a dataset, set <property namespace="Db" class="TFieldDef">DataType</property> to specify what type of field is being defined.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Precision">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of digits of accuracy used to store the field value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When defining a BCD field, set <property namespace="Db" class="TFieldDef">Precision</property> to the total number of digits stored for each field value. The value of <property namespace="Db" class="TFieldDef">Precision</property> is ignored unless DataType is ftBCD.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Size">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reports the size associated with the field in the physical database table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFieldDef">Size</property> to determine the size associated with the corresponding physical field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TFieldDef">Size</property> is meaningful only for a field definition object with one of the following TFieldType values: ftString, ftBCD, ftBytes, ftVarBytes, ftBlob, ftMemo or ftGraphic. For string and byte fields, <property namespace="Db" class="TFieldDef">Size</property> is the number of bytes reserved in the table for the field. For a BCD field, <property namespace="Db" class="TFieldDef">Size</property> is the number of digits following the decimal point. For a BLOB, memo, or graphic field, <property namespace="Db" class="TFieldDef">Size</property> is the number of bytes from the field's value that are stored in the actual database table.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldDefs</class> holds the field definition (TFieldDef) objects that represent the physical fields underlying a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Datasets use <class namespace="Db">TFieldDefs</class> to manage the field definitions they use to create field objects that correspond to fields in a database table. Every field definition listed by <class namespace="Db">TFieldDefs</class> has a corresponding TField object, but not all TField objects have a corresponding field definition. For example, calculated fields do not have field definitions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">TTable and </condition>TClientDataSet objects also use <class namespace="Db">TFieldDefs</class> when creating a new table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">With object field types, such as TADTField and TArrayField, there are two ways to represent the field definitions: hierarchically or flattened. When represented hierarchically, object field definitions contain a set of child definitions for the constituent subfields. When represented as a flattened set, child field definitions appear as siblings sequentially after the parent field definition.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldDefs</class> stores field definitions hierarchically. This is in contrast to TFieldDefList, which lists the child TFieldDef objects of object fields sequentially after the parent TFieldDef.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties and methods of <class namespace="Db">TFieldDefs</class> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access a specific field definition.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add or delete field definitions from the list (when creating new tables).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Find out how many fields are defined.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copy a set of field definitions to another dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AddFieldDef">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new field definition object and adds it to the Items property of this <method namespace="Db" class="TFieldDefs">TFieldDefs</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFieldDefs">AddFieldDef</method> to add field definitions when creating a client dataset's data<condition os="Windows"> or a database table</condition>. <method namespace="Db" class="TFieldDefs">AddFieldDef</method> returns the new TFieldDef object that is added to the collection of field definitions. After calling <method namespace="Db" class="TFieldDefs">AddFieldDef</method>, set the properties of the newly added TFieldDef object to specify the name, type, and size of field that should be created.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TFieldDefs">AddFieldDef</method> is only valid in the context of creating field definitions for a table to be created with a subsequent call to the <condition os="Windows">CreateTable</condition>
                        
                  <condition os="Windows"> or </condition>CreateDataSet method. It cannot be used to add fields to an already-existing table.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Find">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a field definition, given the name of the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFieldDefs">Find</method> to obtain information about a particular field definition. Specify the name of the field as the value of the Name parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If no matching field is found, <method namespace="Db" class="TFieldDefs">Find</method> raises an exception. The IndexOf method (inherited from TDefCollection) can be used to determine if the field exists first before calling <method namespace="Db" class="TFieldDefs">Find</method>. If IndexOf returns a value greater than –1, the TFieldDef exists and <method namespace="Db" class="TFieldDefs">Find</method> can be used.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFieldDefs">Create</method>s an instance of <method namespace="Db" class="TFieldDefs">TFieldDefs</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not need to instantiate <method namespace="Db" class="TFieldDefs">TFieldDefs</method>. <method namespace="Db" class="TFieldDefs">TFieldDefs</method> objects are created automatically by dataset components. An example of such a default <method namespace="Db" class="TFieldDefs">TFieldDefs</method> object is the FieldDefs property of the TDataSet component or the ChildDefs property of a TFieldDef object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The AOwner parameter specifies the object that uses <method namespace="Db" class="TFieldDefs">TFieldDefs</method> to implement one of its properties (the dataset or field definition object).</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Update">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Refreshes the field definitions in the Items property array to reflect the current state of the physical fields underlying the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFieldDefs">Update</method> to refresh the field definitions when the structure of the underlying dataset may have changed. <method namespace="Db" class="TFieldDefs">Update</method> updates the field definitions without opening the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Before updating, the <method namespace="Db" class="TFieldDefs">Update</method>d property is checked to determine if the list is already up to date. You can force the list to be regenerated by setting the <method namespace="Db" class="TFieldDefs">Update</method>d property to false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Add">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new field definition object and adds it to the Items property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFieldDefs">Add</method> is provided for backward compatibility.  The recommended way to add new field definitions to the Items property array is using the <method namespace="Db" class="TFieldDefs">Add</method>FieldDef method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFieldDefs">Add</method> uses the values passed in the Name, DataType, Size, and Required parameters and assigns them to the respective properties of the new field definition object.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a field definition with same name already exists, <method namespace="Db" class="TFieldDefs">Add</method> raises an EDatabaseError exception.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.HiddenFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether to show the extra hidden columns that may be included to ensure unique records.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">When the user performs a live query, the BDE returns extra hidden columns in the query result set. Similarly, p</condition>Providers sometimes include extra hidden columns in data packets. These extra columns ensure that each record contains enough information to locate the corresponding record in the underlying database tables.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="Db" class="TFieldDefs">HiddenFields</property> to true and calling <property namespace="Db" class="TFieldDefs">TFieldDefs</property>
                     
               <condition language="Delphi">.</condition>
                     
               <condition language="CBuilder">::</condition>Update allows these columns to be seen. <property namespace="Db" class="TFieldDefs">HiddenFields</property> is primarily for internal use.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the field definitions that describe each physical field in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFieldDefs">Items</property> to access a particular field definition. Specify the field definition to access with the Index parameter. Index is an integer identifying the field definition's position in the list of field definitions, in the range 0 to Count - 1.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, the following code displays the name of the first field definition in a label:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On Windows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Label1.Caption := Table1.FieldDefs.Items[0].DisplayName;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On cross-platform:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Label1.Caption := ClientDataSet1.FieldDefs.Items[0].DisplayName;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On Windows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Label1-&gt;Caption = Table1-&gt;FieldDefs-&gt;Items[0]-&gt;DisplayName;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On cross-platform:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Label1-&gt;Caption = ClientDataSet1-&gt;FieldDefs-&gt;Items[0]-&gt;DisplayName;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ParentDef">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">References the field definition of the parent field, if there is one.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When a <property namespace="Db" class="TFieldDefs">TFieldDefs</property> object represents the data members of an object field type (such as TADTField), <property namespace="Db" class="TFieldDefs">ParentDef</property> specifies the field definition for that object field. Otherwise, <property namespace="Db" class="TFieldDefs">ParentDef</property> is nil (Delphi) or NULL (C++).</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TIndexOptions">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TIndexOptions</type> describes the attributes of an index.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TIndexOptions</type> is a set of attributes that applies to a specific index. A <type namespace="DRIntf">TIndexOptions</type> value can include zero or more of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ixPrimary</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The index is the primary index of the table. (Not applicable to dBASE tables).</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ixUnique</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Each value in the index is unique; there are no duplicates. (Not applicable to all table types.)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ixDescending</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The index imposes a descending sort order. (Not applicable to all table types.)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ixExpression</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The index is based on a dBASE key expression. (Only applicable to dBASE tables).</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ixCaseInsensitive</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The index sorts records case insensitively. (Not applicable to all table types.)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ixNonMaintained</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The index is not automatically updated when the data is edited. (Not applicable to all table types.)</para>
                  
                  </td>
               
               </tr>
            
            </table>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Attempting to create an index using options that are not applicable to the table type causes AddIndex to raise an exception.</para>
            
            </warning>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">Not all table types support use of all of the above index options. Even within a particular table type, any given option may only be supported in certain versions of a table type. See the BDE Administrator or Database Explorer utility for information on local table levels.</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">dBASE tables only support primary indexes and true unique indexes when the table level is 7 or higher (concurrent with Visual dBASE 7). dBASE tables do not support case-insensitive or descending indexes at all. Use the ixExpression constant when the index is based on multiple fields or uses dBASE data manipulation language functions (that is, for expression indexes). The ixExpression constant is only applicable to dBASE tables. </condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">Paradox tables support the ixDescending for secondary indexes if the table level is 7 or higher and the ixUnique constant if the table level is 5 or higher. The ixDescending and ixCaseInsensitive constants are not applicable to primary indexes.</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For SQL-based table types, see the vendor-supplied documentation for the particular database system for details on what index options are applicable.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TIndexDef">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="db">TIndexDef</class> describes an index in a database table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties and methods of an index definition to<condition language="Delphi">:</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set the attributes of a new index in a table created with <condition os="Windows">TTable</condition>
               
               <condition language="Delphi" os="Windows">.</condition>
               
               <condition language="CBuilder" os="Windows">::</condition>
               
               <condition os="Windows">CreateTable or </condition>TClientDataSet<condition language="Delphi">.</condition>
               
               <condition language="CBuilder">::</condition>CreateDataSet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determine the name of an index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identify the fields that make up the index<condition os="Windows">, or the dBASE expression that orders the index</condition>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determine the characteristics of the index.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>you cannot use <class namespace="db">TIndexDef</class> objects in a dataset component's IndexDefs property to add indexes to already existing tables. To do that, use methods such as <condition os="Windows">TTable</condition>
                  
                  <condition language="Delphi" os="Windows">.</condition>
                  
                  <condition language="CBuilder">::</condition>
                  
                  <condition os="Windows">AddIndex and </condition>TClientDataSet<condition language="Delphi">.</condition>
                  
                  <condition language="CBuilder">::</condition>AddIndex.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="db" class="TIndexDef">Create</method>s an instance of <method namespace="db" class="TIndexDef">TIndexDef</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not explicitly create index definition objects. A <method namespace="db" class="TIndexDef">TIndexDef</method> is created automatically by the dataset for each existing index of the table. When creating new indexes, use the <method namespace="db" class="TIndexDef">TIndexDef</method>s.AddIndexDef method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Assign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies the properties of one index definition to another.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="db" class="TIndexDef">Assign</method> to copy another index definition. <method namespace="db" class="TIndexDef">Assign</method> checks whether the ASource parameter is another index definition, and, if so, copies the values of the Options, Name, Source, Expression, and Fields properties.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the source is not an index definition, <method namespace="db" class="TIndexDef">Assign</method> calls the inherited (Delphi) or parent class's (C++) method, which assigns properties from any object that specifies how to copy to an index definition in its <method namespace="db" class="TIndexDef">Assign</method>To method.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldExpression">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides access to either a list of field names or an index expression.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="db" class="TIndexDef">FieldExpression</property> provides access to the private data member on <property namespace="db" class="TIndexDef">TIndexDef</property> which contains either a list of field names or an index expression. This data member is used to return the value for the Fields property or the Expression property depending on whether ixExpression is in Options.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Linux">This property is only used in the Windows product, where there are components that can represent dBASE tables. </condition>
                     
               <condition os="Windows">This property is used by TBDEDataSet but normally d</condition>
                     
               <condition os="Linux">D</condition>evelopers should use the Fields or Expression properties instead.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CaseInsFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies which fields of the index are case-insensitive.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="db" class="TIndexDef">CaseInsFields</property> to a string that lists the names of fields in the index, separated by semicolons. The ordering imposed by the index on the fields specified in <property namespace="db" class="TIndexDef">CaseInsFields</property> is case-insensitive. Fields in the index definition but not in the <property namespace="db" class="TIndexDef">CaseInsFields</property> list use case sensitive ordering (the default for the database type). It is possible that a single index can have fields using both case-insensitive and case-sensitive ordering.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For a field to be included in <property namespace="db" class="TIndexDef">CaseInsFields</property>, the field must be included in the fields on which the index is based. These fields are specified in the Fields property of the <property namespace="db" class="TIndexDef">TIndexDef</property> object.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">Not all database servers support both case-insensitive and case-sensitive field orderings in the same index. Consult the documentation for the particular database server used to determine whether this is actually supported. Some database systems require an index be designated case-insensitive as a whole (all of its base fields).</condition>
                     
               </para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">In the example below, the <property namespace="db" class="TIndexDef">CaseInsFields</property> property is given a list of two table fields for the index being created: LastName and Company. </condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">with Table1 do begin
  ...
  with IndexDefs do begin
    with AddIndexDef do begin
      Name := 'MultiIndex'
      Fields := 'LastName;Company;State'
      Options := [ixUnique];
    end;
    Items[IndexDefs.Count – 1].CaseInFields := 'LastName;Company';
  end;
  ...
  CreateTable;
end;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">  ...</condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  Table1-&gt;IndexDefs-&gt;Add("MultiIndex", "LastName;Company;State",
    TIndexOptions() &lt;&lt; ixUnique);
  Table1-&gt;IndexDefs-&gt;Items[Table1-&gt;IndexDefs-&gt;Count-1]-&gt;CaseInsFields = "LastName;Company";
  ...</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DescFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the fields of the index that are sorted in descending order.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="db" class="TIndexDef">DescFields</property> to a string that lists the names of fields in the index, separated by semicolons. The ordering imposed by the index on the fields specified in <property namespace="db" class="TIndexDef">DescFields</property> is descending. Fields in the index definition but not in the <property namespace="db" class="TIndexDef">DescFields</property> list use the default ascending order. It is possible for a single index to have fields using both ascending and descending ordering.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For a field to be included in <property namespace="db" class="TIndexDef">DescFields</property>, the field must be included in the fields on which the index is based. These fields are specified in the Fields property of the <property namespace="db" class="TIndexDef">TIndexDef</property> object.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">Not all database servers support both ascending and descending field orderings in the same index. Consult the documentation for the particular database server to determine whether this is actually supported.</condition>
                     
               </para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">In the example below, the <property namespace="db" class="TIndexDef">DescFields</property> property is given a list of two table fields for the index being created: TransDate and Company. </condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">with Table1 do begin
  ...
  with IndexDefs do begin
    with AddIndexDef do begin
      Name := 'MultiIndex'
      Fields := 'TransDate;Company;State'
      Options := [ixUnique];
    end;
    Items[IndexDefs.Count – 1].DescInFields := 'TransDate;Company';
  end;
  ...
  CreateTable;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">...
Table1-&gt;IndexDefs-&gt;Add("MultiIndex","TransDate;Company;State",
  TIndexOptions() &lt;&lt; ixUnique);
Table1-&gt;IndexDefs-&gt;Items[Table1-&gt;IndexDefs-&gt;Count-1]-&gt;DescFields = "TransDate;Company";
...</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Expression">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains a dBASE key expression. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="db" class="TIndexDef">Expression</property> to learn the key expression of a dBASE expression index.<condition os="Linux"> This property is only used on the Windows product, where there are components that can represent dBASE tables. </condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">A key expression for a dBASE table is a field name, or a combination of field names, functions, and operators that specifies how the index orders records in the table. If the table is not a dBASE table or the index is not an expression index, <property namespace="db" class="TIndexDef">Expression</property> is an empty string and the Fields property contains the field(s) for the index. When the index is a dBASE expression index, <property namespace="db" class="TIndexDef">Expression</property> contains a value and the Fields property contains an empty string.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">For more information about key expressions, see your dBASE documentation.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Fields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the fields that comprise the index.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When creating an index, set <property namespace="db" class="TIndexDef">Fields</property> to a list of fields separated by semicolons (no semicolon is required if there is only one field in the index). The order of field names in the string determines the order of fields in the index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When inspecting already-existing indexes, read <property namespace="db" class="TIndexDef">Fields</property> to determine the fields that make up the index. The string returned can be either the names of the fields, or the numbers of the field. When numbers are used, the numbers correspond to the physical field numbers in the table. Multiple fields in the string are separated by semicolons (;).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows"/>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Options">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Describes the characteristics of the index. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When creating a new index, use <property namespace="db" class="TIndexDef">Options</property> to specify the attributes of the index. <property namespace="db" class="TIndexDef">Options</property> can contain zero or more of the TIndexOption constants ixPrimary, ixUnique, ixDescending, ixCaseInsensitive, and ixExpression.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When inspecting the definitions of existing indexes, read <property namespace="db" class="TIndexDef">Options</property> to determine the option(s) used to create the index.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">Different database drivers may support only a subset of these options. For example, with dBASE tables, ixCaseInsensitive is not supported. Including an option that is not valid for a table will raise an exception.</condition>
                     
               </para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Primary indexes are, by definition unique. If setting the <property namespace="db" class="TIndexDef">Options</property> value ixPrimary, you need not also use ixUnique.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Source">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the name of a dBASE maintained index.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">When the table uses dBASE .MDX indexes, Name indicates the index tag name and <property namespace="db" class="TIndexDef">Source</property> is the name of the index file. <property namespace="db" class="TIndexDef">Source</property> is applicable to dBASE table indexes only.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Linux">
                        
                  <property namespace="db" class="TIndexDef">Source</property> is not used on the Linux platform. This property is available for the Windows product, where there are components that represent dBASE tables.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.GroupingLevel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the depth of grouping provided by the index.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Grouping level specifies the level of grouping information maintained by the index. Grouping is only supported on client datasets.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TIndexDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TIndexDefs</class> holds the list of available index definitions for a table. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">TTable and </condition>TClientDataSet components use <class namespace="Db">TIndexDefs</class> to implement their IndexDefs property. These index definitions can be used to obtain information about the indexes defined for the underlying data or, when the component is used to create a table, to create the indexes of that table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties and methods of <class namespace="Db">TIndexDefs</class> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access a specific index definition.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determine how many index definitions this <class namespace="Db">TIndexDefs</class> object contains.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add or delete index definitions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copy all index definitions from one <class namespace="Db">TIndexDefs</class> to another.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>you cannot use TIndexDef objects in a dataset component's IndexDefs property to add indexes to already existing tables. To do that, use methods such as AddIndex.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AddIndexDef">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new index definition object and adds it to the Items property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TIndexDefs">AddIndexDef</method> to add index definitions when creating a database table. <method namespace="Db" class="TIndexDefs">AddIndexDef</method> returns the new TIndexDef object that was added to the IndexDefs collection of index definitions. After calling <method namespace="Db" class="TIndexDefs">AddIndexDef</method>, set the properties of the newly added TIndexDef object to specify the name, type, and options of index that will be created.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TIndexDefs">AddIndexDef</method> is only valid in the context of creating index definitions for a table to be created with a subsequent call to the <condition os="Windows">CreateTable</condition>
                        
                  <condition os="Windows"> or </condition>CreateDataSet method. It cannot be used to add indexes to an already-existing table.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Find">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the TIndexDef object for the index definition with a specified name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TIndexDefs">Find</method> to obtain information about a particular index definition. Specify the name of the index as the value of the Name parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TIndexDefs">Find</method> raises an EDatabaseError exception if there is no index definition with the given name.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To locate an index definition based on the indexed fields rather than the name of the index, use the <method namespace="Db" class="TIndexDefs">Find</method>IndexForFields method.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FindIndexForFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Locates an index definition in the Items array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TIndexDefs">FindIndexForFields</method> to search for the index that starts with the fields specified in the Fields parameter. If the index is constructed using more than one field, separate the fields with semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TIndexDefs">FindIndexForFields</method> returns the index definition that exactly matches the fields specified (in the order specified), if one exists. If no exact match is found, <method namespace="Db" class="TIndexDefs">FindIndexForFields</method> returns the first index that begins with the indicated fields. If no match is found, <method namespace="Db" class="TIndexDefs">FindIndexForFields</method> raises an EDatabaseError exception.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TIndexDefs">FindIndexForFields</method> can only locate ascending indexes. To include descending indexes in the search, use GetIndexForFields.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To restrict the search to case-insensitive indexes, use the GetIndexForFields method.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetIndexForFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Locates an index definition in the Items array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TIndexDefs">GetIndexForFields</method> to search for the index that starts with the fields specified in the Fields parameter. If more than one field comprises the index, separate the fields with semicolons. Set the CaseInsensitive parameter to true to restrict the search to only the case insensitive indexes in the Items array.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TIndexDefs">GetIndexForFields</method> returns the index definition that exactly matches the specified fields in the order specified, if it exists. If no exact match is found, <method namespace="Db" class="TIndexDefs">GetIndexForFields</method> returns the first index that begins with the indicated fields. If no match can be found, <method namespace="Db" class="TIndexDefs">GetIndexForFields</method> returns nil (Delphi) or NULL (C++).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When CaseInsensitive is true, descending indexes are considered even if they are case-sensitive.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TIndexDefs">Create</method>s an instance of <method namespace="Db" class="TIndexDefs">TIndexDefs</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not instantiate <method namespace="Db" class="TIndexDefs">TIndexDefs</method>. <method namespace="Db" class="TIndexDefs">TIndexDefs</method> objects are created automatically by the dataset that uses them (even if the dataset currently has no indexes).</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Update">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Refreshes index definitions in Items to reflect the current state of the dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TIndexDefs">Update</method> when the set of indexes for the dataset may have changed. <method namespace="Db" class="TIndexDefs">Update</method> refreshes the index definitions without opening the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Add">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new index definition and adds it to the Items property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TIndexDefs">Add</method> is provided for backward compatibility. The recommended way to add new index definitions before creating a table is to use the <method namespace="Db" class="TIndexDefs">Add</method>IndexDef method. To add an index to an existing table, use the <method namespace="Db" class="TIndexDefs">Add</method>Index method of the dataset instead. To change the array of indexes when a new index has been added to the dataset, use the Update method instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TIndexDefs">Add</method> creates an index definition and assigns the values passed in the Name, Fields, and Options parameters to the TIndexDef properties of the same names. If an index definition with same name already exists, <method namespace="Db" class="TIndexDefs">Add</method> raises an EDatabaseError exception.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the index definitions that describe each index of a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TIndexDefs">Items</property> to access a particular index definition. Specify the index definition to access with the Index parameter. Index identifies the index definition's position in the list of index definitions, in the range 0 to Count - 1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">IdxFldsVar := Table1.IndexDefs.Items[i].Fields;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">IdxFldsVar = Table1-&gt;IndexDefs-&gt;Items[i]-&gt;Fields;</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFlatList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFlatList</class> is an abstract base class for objects that represent a flattened list of fields or field definitions.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Derive a class from <class namespace="Db">TFlatList</class> to store and manipulate a list of fields or field definitions in an iterative manner.  When fields are stored iteratively, the child fields of object fields such as ADTs and Arrays, appear as siblings after the parent object field rather than nested within the parent field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <class namespace="Db">TFlatList</class> include TFieldList and TFieldDefList.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFlatList</class> is a descendant of TStringList. It uses the string list to maintain its list of fields or field definitions, where the strings in the list are the field names and the associated objects are TField or TFieldDef objects.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFlatList">Create</method>s an instance of <method namespace="Db" class="TFlatList">TFlatList</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not call the <method namespace="Db" class="TFlatList">Create</method> method.  <method namespace="Db" class="TFlatList">TFlatList</method> objects are created by the dataset that uses them to manage information about its fields.  The ADataset parameter specifies the dataset that creates the <method namespace="Db" class="TFlatList">TFlatList</method> object.  It becomes the value of the Dataset property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Update">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Refreshes the strings and objects to reflect the current state of the physical fields underlying the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFlatList">Update</method> to refresh the fields or field definitions when the structure of the underlying dataset may have changed. <method namespace="Db" class="TFlatList">Update</method> updates the field names listed by Strings and the corresponding objects without opening the dataset.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the dataset to which the <property namespace="Db" class="TFlatList">TFlatList</property> object belongs.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check the value of the <property namespace="Db" class="TFlatList">DataSet</property> property to determine the dataset that uses the <property namespace="Db" class="TFlatList">TFlatList</property> object to manage information about its fields. Applications should not directly assign the <property namespace="Db" class="TFlatList">DataSet</property> property of a <property namespace="Db" class="TFlatList">TFlatList</property> object. It is assigned automatically when a <property namespace="Db" class="TFlatList">TFlatList</property> object descendant is created.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldDefList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldDefList</class> lists the field definition (TFieldDef) objects of a dataset in a flattened form.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldDefList</class> is used by a dataset to implement its FieldDefList property. This object lists field definitions in a flattened format.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">With object field types, such as TADTField and TArrayField, there are two ways to represent the field definitions: hierarchically or flattened. When represented hierarchically, object field definitions contain a set of child definitions for the constituent subfields. When represented as a flattened set, child field definitions appear as siblings sequentially after the parent field definition.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldDefList</class> stores the flattened field definitions of a dataset. This is a linear representation of the data, and is in contrast to TFieldDefs which has a hierarchical representation of the data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldDefList</class> is a descendant of TStringList. The strings in this string list are the names of fields. The objects that correspond to those strings are the TFieldDef objects.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FieldByName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a field definition object given its field name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFieldDefList">FieldByName</method> to obtain information about a particular field definition object. Specify the name of the field as the value of the Name parameter. If Name is not found, <method namespace="Db" class="TFieldDefList">FieldByName</method> raises an EDatabaseError exception with the error message "Field not found".</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TFieldDefList">FieldByName</method> differs from the Find method only when the named field definition is not in the list. When the field definition is not found, <method namespace="Db" class="TFieldDefList">FieldByName</method> raises an exception, while Find returns nil (Delphi) or NULL (C++).</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Find">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a field definition object given its field name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFieldDefList">Find</method> to obtain information about a particular field definition object. Specify the name of the field as the value of the Name parameter. If <method namespace="Db" class="TFieldDefList">Find</method> finds a field with a matching name, it returns the TFieldDef component for the specified Name. Otherwise it returns nil (Delphi) or NULL (C++).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TFieldDefList">Find</method> differs from the FieldByName method only when the named field definition is not in the list. When the field definition is not found, <method namespace="Db" class="TFieldDefList">Find</method> returns nil (Delphi) or NULL (C++), while FieldByName raises an exception.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the field definitions for the dataset associated with the <property namespace="Db" class="TFieldDefList">TFieldDefList</property> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TFieldDefList">FieldDefs</property> points to a internal list of field definitions for a dataset. A <property namespace="Db" class="TFieldDefList">TFieldDefList</property> with object field types, such as TADTField and TArrayField, lists child TFieldDef objects sequentially after the parent TFieldDef. </para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldList</class> lists the fields of a dataset, flattening out the structure of any object fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldList</class> is used by a dataset to implement its FieldList property. It lists the fields of the dataset in a flattened format.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">With object field types, such as TADTField and TArrayField, there are two ways to represent the field components: hierarchically or flattened. When represented hierarchically, object fields contain a set of child field components for the constituent subfields. When represented as a flattened set, child fields appear as siblings sequentially after the parent field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFieldList</class> is a descendant of TStringList. The strings in this string list are the names of fields. The objects that correspond to those strings are the TField objects.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FieldByName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a field, given its name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFieldList">FieldByName</method> to retrieve field information for a field when only the field's name is known. FieldName is the name of an existing field. <method namespace="Db" class="TFieldList">FieldByName</method> returns the TField component for the specified field. An application can access specific properties and methods of the field directly. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the specified field is not found, <method namespace="Db" class="TFieldList">FieldByName</method> raises an EDatabaseError exception. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TFieldList">FieldByName</method> differs from the Find method only when the named field is not in the list. When the field is not found, <method namespace="Db" class="TFieldList">FieldByName</method> raises an exception, while Find returns nil (Delphi) or NULL (C++).</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Find">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a field component given the field name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFieldList">Find</method> to determine if a specified field component is referenced in the <method namespace="Db" class="TFieldList">TFieldList</method> object. FieldName is the name of the field for which to search. If <method namespace="Db" class="TFieldList">Find</method> finds a field with a matching name, it returns the TField component for the specified field. Otherwise it returns nil (Delphi) or NULL (C++).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TFieldList">Find</method> differs from the FieldByName method only when the named field is not in the list. When the field is not found, <method namespace="Db" class="TFieldList">Find</method> returns nil (Delphi) or NULL (C++), while FieldByName raises an exception.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Fields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the fields in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFieldList">Fields</property> to obtain a pointer to a specific field component. The Index parameter indicates the index of the field, where 0 is the index of the first field, 1 is the index of the second field, and so on.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A <property namespace="Db" class="TFieldList">TFieldList</property> with object field types, such as TADTField and TArrayField, lists child TField objects sequentially after the parent TField. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFieldList">Fields</property> with the Count property to iterate through all of the fields in the list.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldKind">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldKind</type> indicates what type of information a field component represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldKind</type> can take one of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>fkData</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Field represents a physical field in a database table</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>fkCalculated</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Field is calculated in an OnCalcFields event handler</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>fkLookup</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Field is a lookup field. (Not implemented for fields on unidirectional datasets)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>fkInternalCalc</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Field is calculated but values are stored in the dataset.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>fkAggregate</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Field represents a maintained aggregate in a client dataset.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFields</class> holds the field (TField) objects that represent the physical fields underlying a dataset or an object field such as TADTField and TArrayField.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TFields</class> is used by a dataset to manage the field objects that correspond to fields in the database table and by object fields to manage child fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When TDataSet<condition language="Delphi">.</condition>
               
               <condition language="CBuilder">::</condition>ObjectView is true, the fields are stored hierarchically, meaning any child fields of an object field are referenced by the object field and do not appear sequentially after the object field in the Fields array. When TDataSet<condition language="Delphi">.</condition>
               
               <condition language="CBuilder">::</condition>ObjectView is false, the fields are stored sequentially, or flattened out, meaning any child fields of an object field are stored sequentially in the Fields array.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties and methods of <class namespace="Db">TFields</class> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access a specific field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add or delete persistent field components from the list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Find out how many fields there are.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FindField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a field given its field name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFields">FindField</method> to determine if a specified field component is referenced in the <method namespace="Db" class="TFields">TFields</method> object. FieldName is the name of the field for which to search. If <method namespace="Db" class="TFields">FindField</method> finds a field with a matching name, it returns the TField component for the specified field. Otherwise it returns nil (Delphi) or NULL (C++).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TFields">FindField</method> differs from the FieldByName method only when the named field is not in the list. When the field is not found, <method namespace="Db" class="TFields">FindField</method> returns nil (Delphi) or NULL (C++), while FieldByName raises an exception.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FieldByName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a field given its field name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFields">FieldByName</method> to retrieve field information for a field when only the field's name is known. FieldName is the name of an existing field. <method namespace="Db" class="TFields">FieldByName</method> returns the TField component for the specified field. If the field can not be found, an exception is raised.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the Fields array contains ADT fields, you can use <method namespace="Db" class="TFields">FieldByName</method> to access the subfields of those ADT fields. To access subfields, specify FieldName as the name of the subfield qualified by the name of the ADT field, as in the following:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">CityEdit.Text := Customer.FieldByName('Address.City').AsString;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">CityEdit-&gt;Text = Customer-&gt;FieldByName("Address.City")-&gt;AsString;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFields">FieldByName</method> is especially useful when you do not have access to the underlying table and cannot use persistent field components.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TFields">FieldByName</method> differs from the FindField method only when the named field is not in the list. When the field is not found, <method namespace="Db" class="TFields">FieldByName</method> raises an exception, while FindField returns nil (Delphi) or NULL (C++).</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FieldByNumber">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Finds a field based on a specified field number.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFields">FieldByNumber</method> to retrieve field information for a field given its field number. Note that the field number is the position of the field in the underlying database table, not the index of the field in the <method namespace="Db" class="TFields">TFields</method> object.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IndexOf">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Finds the index of a field object in the Fields array from the field object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFields">IndexOf</method> to get the index for a field in the Fields array. Specify the field as the Field parameter. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The first field in the array has index 0, the second field has index 1, and so on. If a field is not in the Fields array, <method namespace="Db" class="TFields">IndexOf</method> returns -1.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFields">Create</method>s an instance of <method namespace="Db" class="TFields">TFields</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not need to create a <method namespace="Db" class="TFields">TFields</method> object. These objects are created by the dataset or object field that uses them. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Add">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inserts a new field to the end of the Fields array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications do not normally call the <method namespace="Db" class="TFields">Add</method> method directly. When field objects are created, <method namespace="Db" class="TFields">Add</method> is called automatically by the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CheckFieldName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks if a field name already exists in the <method namespace="Db" class="TFields">TFields</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFields">CheckFieldName</method> checks for the field specified by FieldName in the Fields property array. If the field with the specified name is already listed, <method namespace="Db" class="TFields">CheckFieldName</method> raises an EDatabaseError exception with a duplicate field name error message.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CheckFieldNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks if fields exist in the <method namespace="Db" class="TFields">TFields</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFields">CheckFieldNames</method> checks for the set of fields specified by FieldNames in the Fields property array. FieldNames lists the names of the fields to check, separated by semicolons. If any of the fields in FieldNames are not listed, <method namespace="Db" class="TFields">CheckFieldNames</method> raises an EDatabaseError exception with a field not found error message.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Clear">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes all fields from the <method namespace="Db" class="TFields">TFields</method> object. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications do not normally call the <method namespace="Db" class="TFields">Clear</method> method directly. <method namespace="Db" class="TFields">Clear</method> empties the Fields property array, frees the memory used to store the array and sets the DataSet property to nil (Delphi) or NULL (C++).</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetFieldNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves a list of names for all fields in a fields object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TFields">GetFieldNames</method> to fill a list with the field names for all fields in the fields object. List is a TStrings descendant created and maintained by the application.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieving a list of field names is especially useful for applications that work with datasets whose field objects are created dynamically at runtime. By retrieving a list of field names, the application can be restricted to working only with fields that exist at runtime.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Remove">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes the reference to the Field parameter from the Fields array.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications do not normally call the <method namespace="Db" class="TFields">Remove</method> method directly. After a field is removed, all of the items that follow it are moved up in index position and the Count is reduced by one.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unlike the Clear method, which frees the field components when it removes them, <method namespace="Db" class="TFields">Remove</method> does not free the specified field component.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFields">Destroy</method>s an instance of <method namespace="Db" class="TFields">TFields</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly free a <method namespace="Db" class="TFields">TFields</method> object. <method namespace="Db" class="TFields">TFields</method> instances are freed by the dataset or object field that uses them.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TFields">Destroy</method> frees the memory used to store the list of fields, including the field components themselves.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Count">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of fields in the fields object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFields">Count</property> to determine the number of fields referenced by the <property namespace="Db" class="TFields">TFields</property> object.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the dataset to which a <property namespace="Db" class="TFields">TFields</property> object belongs.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check the value of the <property namespace="Db" class="TFields">DataSet</property> property to determine the dataset that is associated with the <property namespace="Db" class="TFields">TFields</property> object. Applications should not directly assign the <property namespace="Db" class="TFields">DataSet</property> property of a field. It is assigned automatically when the field is created from a TFieldDef object.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Fields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the field references that are managed by the T<property namespace="Db" class="TFields">Fields</property> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFields">Fields</property> to obtain a pointer to a specific field. The Index parameter indicates the index of the field, where 0 is the index of the first field, 1 is the index of the second field, and so on.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="Db" class="TFields">Fields</property> to assign the properties of another field component to one of the fields in the list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TFields">Fields</property> with the Count property to iterate through all of the fields in the list.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TProviderFlag">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TProviderFlag</type> and <type namespace="DRIntf">TProviderFlag</type>s indicate how a provider uses a field value when applying updates.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TProviderFlag</type>s is a set of <type namespace="DRIntf">TProviderFlag</type> values. The following table lists the <type namespace="DRIntf">TProviderFlag</type> values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>pfInUpdate</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The field can be included in UPDATE statements. (That is, it can be modified)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>pfInWhere</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The field is included in the WHERE clause when the provider's UpdateMode is upWhereAll or upWhereChanged.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>pfInKey</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The field is included in the WHERE clause when the provider's UpdateMode is upWhereKeyOnly.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>pfHidden</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The field is included in data packets to ensure the uniqueness of records so that they can be correctly updated. It can't be seen or used by the receiving client dataset.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFieldChars">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldChars</type> indicates the set of characters that are valid for field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFieldChars</type> is a set of characters that can be used to create a string that is the value of a field.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TAutoRefreshFlag">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TAutoRefreshFlag</type> Indicates whether the server provides field values, and if so, why.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TAutoRefreshFlag</type> is the type of the AutoGenerateValue property of a field component. It indicates whether the server automatically supplies data for a field. <type namespace="DRIntf">TAutoRefreshFlag</type> includes the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>arNone</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The field does not have a default value and is not an autoincrement field. The server does not automatically supply values for this type of field.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>arAutoInc</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The field is an autoincrement field.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>arDefault</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The field has a default value maintained by the server.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TLookupList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TLookupList</class> maintains a list of lookup values associated with a set of key field values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TField uses <class namespace="Db">TLookupList</class> to implement a cache of lookup values. Each value in the lookup list is associated with a set of values on the key fields in the lookup data set. Lookup fields match the values of the fields identified by their KeyFields property with the values of the key fields from the lookup data set. When these values match, the value of the lookup field is set to the associated value from <class namespace="Db">TLookupList</class>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="Db">TLookupList</class> to generate a lookup list programmatically when there is no actual lookup dataset. Use the methods of the field's LookupList property to fill the lookup list with values and set the LookupCache property of the field to true. If no other lookup properties of the field are set, the field will use the supplied lookup list without overwriting it with values from a lookup dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ValueOfKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the lookup value associated with a set of key field values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TLookupList">ValueOfKey</method> to look up the value for a lookup field that has the set of values specified by the AKey parameter on the fields identified by its KeyFields property. AKey is a Variant or Variant array that contains the values on the key fields in the lookup data set that uniquely specify a lookup field value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TLookupList">Create</method>s an instance of <method namespace="Db" class="TLookupList">TLookupList</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications should not need to call <method namespace="Db" class="TLookupList">Create</method>. Instances of <method namespace="Db" class="TLookupList">TLookupList</method> are created by the field component that uses the list for its lookup cache. To obtain one of these instances, read the LookupList property of the field.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Add">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TLookupList">Add</method>s a lookup value to the list for a given key value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lookup fields call <method namespace="Db" class="TLookupList">Add</method> when building the lookup cache to associate lookup values with the values of the key fields in the lookup dataset. The AKey parameter is a variant or variant array that represents the value or values of the key fields. AValue is a variant that represents the value of the lookup field associated with the key field values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TLookupList">Add</method> to build a lookup list from scratch when there is no actual lookup dataset.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TField</class> is the common ancestor of all the field components.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TField</class> encapsulates the fundamental behavior common to all field components. It introduces the properties, events, and methods that are used to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Change the value of a field in a dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Convert the value of a field from one data type to another.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Validate data that the user enters for a field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Define how the data in the field appears as it is displayed or edited.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calculate the value of a field from code written in the OnCalcFields event of the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Look up the field's value from another dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not create instances of <class namespace="DB">TField</class>. <class namespace="DB">TField</class> descendants are created automatically each time a dataset is activated. These descendants can be dynamic (the default) or persistent. Dynamic field components reflect the columns in the underlying metadata at the time a dataset is opened. Persistent field components are created at design time using the Fields editor, which specifies the fields in the dataset, their properties, and their ordering.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creating persistent field components guarantees that each time an application runs, it uses and displays the same columns, in the same order, even if the physical structure of the underlying database changes. If a column on which a persistent field component is based is deleted or changed, the IDE generates an exception rather than opening the dataset against a nonexistent column or mismatched data. If this happens, remove the field component for the nonexistent field using the Fields editor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A field in a dataset is always treated as one of the following <class namespace="DB">TField</class> descendant classes below:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th/>
                  
                  <th/>
                  
                  <th/>
                  
                  <th/>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>TADTField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TDateField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TReferenceField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TAggregateField</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>TDateTimeField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TSmallIntField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TArrayField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TFloatField</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>TSQLTimeStampField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TAutoIncField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TFMTBCDField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TStringField</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>TBCDField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TGraphicField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TTimeField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TBinaryField</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>TGuidField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TVarBytesField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TBlobField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TIDispatchField</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>TVariantField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TBooleanField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TIntegerField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TWideStringField</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>TBytesField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TInterfaceField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TWordField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TCurrencyField</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>TLargeintField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TDataSetField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>TMemoField</para>
                  
                  </td>
                  
                  <td>
                     
                     <para/>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the unformatted data for the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TField">GetData</method> to return the data in a field to a buffer. <method namespace="DB" class="TField">GetData</method> is intended primarily for internal use.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Buffer must have sufficient space allocated for the data. Use the DataSize property to determine the space required.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unlike the DisplayText, Text, or AsXXX properties, <method namespace="DB" class="TField">GetData</method> does not translate the data into a specific type. Instead, it uses a type that reflects the underlying database information unless you set NativeFormat to false. NativeFormat indicates whether the raw database information must be translated into the underlying type associated with the specific type of database field. When NativeFormat is true, the dataset does not translate the raw database information. When NativeFormat is false, the dataset must translate the field value into the type associated with the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the data is NULL, <method namespace="DB" class="TField">GetData</method> returns false and no data is transferred to Buffer. Otherwise, <method namespace="DB" class="TField">GetData</method> returns true.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TField">GetData</method> cannot be used to read data from BLOB or memo fields. To read BLOB data, use the stream returned by the dataset's CreateBlobStream method or the BLOB field's SaveToStream method.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetParentComponent">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the component which directs the loading and saving of the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The streaming system that loads and saves components calls <method namespace="DB" class="TField">GetParentComponent</method> to identify the component that uses this field to represent one of its parts. If the field represents a subfield in an object field, <method namespace="DB" class="TField">GetParentComponent</method> returns the value of ParentField. Otherwise, <method namespace="DB" class="TField">GetParentComponent</method> returns the value of DataSet.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.HasParent">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns true, indicating that field components act as part of a larger composite.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The streaming system that loads and saves components calls <method namespace="DB" class="TField">HasParent</method> to determine when a component acts as part of a composite. The component that represents the entire composite is returned by the GetParentComponent method. The parent component is responsible for directing the loading and saving of its subcomponents.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IsBlob">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the field represents the data in a binary large object (BLOB) field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TField">IsBlob</method> to determine whether the field represents BLOB data. For example, before using the GetData or SetData method, call <method namespace="DB" class="TField">IsBlob</method> to determine whether the method can be used. The <method namespace="DB" class="TField">IsBlob</method> method for <method namespace="DB" class="TField">TField</method> always returns false. Descendants of <method namespace="DB" class="TField">TField</method> that implement blob fields override this method to indicate that they represent BLOB data.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IsValidChar">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a particular character is valid for the field. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TField">IsValidChar</method> to determine if the character specified by InputChar can appear in the text representation of the field's value. Many data-aware controls use <method namespace="DB" class="TField">IsValidChar</method> to check characters entered by the user to determine if they are valid. <method namespace="DB" class="TField">IsValidChar</method> returns true if InputChar can appear in the field. <method namespace="DB" class="TField">IsValidChar</method> returns false if InputChar is not a valid character for the field type.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The valid characters for a field object are given by the ValidChars property. By default, field objects accept all characters as valid. For each DataType that restricts the set of valid characters, the default valid characters are listed below:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>DataType</th>
                        
                  <th>Valid characters</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftSmallint</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digits 0 to 9, plus sign (+), and minus sign (-).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftWord</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digits 0 to 9, plus sign (+), and minus sign (-)</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftAutoInc</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digits 0 to 9, plus sign (+), and minus sign (-)</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftInteger</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digits 0 to 9, plus sign (+), and minus sign (-)</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftLargeInt</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digits 0 to 9, plus sign (+), and minus sign (-)</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftCurrency</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digits 0 to 9, plus sign (+), minus sign (-), the letter E (E or e) and the decimal separator from the regional settings in the Windows control panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftFloat</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digits 0 to 9, plus sign (+), minus sign (-), the letter E (E or e) and the decimal separator from the regional settings in the Windows control panel</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBCD</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digits 0 to 9, plus sign (+), minus sign (-), and the decimal separator from the regional settings in the Windows control panel.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>For some datatypes, such as ftGraphic, <method namespace="DB" class="TField">IsValidChar</method> returns true for all characters although not every character is valid for the field. <method namespace="DB" class="TField">IsValidChar</method> provides only a rough validation of input characters. More refined character-by-character validation can be provided by an edit mask. Also, the value for a field is validated as a whole when it is written to the database record.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TField">Create</method>s and initializes a field component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not create <method namespace="DB" class="TField">TField</method> instances. <method namespace="DB" class="TField">TField</method> is intended only as a base class, and should not be directly instantiated. The constructor for descendant classes is usually called by the dataset when it is opened.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the inherited constructor, <method namespace="DB" class="TField">TField</method> initializes the Visible property to true.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Assign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies the Value property from another field component or assigns another object to the field component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TField">Assign</method> to copy the Value property from one field to another. The fields must have compatible data types. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When Source is another field object, <method namespace="DB" class="TField">Assign</method> calls the <method namespace="DB" class="TField">Assign</method>Value method, using the Source field's Value property. Calling <method namespace="DB" class="TField">Assign</method> with the Source parameter set to nil (Delphi) or NULL (C++) assigns a blank value to the field component. Calling <method namespace="DB" class="TField">Assign</method> with any other object type calls the inherited method, which allows assignment from objects that implement a <method namespace="DB" class="TField">TField</method> object in their <method namespace="DB" class="TField">Assign</method>To method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AssignValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the field value using one of the AsInteger, AsBoolean, AsString or AsFloat properties.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TField">AssignValue</method> to assign a value to a field and, in Delphi, that comes from an array of const. <method namespace="DB" class="TField">AssignValue</method> uses an As property for the assignment based on the type of the Value parameter:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>As... property used</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtInteger</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsInteger</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtBoolean</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsBoolean</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtChar</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsString</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtExtended</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsFloat</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtString</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsString</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtPChar</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsString</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtAnsiString</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsString</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtCurrency</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsCurrency</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>vtVariant</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>AsVariant</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Value is not one of the types in the table, but is of type TObject or a TObject descendant, <method namespace="DB" class="TField">AssignValue</method> uses the Assign method to assign the value to the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TField">AssignValue</method> exists primarily for internal use. In C++ applications and components, use the <method namespace="DB" class="TField">TField</method>::Value property instead. In most Delphi situations, you should use the data type-specific assignment properties like AsString and AsInteger. In cases where a component or an application must be able to make field assignments from untyped arrays, the syntax for <method namespace="DB" class="TField">AssignValue</method> looks like that below. In this example, a custom data class uses <method namespace="DB" class="TField">AssignValue</method> in a member method named SetFieldValues to assign values to multiple fields. The values for the field assignments come from an untyped array.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">procedure TCustomDataClass.SetFieldValues(Values: array of const);
var
  i: Integer;
begin
for i := 0 to High(Values) do
    Fields[i].AssignValue(Values[i]);
end;</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Clear">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the value of the field to NULL.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call the <method namespace="DB" class="TField">Clear</method> method to give the field a blank value (a NULL value in SQL terms).</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FocusControl">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Forces a form's focus to the first data-aware component associated with the field object. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TField">FocusControl</method> to switch the focus of the form to a data-aware control associated with the field. Because it is possible that the field's value can change even if its associated data-aware control does not have the focus, calling <method namespace="DB" class="TField">FocusControl</method> can aid in drawing attention to a new value when it fails to be validated.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.RefreshLookupList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Loads LookupList with all the values for LookupResultField that match distinct values of LookupKeyFields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TField">RefreshLookupList</method> to load the lookup cache when setting the LookupCache property at runtime or when the values of the LookupResultField or the LookupKeyFields in the LookupDataSet may have changed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SetData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assigns unformatted data to the field. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TField">SetData</method> to assign data to a field in the format that is used by the underlying database table. Ultimately, any method of setting the data for the field component calls <method namespace="DB" class="TField">SetData</method>, once the data has been parsed into the format expected by the database table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TField">SetData</method> calls the OnValidate event handler before writing the data to the current record buffer. If the data is successfully written, <method namespace="DB" class="TField">SetData</method> calls the OnChange event handler.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Buffer contains the field value in the field components underlying type. NativeFormat indicates whether the value in Buffer must be translated before the dataset assigns its value to its internal record.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TField">SetData</method> cannot be used to assign data to BLOB or memo fields. To write BLOB data, use the stream returned by the dataset's CreateBlobStream method or the BLOB field's LoadFromStream method.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SetFieldType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides the interface for a method that can set the DataType for the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DB" class="TField">TField</method>, <method namespace="DB" class="TField">SetFieldType</method> does nothing. Descendant classes override <method namespace="DB" class="TField">SetFieldType</method> to set the DataType for the field component. <method namespace="DB" class="TField">SetFieldType</method> is useful for derived classes that can support more than one underlying data type. For example, a TBlobField may support ftBlob, ftFmtMemo, ftParadoxOle, ftDBaseOle, or ftTypedBinary.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Validate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an On<method namespace="DB" class="TField">Validate</method> event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TField">Validate</method> to validate the unformatted data pointed to by the Buffer parameter. <method namespace="DB" class="TField">Validate</method> is called by the dataset when writing new values to the current record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of Buffer does not affect the value of the field outside the On<method namespace="DB" class="TField">Validate</method> event handler.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TField">Destroy</method>s an instance of <method namespace="DB" class="TField">TField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DB" class="TField">Destroy</method> directly in an application. <method namespace="DB" class="TField">Destroy</method> is called automatically by the dataset that owns the field component, and applications never need to call it explicitly. If an application creates a descendant of <method namespace="DB" class="TField">TField</method> without an owner, it should call Free instead of <method namespace="DB" class="TField">Destroy</method>, to guard against nil values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TField">Destroy</method> closes the dataset, deletes the instance of <method namespace="DB" class="TField">TField</method> from the dataset, and calls the inherited destructor.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsBCD">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as a TBcd value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AsBCD</property> to read the value of the field's data into a TBcd or assign a TBcd value to the contents of the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented by <property namespace="DB" class="TField">TField</property>, reading <property namespace="DB" class="TField">AsBCD</property> returns the value of AsCurrency converted to a TBcd value, and setting <property namespace="DB" class="TField">AsBCD</property> sets the AsCurrency property after converting a supplied TBcd value to the Currency type. Some <property namespace="DB" class="TField">TField</property> descendants override <property namespace="DB" class="TField">AsBCD</property> to perform a more direct conversion.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the field does not support Currency values, the field component raises an exception when an attempt is made to get or set the <property namespace="DB" class="TField">AsBCD</property> or AsCurrency property. </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsBoolean">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as a boolean value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AsBoolean</property> to read the value of the field's data into a boolean or assign a boolean value to the contents of the field. <property namespace="DB" class="TField">TField</property> does not support boolean values, and raises an exception when an attempt is made to get or set the <property namespace="DB" class="TField">AsBoolean</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="DB" class="TField">TField</property> that represent boolean fields or that support conversions between the field's Value property and a boolean value, override <property namespace="DB" class="TField">AsBoolean</property> to read and write the value of the field as a boolean value.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsCurrency">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as a Currency value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AsCurrency</property> to read the value of the field's data into an object or variable of type Currency or to assign a Currency value to the contents of the field. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented by <property namespace="DB" class="TField">TField</property>, reading <property namespace="DB" class="TField">AsCurrency</property> returns the value of AsFloat converted to a Currency value, and setting <property namespace="DB" class="TField">AsCurrency</property> sets the AsFloat property after converting a supplied Currency value to a double. Some <property namespace="DB" class="TField">TField</property> descendants override <property namespace="DB" class="TField">AsCurrency</property> to work directly with Currency values rather than implicitly converting between the Currency type and doubles.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the field does not support double values, the field component raises an exception when an attempt is made to get or set the AsFloat or <property namespace="DB" class="TField">AsCurrency</property> property. </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsDateTime">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as a TDateTime value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AsDateTime</property> to read the value of the field's data into an object or variable of type TDateTime, or to assign a TDateTime value to the contents of the field. <property namespace="DB" class="TField">TField</property> does not support TDateTime values, and raises an exception when an attempt is made to get or set the <property namespace="DB" class="TField">AsDateTime</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="DB" class="TField">TField</property> that represent datetime (timestamp) fields or that support conversions between the field's Value property and a TDateTime value, override <property namespace="DB" class="TField">AsDateTime</property> to read and write the value of the field as a TDateTime value.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as a TSQLTimeStamp.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AsSQLTimeStamp</property> to read the value of the field's data into a TSQLTimeStamp record (Delphi) or structure (C++), or to assign a TSQLTimeStamp value to the contents of the field. <property namespace="DB" class="TField">TField</property> does not support TSQLTimeStamp values, and raises an exception when an attempt is made to get or set the <property namespace="DB" class="TField">AsSQLTimeStamp</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="DB" class="TField">TField</property> that represent SQL timestamp fields or that support conversions between the field's Value property and TSQLTimeStamp, override <property namespace="DB" class="TField">AsSQLTimeStamp</property> to read and write the value of the field as a TSQLTimeStamp record (Delphi) or structure (C++).</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsFloat">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as a double value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AsFloat</property> to read the value of the field's data into a double, or to assign a Double value to the contents of the field. <property namespace="DB" class="TField">TField</property> does not support floating point values, and raises an exception when an attempt is made to get or set the <property namespace="DB" class="TField">AsFloat</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="DB" class="TField">TField</property> that represent floating point numeric fields or that support conversions between the field's Value property and a double value, override <property namespace="DB" class="TField">AsFloat</property> to read and write the value of the field as a double.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsInteger">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as a 32-bit integer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AsInteger</property> to read the value of the field's data into an integer, or to assign an integer value to the contents of the field. <property namespace="DB" class="TField">TField</property> does not support integer values, and raises an exception when an attempt is made to get or set the <property namespace="DB" class="TField">AsInteger</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="DB" class="TField">TField</property> that represent integer fields or that support conversions between the field's Value property and an integer value, override <property namespace="DB" class="TField">AsInteger</property> to read and write the value of the field as an integer value.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsString">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as a string (Delphi) or an AnsiString (C++).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reading the <property namespace="DB" class="TField">AsString</property> property returns the abbreviated class name of the field component enclosed in parentheses. The abbreviated class name is built by stripping the leading 'T' from the class name and removing the trailing word 'FIELD', except in the case of <property namespace="DB" class="TField">TField</property> where that would leave an empty string. Thus, the abbreviated class name of <property namespace="DB" class="TField">TField</property> is "FIELD", the abbreviated class name of TVarBytesField is "VarBytes", and so on.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Trying to set the <property namespace="DB" class="TField">AsString</property> property raises an exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="DB" class="TField">TField</property> that represent string fields or that support conversions between the field's Value property and a string override <property namespace="DB" class="TField">AsString</property> to read and write the value of the field as a different, more meaningful, string.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsVariant">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the Value of the field as a Variant.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AsVariant</property> to read the value of the field's data into a Variant, or to assign a Variant value to the contents of the field. <property namespace="DB" class="TField">TField</property> does not support Variant values, and raises an exception when an attempt is made to read the <property namespace="DB" class="TField">AsVariant</property> property. <property namespace="DB" class="TField">TField</property> also raises an exception when an attempt is made to set the <property namespace="DB" class="TField">AsVariant</property> property, unless the Variant is of type varNull, in which case <property namespace="DB" class="TField">TField</property> calls the Clear method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="DB" class="TField">TField</property> implement the <property namespace="DB" class="TField">AsVariant</property> method to get or set the value of the field as a Variant.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AttributeSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of an attribute set in the data dictionary to apply to the field component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An attribute set defines the display and format properties of a field component that are displayed in a data-aware control at design time. It also defines any constraint and default properties of the field component. Attribute sets are only available on Windows.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Attribute sets are stored in the data dictionary by name so that at design time developers can create and apply the same set of attributes to different field components in one or more datasets. When an attribute set is assigned to a field component at design time and that field component is owned by a TQuery or TStoredProc dataset, <property namespace="DB" class="TField">AttributeSet</property> contains the name of the assigned attribute set.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Calculated">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the value of the field is calculated by the OnCalcFields event handler of its dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">Calculated</property> to determine if the field is a calculated field. When <property namespace="DB" class="TField">Calculated</property> is true and the OnCalcFields event occurs, the OnCalcFields event handler updates the value of the field. The default value is false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of a <property namespace="DB" class="TField">Calculated</property> field is not stored in or retrieved from the physical tables underlying a dataset. Instead, calculated fields are calculated for each record in the table by the dataset's OnCalcFields event handler, which typically uses expressions involving values from other fields in the record to generate a value for each calculated field. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, a dataset might have non-calculated fields for Quantity and UnitPrice, and a calculated field for ExtendedPrice, which would be calculated by multiplying the values of the Quantity and UnitPrice fields in an OnCalcFields event handler.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not change the setting of <property namespace="DB" class="TField">Calculated</property> in application code. <property namespace="DB" class="TField">Calculated</property> is automatically set to true by the Fields editor at design time if a field's value is specified as calculated.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not confuse the <property namespace="DB" class="TField">Calculated</property> property with the InternalCalcField property of a field definition. The value of a calculated field is computed in the OnCalcFields event handler. The value of an internally calculated field is computed by the SQL server<condition os="Windows"> or the Borland Database Engine</condition>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CanModify">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether a field can be modified.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check <property namespace="DB" class="TField">CanModify</property> to determine if a field's data can be edited. <property namespace="DB" class="TField">CanModify</property> is true only if the ReadOnly property is false, and the dataset for this field component allows write access to the corresponding database field.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CurValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the current value of the field component including changes made by other users of the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">CurValue</property> to examine the value of a field when a problem occurs while posting a value to the database using a provider. If the current field value causes a problem, such as a key violation, when posting the value, an event is generated to allow applications to respond to the problem. Provider components generate an OnUpdateError event. If a provider returns problem records to the client dataset, the client dataset generates an OnReconcileError event. In the OnUpdateError or OnReconcileError event handler, NewValue is the unposted value that caused the problem, OldValue is the value that was originally assigned to the field before any edits were made, and <property namespace="DB" class="TField">CurValue</property> is the value that is currently assigned to the field. <property namespace="DB" class="TField">CurValue</property> may differ from OldValue if another user changed the value of the field after OldValue was read.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TField">CurValue</property> is only supported when the dataset is a TClientDataSet. In the provider's OnUpdateError event, a temporary client dataset containing fields with a <property namespace="DB" class="TField">CurValue</property> property is passed to the event handler.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the dataset to which a field component belongs.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check the value of <property namespace="DB" class="TField">DataSet</property> to determine the dataset that uses the field component to represent one of its fields. Applications should not directly assign the <property namespace="DB" class="TField">DataSet</property> property of a field. It is assigned automatically when the field is created from a <property namespace="DB" class="TField">TField</property>Def object.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the amount of memory needed to store a field component's value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check <property namespace="DB" class="TField">DataSize</property> to determine the number of bytes required to store a field component's value. Use <property namespace="DB" class="TField">DataSize</property> to determine the required size of a buffer for working with the field's value in native format. For example, use <property namespace="DB" class="TField">DataSize</property> to determine the buffer size needed by the GetData and SetData methods.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of <property namespace="DB" class="TField">DataSize</property> for <property namespace="DB" class="TField">TField</property> is 0. Most descendants of <property namespace="DB" class="TField">TField</property> override this property to specify the size required by the specific field type they represent. BLOB fields, however, represent data of indeterminate size. They do not override the inherited method, so the value of <property namespace="DB" class="TField">DataSize</property> for BLOB fields is 0. A value of zero should not be interpreted as meaning the field value requires no memory. A value of zero indicates that the memory required for the field is indeterminate.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the data type of the field component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TField">DataType</property> property to learn the type of the data the field contains. </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the name of the field for display purposes. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">DisplayName</property> when displaying a string that represents the field to the user. For example, when raising an exception concerning the field, format an error string that includes the <property namespace="DB" class="TField">DisplayName</property> to refer to the field. <property namespace="DB" class="TField">DisplayName</property> is a read-only property. To change the value of <property namespace="DB" class="TField">DisplayName</property>, use the DisplayLabel property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If DisplayLabel is defined, <property namespace="DB" class="TField">DisplayName</property> is the same as DisplayLabel. Otherwise, <property namespace="DB" class="TField">DisplayName</property> is the same as the FieldName property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayText">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field's value as it is displayed in a data-aware control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TField">DisplayText</property> is a read-only string representation of a field's value for displaying in data-aware controls. It represents the field's value when it is not being edited. When the field is being edited, use the Text property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the field has an OnGetText event handler, <property namespace="DB" class="TField">DisplayText</property> is the value returned in the Text parameter of the OnGetText event handler when its <property namespace="DB" class="TField">DisplayText</property> parameter is true. Otherwise, <property namespace="DB" class="TField">DisplayText</property> is the value of the AsString property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.EditMask">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains a mask that restricts the data that can be entered into a data field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">EditMask</property> to restrict the characters a user can enter. If the user attempts to enter a character that is not valid, the character is not accepted. Validation using the <property namespace="DB" class="TField">EditMask</property> property is performed on a character-by-character basis. Use the OnValidate event instead to validate the entire input, just before it is posted.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="DB" class="TField">EditMask</property> to an empty string removes the mask.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Linux">For a description of the format required by <property namespace="DB" class="TField">EditMask</property>, see the </condition>
                        
                  <condition os="Linux">T<property namespace="DB" class="TField">EditMask</property>
                        
                  </condition>
                        
                  <condition os="Linux"> type.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.EditMaskPtr">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides read-only access to the EditMask property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">EditMaskPtr</property> when reading the EditMask property. Because <property namespace="DB" class="TField">EditMaskPtr</property> is a read-only property, <property namespace="DB" class="TField">EditMaskPtr</property> guards against accidentally changing the value of the mask in code that should only read it.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Linux">For a description of the format required by EditMask, see the </condition>
                        
                  <condition os="Linux">TEditMask</condition>
                        
                  <condition os="Linux"> type.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldNo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the ordinal position of the field's column in the underlying table or query result.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TField">FieldNo</property> to learn a field component's ordinal position in the table underlying the dataset, where 1 is the first field.<condition os="Windows"> Use the <property namespace="DB" class="TField">FieldNo</property> property to specify the field only in direct API calls to the Borland Database Engine.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not confuse <property namespace="DB" class="TField">FieldNo</property>, which is the field component's ordinal position in the physical database table, with Index, the field component's position in the dataset's Fields property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FullName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the field name qualified by the full name of the parent field, if any.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="DB" class="TField">FullName</property> to determine the field's name when it may be a subfield in the flattened version of a more complex object field. <property namespace="DB" class="TField">FullName</property> prefixes the FieldName property with the full name of the more complex object field of which it is a part.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.IsIndexField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a field is an index field.<condition language="Delphi"/>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect the <property namespace="DB" class="TField">IsIndexField</property> to determine if a field is used in the dataset's current index. If <property namespace="DB" class="TField">IsIndexField</property> is true, the field is one of the fields that makes up the dataset's current index. If <property namespace="DB" class="TField">IsIndexField</property> is false, the field is not an index field. A field component must be an index field to serve as one of the fields in the LookupKeyFields property of another field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.IsNull">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the field has a value assigned to it.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="DB" class="TField">IsNull</property> to ascertain whether the field contains a value. If <property namespace="DB" class="TField">IsNull</property> is true, the field is blank. If <property namespace="DB" class="TField">IsNull</property> is false, the field has a value.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Lookup">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the field is specified as a lookup field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <property namespace="DB" class="TField">Lookup</property> is provided for backward compatibility. To determine if a field is a lookup field, use the FieldKind property instead </condition>
                     
               <condition os="Linux">
                        
                  <property namespace="DB" class="TField">Lookup</property> indicates whether FieldKind is fk<property namespace="DB" class="TField">Lookup</property>. </condition>When FieldKind is fk<property namespace="DB" class="TField">Lookup</property>, <property namespace="DB" class="TField">Lookup</property> is true. When FieldKind is any other value, <property namespace="DB" class="TField">Lookup</property> is false. Changing <property namespace="DB" class="TField">Lookup</property> to false implicitly sets FieldKind to fkData. <condition os="Linux">Note that lookup fields do not work if the field is in a unidirectional dataset.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the field is a lookup field, the KeyFields property indicates which fields in the dataset must match the <property namespace="DB" class="TField">Lookup</property>KeyFields in the <property namespace="DB" class="TField">Lookup</property>DataSet, to identify a record in the <property namespace="DB" class="TField">Lookup</property>DataSet. The value of the <property namespace="DB" class="TField">Lookup</property>ResultField for that record becomes the Value of the field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.LookupList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates a cache of values from the LookupDataSet indexed by a set of values from the KeyFields property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="DB" class="TField">LookupList</property> to find the cached value assigned to the field for a given set of values on the fields specified by KeyFields. The value of <property namespace="DB" class="TField">LookupList</property> is set when the dataset is open or the Refresh<property namespace="DB" class="TField">LookupList</property> method is called. </para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications can also fill <property namespace="DB" class="TField">LookupList</property> programmatically to provide lookup values as long as the LookupDataSet property is not set.</para>
                  
            </tip>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ValueOfKey method of the <property namespace="DB" class="TField">LookupList</property> returns the value of the LookupResultField for a set of values on the LookupKeyFields. This allows the value of the lookup field object to be computed as follows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Value := LookupList.ValueOfKey(DataSet.FieldValues[KeyFields]);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Value = LookupList-&gt;ValueOfKey(DataSet-&gt;FieldValues[KeyFields]);</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TField">LookupList</property> is only meaningful when the value of FieldKind is fklookup and the LookupCache property is true.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.NewValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the current value of the field component including pending cached updates.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">NewValue</property> to examine or change the current value of a field when in the process of applying multiple updates. If the current field value is causing a problem, such as a key violation, when applying updates, <condition os="Windows">datasets generate an OnUpdateError event. Similarly, </condition>provider components generate an OnUpdateError event<condition os="Windows"> when problems occur posting records from a client</condition>, and client datasets generate an OnReconcileError event when informed of problems by the provider. In the event handler, assign a new value to <property namespace="DB" class="TField">NewValue</property> to correct the problem.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TField">NewValue</property> is the same as Value, except when errors are encountered while posting records. Setting <property namespace="DB" class="TField">NewValue</property> in an OnUpdateError event handler<condition os="Windows">, an OnUpdateRecord event handler,</condition> or an OnReconcileError event handler causes <property namespace="DB" class="TField">NewValue</property> to differ from Value until the records have finished being applied to the underlying database table.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The <property namespace="DB" class="TField">NewValue</property> property is only usable when the data is accessed using a TClientDataSet component<condition os="Windows"> or cached updates is enabled</condition>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Offset">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of bytes added to the end of the current record buffer in the dataset for storing cached values (for calculated fields or BLOB fields).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TField">Offset</property> to determine the extra space in the record buffer of a TClientDataSet object allocated for cached information on calculated fields or BLOB fields. <property namespace="DB" class="TField">Offset</property> should only be used by component writers when developing new descendants of TClientDataSet.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.OldValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the original value of the field (as a Variant).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TField">OldValue</property> property to examine or retrieve the original value of the field that was obtained from the dataset before any edits were posted. For example, in Delphi the following line replaces current pending changes with a field's original value:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">NewValue := OldValue;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Once records are applied successfully to the database, the old field value cannot be retrieved. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>the <property namespace="DB" class="TField">OldValue</property> property is only usable when the data is accessed using a TClientDataSet component<condition os="Windows"> or cached updates is enabled</condition>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ParentField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the TObjectField object from which this field is derived. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">ParentField</property> when the field represents a subfield in the flattened version of a more complex object field. <property namespace="DB" class="TField">ParentField</property> represents the object field (an Oracle8 array field or ADT).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TField">ParentField</property> is nil (Delphi) or NULL (C++), the field does not represent part of a composite field.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Size">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the size used in the definition of the physical database field for data types that support different sizes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The interpretation of <property namespace="DB" class="TField">Size</property> depends on the data type. The meaning of <property namespace="DB" class="TField">Size</property> for data types that use it is given in the following table. For all other data types, <property namespace="DB" class="TField">Size</property> is not used and its value is always 0.</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>DataType</th>
                        
                  <th>Meaning of Size</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBCD</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of digits after the decimal place.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftString</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the maximum number of characters in the string.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftVarBytes</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the maximum number of bytes of data, not counting the first two bytes which indicate the actual number of bytes of data that were used.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBytes</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the maximum number of bytes of data.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBlob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of bytes from the BLOB that are stored in the record buffer.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftDBaseOle</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of bytes from the dBASE OLE BLOB that are stored in the record buffer.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftFMTBCD</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of digits after the decimal place.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftFmtMemo</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of bytes from the memo that are stored in the record buffer.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftGraphic</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of bytes from the image that are stored in the record buffer.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftMemo</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of characters from the memo that are stored in the record buffer.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftParadoxOle</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of bytes from the Paradox OLE BLOB that are stored in the record buffer.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftTypedBinary</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of bytes from the BLOB that are stored in the record buffer.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftADT</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the total number of fields contained in the ADT field, including the fields of child fields that are of type ADT.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftArray</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Size is the number of elements in the array.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Text">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the string to display in a data-aware control when the field is in edit mode. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Data-aware controls rely on the <property namespace="DB" class="TField">Text</property> property to provide the editing format for each field. For example, by default the <property namespace="DB" class="TField">Text</property> property of a currency field omits the thousands separators and currency symbol.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TField">Text</property> can differ from the Display<property namespace="DB" class="TField">Text</property> property if the field uses a different string representation when the value is being edited. To implement two different string representations of a field's value, use the OnGet<property namespace="DB" class="TField">Text</property> event handler. If an OnGet<property namespace="DB" class="TField">Text</property> event handler is assigned, <property namespace="DB" class="TField">Text</property> is the value returned in the <property namespace="DB" class="TField">Text</property> parameter of the event handler when the Display<property namespace="DB" class="TField">Text</property> parameter is false. If there is no OnGet<property namespace="DB" class="TField">Text</property> event handler, <property namespace="DB" class="TField">Text</property> is the value of the AsString property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ValidChars">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the characters that can be included in the text representation of the field's value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TField">ValidChars</property> to restrict the characters that can be validly entered as part of the text representation of the field's value. <property namespace="DB" class="TField">ValidChars</property> is used by the IsValidChar method to determine whether a character typed into a data-aware edit control can make up part of the field's value. Unlike the EditMask property which specifies which characters can appear in specific positions, <property namespace="DB" class="TField">ValidChars</property> limits the characters that can appear anywhere in the field's value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TField">TField</property> initializes <property namespace="DB" class="TField">ValidChars</property> to include all characters. Numeric descendants of <property namespace="DB" class="TField">TField</property> change the default value to include only the characters that can make up a numeric value. Applications can change this value to restrict the character set for a field in other ways or to allow characters that are not permitted by default.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the data in a field component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">Value</property> to read data directly from and write data directly to a field component at runtime. For example, use the <property namespace="DB" class="TField">Value</property> property to affect the contents of a field that is not Visible.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Alignment">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines how the field's data is displayed within a data-aware control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">Alignment</property> to specify the position of the field's data within data-aware controls. These are the possible values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>taLeftJustify</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Align data to the left side of the control</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>taCenter</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Center data horizontally in the control</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>taRightJustify</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Align data to the right side of the control</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AutoGenerateValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the field values can be generated by the server rather than entered by the user.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">AutoGenerateValue</property> to indicate when field values can be generated by the database. Such fields include autoincrement fields and fields with default values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Some database drivers can't determine which fields can have values supplied automatically by the server. This can lead to problems when posting edits. For these cases, applications can provide this information by setting the <property namespace="DB" class="TField">AutoGenerateValue</property> property. Use this property to indicate whether the field is an autoincrement field (arAutoInc), a field with a default value (arDefault), or a field whose value is not automatically generated (arNone).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">
                        
                  <property namespace="DB" class="TField">AutoGenerateValue</property> is not always required. Fields with an <property namespace="DB" class="TField">AutoGenerateValue</property> property of arNone may still be updated if the driver supplies metadata that indicates it has a default value or an autoincrement value. However, it is good practice to supply this information because not all drivers supply this metadata.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">If you do use <property namespace="DB" class="TField">AutoGenerateValue</property> for any fields that have values generated by the database, you must set <property namespace="DB" class="TField">AutoGenerateValue</property> to arAutoInc or arDefault on every field whose value is automatically generated by the database. This is because when records are posted, the application immediately executes a query to fetch the automatically-generated values. If you leave an automatically-generated field with <property namespace="DB" class="TField">AutoGenerateValue</property> set to arNone, this query looks for a record with a blank value on that field, which will fail to locate the correct record.</condition>
                  
            </para>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TField">AutoGenerateValue</property> can fail in some cases when the automatically-generated field value is on a key field. This is because the query that re-fetches the new field value can't always uniquely locate the record that was just posted.</para>
                  
            </warning>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Trying to change the <property namespace="DB" class="TField">AutoGenerateValue</property> property when the field's dataset is open generates an exception. Thus, <property namespace="DB" class="TField">AutoGenerateValue</property> only works with persistent field components, which remain when the dataset is closed.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CustomConstraint">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies an SQL string the enforces any application-specific constraints on the field's value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TField">CustomConstraint</property> to limit the values that the user can enter into a field. <property namespace="DB" class="TField">CustomConstraint</property> must be a valid SQL search expression such as</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">x &gt; 0 and x &lt; 100</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The name used to refer to the field's value can be any string that is not a reserved SQL keyword, as long as it is used consistently throughout the constraint expression.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Custom constraints are imposed in addition to any constraints to the field's value that come from the server. To see the constraints imposed by the server, read the ImportedConstraint property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When setting the <property namespace="DB" class="TField">CustomConstraint</property> property, be sure to set the ConstraintErrorMessage property as well, so that a message can appear when the user enters a value that violates the custom constraint.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Custom constraints are SQL expressions. Because of this, always use a period (.) as a floating-point separator.  This may be inconsistent with international <condition os="Windows">Windows</condition>
                        
                  <condition os="Linux">environment</condition> settings.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ConstraintErrorMessage">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies a customized error message that appears when the user tries to set a value that violates the data constraints of the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TField">ConstraintErrorMessage</property> to specify the message that appears when the user-supplied value for the field does not meet the constraints imposed by the server or specified in the CustomConstraint property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DefaultExpression">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies an SQL expression that is assigned to the field if the user does not provide a value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TField">DefaultExpression</property> to provide a default value for a field. <property namespace="DB" class="TField">DefaultExpression</property> can be any valid SQL value expression that does not refer to field values. If the expression contains literals other than numeric values, they must appear in quotes. For example, a default value of noon for a time field is</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">'12:00:00'</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">including the quotes around the literal value.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If you supply a value for <property namespace="DB" class="TField">DefaultExpression</property>, this value takes precedence over any default values for the field implemented on the database server. This is because <property namespace="DB" class="TField">DefaultExpression</property> is applied to the field in your application before any edits are sent to the server.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayLabel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the text to display in the corresponding column heading of a data grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">DisplayLabel</property> to assign column headings to a data grid. The column headings of the data grid use the DisplayName property of the field whose value they represent. Setting <property namespace="DB" class="TField">DisplayLabel</property> changes the read-only DisplayName property from FieldName to the string specified as <property namespace="DB" class="TField">DisplayLabel</property>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayWidth">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of characters that should be used to display a field's value by a cooperating data-aware control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TField">DisplayWidth</property> to control how many characters are used to calculate the column width for the field when it is displayed by a TDBLookupListBox object or a descendant of TCustomDBGrid. The width of columns is determined by the average character width. If the data-aware control that displays the field is not using a fixed pitch font, <property namespace="DB" class="TField">DisplayWidth</property> may indicate more or fewer characters than will fit in the column for any given string.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The <property namespace="DB" class="TField">DisplayWidth</property> property has no effect if there is an explicit Columns value for the field in a TDBGrid object.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldKind">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a field represents a column in a dataset, a calculated field, or a lookup field. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">FieldKind</property> to determine if a field is a data field, a calculated field, a lookup field, or an aggregate field. The value of <property namespace="DB" class="TField">FieldKind</property> can be changed programmatically, but in practice <property namespace="DB" class="TField">FieldKind</property> is set at design time when creating Field components with the Fields editor.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Fields calculated by SQL servers<condition os="Windows"> or the Borland Database Engine to display the results of a query that returns a live dataset</condition> have a <property namespace="DB" class="TField">FieldKind</property> of fkInternalCalc, not fkCalculated. This is because the field values are stored in the dataset. Calculated fields in a client dataset that are calculated in an OnCalcFields event handler but stored in the dataset also have a <property namespace="DB" class="TField">FieldKind</property> of fkInternalCalc instead of fkCalculated. Unlike regular calculated fields, internally calculated fields can be used in filter expressions. They can be edited, but the changes are discarded. To prevent editing, set the ReadOnly property to true.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The <property namespace="DB" class="TField">FieldKind</property> property of a field is only stored with the field object if the value is fkInternalCalc.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the name of the physical column in the underlying table or query result to which a field component is bound.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When creating a field component, the <property namespace="DB" class="TField">TField</property>Def object uses <property namespace="DB" class="TField">FieldName</property> to specify which field in the underlying dataset the field component represents. <property namespace="DB" class="TField">FieldName</property> is used when displaying references to the field to users, unless a DisplayLabel has been set. For calculated fields, supply a <property namespace="DB" class="TField">FieldName</property> when defining the field. For non-calculated fields, an EDatabaseError exception is raised if <property namespace="DB" class="TField">FieldName</property> is not a column name in the underlying table.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.HasConstraints">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether field values are constrained.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TField">HasConstraints</property> to determine whether the field component imposes custom constraints, imported constraints, or a default expression. <property namespace="DB" class="TField">HasConstraints</property> is true if the CustomConstraint, DefaultExpression, or ImportedConstraint property is set. Otherwise, <property namespace="DB" class="TField">HasConstraints</property> is false, indicating that no constraints on field values are implemented.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Field values can still be limited when <property namespace="DB" class="TField">HasConstraints</property> is false. For example, an edit mask or OnValidate event handler can constrain field values.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Index">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the field component's index in the Fields property of the dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DB" class="TField">Index</property> property to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Find the position of the field in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Change the order of a field's position in the dataset by changing the value of <property namespace="DB" class="TField">Index</property>. Changing the <property namespace="DB" class="TField">Index</property> value affects the order in which fields are displayed in data grids, but not the position of the fields in physical database tables.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The field order can also be changed by dragging and dropping fields in the Fields editor at design time.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ImportedConstraint">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents an SQL clause that enforces constraints stored on the server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TField">ImportedConstraint</property> to determine the limits imposed by the server on what values are valid for the field. <property namespace="DB" class="TField">ImportedConstraint</property> is an SQL search expression such as</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Value &gt; 0 and Value &lt; 100</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not change the value of <property namespace="DB" class="TField">ImportedConstraint</property>. To add additional constraints on the field value, use the CustomConstraint property instead. Custom constraints are imposed in addition to the imported constraints. If the server constraints change, the value of <property namespace="DB" class="TField">ImportedConstraint</property> will be changed but constraints introduced in the CustomConstraint property will persist.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removing constraints from the <property namespace="DB" class="TField">ImportedConstraint</property> property will not change the validity of field values that violate those constraints. Removing constraints results in the constraints being checked by the server instead of locally. When constraints are checked locally, the error message supplied as the ConstraintErrorMessage property is displayed when violations are posted, instead of an error message from the server<condition os="Linux"> when updates are applied</condition>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>On Windows, <property namespace="DB" class="TField">ImportedConstraint</property> is only set for fields of datasets that import constraints. These include client datasets (when they receive imported constraints in data packets) and BDE-based datasets.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>On Linux, the IDE does not provide any mechanism for importing server constraints. However, client datasets can receive imported constraints in data packets from an application server running on another platform.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.LookupDataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the dataset used to look up field values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">LookupDataSet</property> to specify the dataset to use for looking up field values in a field with a FieldKind of fkLookup.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TField">LookupDataSet</property> can't refer to a unidirectional dataset.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When a field component is a lookup field, the Value of the field component is the value of the LookupResultField in the <property namespace="DB" class="TField">LookupDataSet</property>. The record in the <property namespace="DB" class="TField">LookupDataSet</property> that contains the correct value is found by matching the LookupKeyFields in the <property namespace="DB" class="TField">LookupDataSet</property> with the current values of the KeyFields in the DataSet.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.LookupKeyFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field or fields in the lookup dataset to match when doing a lookup. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Only use <property namespace="DB" class="TField">LookupKeyFields</property> on field components with a FieldKind of fkLookup. <property namespace="DB" class="TField">LookupKeyFields</property> are the fields in the index of the LookupDataSet whose values must match the KeyFields in the field component's DataSet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To specify more than one field, separate each field name with a semicolon. The fields specified in <property namespace="DB" class="TField">LookupKeyFields</property> must be of the same types as the corresponding fields in KeyFields, or the lookup can't work.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Matching the values of the <property namespace="DB" class="TField">LookupKeyFields</property> in the LookupDataSet with the values of the KeyFields in the DataSet determines a specific record in the LookupDataSet. The Value of the field component is the value of the LookupResultField in the indicated record.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.LookupResultField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field from the lookup dataset whose value becomes the Value property of the field component. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">LookupResultField</property> to specify a single field in the LookupDataSet whose value becomes the value of the field component. The field component must have a FieldKind of fkLookup, and the DataType of the field component must be the same as the data type of <property namespace="DB" class="TField">LookupResultField</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When a field component is a lookup field, the Value of the field component is the value of the <property namespace="DB" class="TField">LookupResultField</property> in the LookupDataSet. The record in the LookupDataSet that contains the correct value is found by matching the LookupKeyFields in the LookupDataSet with the current values of the KeyFields in the DataSet.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.KeyFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the field or fields in the dataset that must be matched in a lookup dataset when doing a lookup.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TField">KeyFields</property> only on lookup fields (fields where FieldKind is fkLookup and Lookup is true). <property namespace="DB" class="TField">KeyFields</property> specifies the field or fields to match when a lookup occurs. To use more than one field, separate each field name with a semicolon. The specified fields must be of the same types as the corresponding fields in Lookup<property namespace="DB" class="TField">KeyFields</property>, or the lookup fails.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The values of the <property namespace="DB" class="TField">KeyFields</property> in the DataSet are matched with the values of the Lookup<property namespace="DB" class="TField">KeyFields</property> in the LookupDataSet to determine a particular record of the lookup table. The value of the LookupResultField on that record becomes the Value property for the field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.LookupCache">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the values of a lookup field are cached or looked up dynamically every time the current record in the dataset changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TField">LookupCache</property> to true to cache the values of a lookup field when the LookupDataSet is unlikely to change and the number of distinct lookup values is small. Caching lookup values can speed performance, because the lookup values for every set of LookupKeyFields values are preloaded when the DataSet is opened. When the current record in the DataSet changes, the field object can locate its Value in the cache, rather than accessing the LookupDataSet. This performance improvement is especially dramatic if the LookupDataSet is on a network where access is slow.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If every record of DataSet has different values for KeyFields, the overhead of locating values in the cache can be greater than any performance benefit provided by the cache. The overhead of locating values in the cache increases with the number of distinct values that can be taken by KeyFields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If LookupDataSet is volatile, caching lookup values can lead to inaccurate results. Call RefreshLookupList to update the values in the lookup cache. RefreshLookupList regenerates the LookupList property, which contains the value of the LookupResultField for every set of LookupKeyFields values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When setting <property namespace="DB" class="TField">LookupCache</property> at runtime, call RefreshLookupList to initialize the cache.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TField">LookupCache</property> is only meaningful if the value of FieldKind is fkLookup.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Origin">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the name of the field in its original database table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TField">Origin</property> is only assigned at design time by the Fields editor, and only when the field component is used by a TQuery object. The <property namespace="DB" class="TField">Origin</property> property distinguishes the name of the field as it appears in its dataset from the name of the field in the base table on which it is based. For example, in a query that uses the following SQL statement, the value of <property namespace="DB" class="TField">Origin</property> is CUSTOMER.CUSTNO.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SELECT CUSTNO AS ID FROM CUSTOMER</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In this case, the FieldName property is ID. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TField">Origin</property> is not available on Linux. The <property namespace="DB" class="TField">Origin</property> property is only implemented for BDE-enabled datasets, which appear only in the Windows product.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ProviderFlags">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies how a provider uses the field value when applying updates. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TField">ProviderFlags</property> is only relevant for fields that appear in the data packets supplied to a provider component's event handlers. This property is a set of flags that determine how the field is used when applying updates or resolving update errors. </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the field can be modified.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TField">ReadOnly</property> to true to prevent a field from being modified. In a data grid, tabbing from field to field skips over <property namespace="DB" class="TField">ReadOnly</property> fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To learn whether a field can be modified, use the CanModify property instead. CanModify reflects not only the value of the <property namespace="DB" class="TField">ReadOnly</property> property, but also any restrictions imposed by the underlying dataset.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Required">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether a nonblank value for a field is required. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TField">Required</property> to find out if a field requires a value or if the field can be blank.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a field is created with the Fields editor, this property is set based on the underlying table. Applications that set <property namespace="DB" class="TField">Required</property> to true for fields that must have values (for example, a password or part number), but for which the underlying table does not require the field, must write an OnValidate event handler to enforce the property. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the <property namespace="DB" class="TField">Required</property> property reflects a property of the underlying database table, trying to <condition os="Windows">post</condition>
                     
               <condition os="Linux">apply</condition> a null value causes an exception to be raised. Applications that set the <property namespace="DB" class="TField">Required</property> property to true when the underlying table does not require the field, should raise an EDatabaseError exception on null values in the OnValidate event handler in order to achieve the same result.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Visible">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the field appears in a data grid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To hide a field in a data grid, set <property namespace="DB" class="TField">Visible</property> to false. If <property namespace="DB" class="TField">Visible</property> is true, the field appears in the grid. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The <property namespace="DB" class="TField">Visible</property> property has no effect if the grid has an explicit Columns value for the field. It also has no effect on controls other than TDBGrid, such as TDBEdit.</para>
                  
            </note>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs immediately after the data in the field is written to the record buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TField">OnChange</event> event handler to respond to any changes in the field's data. <event namespace="DB" class="TField">OnChange</event> allows a response once the data has been successfully written to the record buffer.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When writing the value of a field to the current record buffer, the following steps occur:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1The OnValidate event handler is called to validate the data. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2If the OnValidate event handler accepts the current Value, the data is written to the record buffer. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3If writing the data does not raise an exception, the <event namespace="DB" class="TField">OnChange</event> event handler is called to allow a response to the change.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnGetText">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the DisplayText or Text properties of the field are referenced.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TField">OnGetText</event> handler to perform custom processing for the DisplayText and Text properties. Use <event namespace="DB" class="TField">OnGetText</event> to format the Value of the field differently when it must be edited from the format used when simply displaying the value, or use <event namespace="DB" class="TField">OnGetText</event> to display something other than the field's value when it is displayed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If there is no <event namespace="DB" class="TField">OnGetText</event> handler, the value of the DisplayText and Text properties is simply the value of the AsString property.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnSetText">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the Text property is assigned a value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TField">OnSetText</event> event handler to specify processing that occurs whenever Text receives a new value. If there is an OnGetText event handler that formats the Value of the field in some special way for editing purposes, <event namespace="DB" class="TField">OnSetText</event> should reverse the process when parsing the edited string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If there is no <event namespace="DB" class="TField">OnSetText</event> handler, the Text property is set by setting the AsString property.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnValidate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs just before the data is written to the record buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TField">OnValidate</event> event handler to validate changes made to the data in the field, just before the data is written to the current record buffer. The EditMask property allows validation of the data on a character by character basis while it is being entered by the user. <event namespace="DB" class="TField">OnValidate</event> allows an application to validate the data as a whole. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the value of a field component is assigned programmatically, validation by the EditMask is bypassed, since there is no data-aware control to enforce adherence to the mask. <event namespace="DB" class="TField">OnValidate</event> allows an application to validate such data before it is posted to the database table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To reject the current value of the field from the <event namespace="DB" class="TField">OnValidate</event> event handler, raise an exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When writing the value of a field to the current record buffer, the following steps occur:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1The <event namespace="DB" class="TField">OnValidate</event> event handler is called to validate the data. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2If the <event namespace="DB" class="TField">OnValidate</event> event handler does not raise an exception, the data is written to the current record buffer. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3If writing the data does not raise an exception, the OnChange event handler is called to allow a response to the change.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TStringField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TStringField</class> represents a string field in a dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TStringField</class> encapsulates the fundamental behavior common to fields that contain string data. A value of a string field is physically stored as a sequence of up to 8192 characters. However, some table types may only support string fields of smaller dimensions. Common uses for string fields are to store text, such as names and addresses.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the string field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TStringField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TStringField">Create</method>s an instance of a <method namespace="DB" class="TStringField">TStringField</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TStringField">TStringField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TStringField">Create</method> sets the DataType property to ftString, Size to 20, and Transliterate to true. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TStringField">Create</method> to create and initialize an instance of <method namespace="DB" class="TStringField">TStringField</method>. After instantiating a <method namespace="DB" class="TStringField">TStringField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TStringField">TStringField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TStringField">TStringField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TStringField">TStringField</method> object for a field named LastName accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TStringField;
begin
  SQLDataSet1.Close;
  T := TStringField.Create(SQLDataSet1);
  T.FieldName := 'LastName';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TStringField *T = new TStringField(SQLDataSet1);
T-&gt;FieldName = "LastName";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the data in the string field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TStringField">Value</property> to read data directly from and write data directly to a string field component at runtime. Using the <property namespace="DB" class="TStringField">Value</property> property is the same as using the AsString property. Use <property namespace="DB" class="TStringField">Value</property> when you know the field component is a string field. Use AsString when working with a generic field component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When setting the <property namespace="DB" class="TStringField">Value</property> property, <property namespace="DB" class="TStringField">TStringField</property> can convert the assigned string from <condition os="Linux">UTF-8 or </condition>ANSI to the character set used by the dataset, if the Transliterate property is true. Strings that have more characters than permitted by the value of the Size property are truncated when setting <property namespace="DB" class="TStringField">Value</property>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FixedChar">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the represented field is of Char type.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TStringField">FixedChar</property> is true when the field in the underlying database is a CHAR type as opposed to VARCHAR.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Transliterate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether text should be converted to and from the character set identified by the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TStringField">Transliterate</property> when the physical database table identified by the dataset <condition os="Windows">does not use an ANSI language driver and the data may contain extended ASCII characters</condition>
                     
               <condition os="Linux">uses a different character set than UTF-8 (on Linux) or ANSI (on Windows)</condition>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TStringField">Transliterate</property> is true<condition language="CBuilder">,</condition> string fields call the dataset's Translate method to translate <condition os="Linux">UTF-8 or </condition>ANSI characters to the character set used by the dataset when the string field value is set. When the string field value is read, the Translate method translates the characters in the database table to the <condition os="Linux">UTF-8 or </condition>ANSI character set.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TWideStringField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TWideStringField</class> represents a large string field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TWideStringField</class> encapsulates the fundamental behavior common to wide string fields. Wide string fields are similar to simple string fields except that their storage capacity is virtually unlimited and the server specifically returns the field as wide string and not string. <condition os="Windows">An example of a wide string field is the Unicode field in Microsoft SQL Server. </condition>In all other ways, wide string fields serve the same purpose as string fields. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the wide string field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TWideStringField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TWideStringField">Create</method>s an instance of a <method namespace="DB" class="TWideStringField">TWideStringField</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TWideStringField">TWideStringField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TWideStringField">Create</method> sets the DataType property to ftWideString, Size to 20, and Transliterate to true. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TWideStringField">Create</method> to create and initialize an instance of <method namespace="DB" class="TWideStringField">TWideStringField</method>. After instantiating a <method namespace="DB" class="TWideStringField">TWideStringField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TWideStringField">TWideStringField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TWideStringField">TWideStringField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">The example below creates a <method namespace="DB" class="TWideStringField">TWideStringField</method> object for a field named BookList accessed through a TQuery named Query1.</condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TWideStringField;
begin
  Query1.Close;
  T := TWideStringField.Create(Query1);
  T.FieldName := 'BookList';
  T.Name := Query1.Name + T.FieldName;
  T.Index := Query1.FieldCount;
  T.DataSet := Query1;
  Query1.FieldDefs.UpDate;
  Query1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TWideStringField *T;
Query1-&gt;Close();
T = new TWideStringField(Query1);
T-&gt;FieldName = "LastName";
T-&gt;Name = Query1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = Query1-&gt;FieldCount;
T-&gt;DataSet = Query1;
Query1-&gt;FieldDefs-&gt;UpDate();
Query1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the data in the string field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TWideStringField">Value</property> to read data directly from and write data directly to a string field component at runtime. Using the <property namespace="DB" class="TWideStringField">Value</property> property is the same as using the AsString property. Use <property namespace="DB" class="TWideStringField">Value</property> when you know the field component is a wide string field. Use AsString when working with a generic field component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When setting the <property namespace="DB" class="TWideStringField">Value</property> property, <property namespace="DB" class="TWideStringField">TWideStringField</property> converts the assigned string from <condition os="Linux">UTF-8 or </condition>ANSI to the character set for the dataset if the Transliterate property is true. Strings that have more characters than permitted by the value of the Size property are truncated when setting <property namespace="DB" class="TWideStringField">Value</property>.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Table1TheWideStringField.Value := WideStringVariable;</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TNumericField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TNumericField</class> is the common ancestor of all the numeric fields in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TNumericField</class> encapsulates the fundamental behavior common to all numeric field components. In addition to the properties, events, and methods common to all field components introduced by TField, <class namespace="DB">TNumericField</class> introduces new properties for formatting numeric data for display or editing purposes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not instantiate objects of type <class namespace="DB">TNumericField</class>. Instead, use one of its descendant classes such as TIntegerField and TFloatField.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TNumericField">Create</method>s an instance of a <method namespace="DB" class="TNumericField">TNumericField</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the create method for <method namespace="DB" class="TNumericField">TNumericField</method> directly. <method namespace="DB" class="TNumericField">TNumericField</method> is an abstract class and its constructor should only be called as an inherited method from the constructor of a derived class.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TNumericField">Create</method> changes the Alignment property to taRightJustify.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayFormat">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines how a numeric field's value is formatted for display in a data-aware control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DB" class="TNumericField">DisplayFormat</property> property to override automatic formatting of a field for display purposes. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TNumericField">DisplayFormat</property> affects only the display of the field's data. It does not affect the validity of strings assigned to a numeric field using the AsString property.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of <property namespace="DB" class="TNumericField">DisplayFormat</property> is a string that encodes the formatting of numeric data using the specifiers in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Specifier</th>
                        
                  <th>Represents</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>0</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digit placeholder. If the value being formatted has a digit in the position where the "0" appears in the format string, then that digit is copied to the output string. Otherwise, a "0" is stored in that position in the output string.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>#</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digit placeholder. If the value being formatted has a digit in the position where the "#" appears in the format string, then that digit is copied to the output string. Otherwise, nothing is stored in that position in the output string.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Decimal point. The first "." character in the format string determines the location of the decimal separator in the formatted value; any additional "." characters are ignored. The actual character used as a the decimal separator in the output string is determined by the DecimalSeparator global variable. The default value of DecimalSeparator is specified in the Number Format of the Regional Settings section in the Windows Control Panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>,</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Thousand separator. If the format string contains one or more "," characters, the output will have thousand separators inserted between each group of three digits to the left of the decimal point. The placement and number of "," characters in the format string does not affect the output, except to indicate that thousand separators are wanted. The actual character used as a the thousand separator in the output is determined by the ThousandSeparator global variable. The default value of ThousandSeparator is specified in the Number Format of the Regional Settings section in the Windows Control Panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>E+</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Scientific notation. If any of the strings "E+", "E-", "e+", or "e-" are contained in the format string, the number is formatted using scientific notation. A group of up to four "0" characters can immediately follow the "E+", "E-", "e+", or "e-" to determine the minimum number of digits in the exponent. The "E+" and "e+" formats cause a plus sign to be output for positive exponents and a minus sign to be output for negative exponents. The "E-" and "e-" formats output a sign character only for negative exponents.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>'xx'/"xx"</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Characters enclosed in single or double quotes are output as-is, and do not affect formatting.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>;</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Separates sections for positive, negative, and zero numbers in the format string.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The locations of the leftmost "0" before the decimal point in the format string and the rightmost "0" after the decimal point in the format string determine the range of digits that are always present in the output string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The number being formatted is always rounded to as many decimal places as there are digit placeholders ("0" or "#") to the right of the decimal point. If the format string contains no decimal point, the value being formatted is rounded to the nearest whole number.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the number being formatted has more digits to the left of the decimal separator than there are digit placeholders to the left of the "." character in the format string, the extra digits are output before the first digit placeholder.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The following table shows the effect of various format strings:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>DisplayFormat</th>
                        
                  <th>Value</th>
                        
                  <th>Result</th>
                        
                  <th>Comment</th>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To allow different formats for positive, negative, and zero values, the format string can contain between one and three sections separated by semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">One section: The format string applies to all values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Two sections: The first section applies to positive values and zeros, and the second section applies to negative values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Three sections: The first section applies to positive values, the second applies to negative values, and the third applies to zeros. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the section for negative values or the section for zero values is empty, that is, if there is nothing between the semicolons that delimit the section, the section for positive values is used instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the section for positive values is empty, or if the entire format string is empty, the value is formatted using general floating-point formatting with 15 significant digits. General floating-point formatting is also used if the value has more than 18 digits to the left of the decimal point and the format string does not specify scientific notation.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.EditFormat">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines how a numeric field's value is formatted when it is being edited in a data-aware control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DB" class="TNumericField">EditFormat</property> property to override the formatting of a field when the field's value is being edited in a data-aware control. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TNumericField">EditFormat</property> is unassigned, but the DisplayFormat property has a value, the DisplayFormat string is used.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of <property namespace="DB" class="TNumericField">EditFormat</property> is a string that encodes the formatting of numeric data using the specifiers in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Specifier</th>
                        
                  <th>Represents</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>0</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digit placeholder. If the value being formatted has a digit in the position where the "0" appears in the format string, then that digit is copied to the output string. Otherwise, a "0" is stored in that position in the output string.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>#</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digit placeholder. If the value being formatted has a digit in the position where the "#" appears in the format string, then that digit is copied to the output string. Otherwise, nothing is stored in that position in the output string.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Decimal point. The first "." character in the format string determines the location of the decimal separator in the formatted value; any additional "." characters are ignored. The actual character used as a the decimal separator in the output string is determined by the DecimalSeparator global variable. The default value of DecimalSeparator is specified in the Number Format of the Regional Settings section in the Windows Control Panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>,</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Thousand separator. If the format string contains one or more "," characters, the output will have thousand separators inserted between each group of three digits to the left of the decimal point. The placement and number of "," characters in the format string does not affect the output, except to indicate that thousand separators are wanted. The actual character used as a the thousand separator in the output is determined by the ThousandSeparator global variable. The default value of ThousandSeparator is specified in the Number Format of the Regional Settings section in the Windows Control Panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>E+</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Scientific notation. If any of the strings "E+", "E-", "e+", or "e-" are contained in the format string, the number is formatted using scientific notation. A group of up to four "0" characters can immediately follow the "E+", "E-", "e+", or "e-" to determine the minimum number of digits in the exponent. The "E+" and "e+" formats cause a plus sign to be output for positive exponents and a minus sign to be output for negative exponents. The "E-" and "e-" formats output a sign character only for negative exponents.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>'xx'/"xx"</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Characters enclosed in single or double quotes are output as-is, and do not affect formatting.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>;</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Separates sections for positive, negative, and zero numbers in the format string.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The locations of the leftmost "0" before the decimal point in the format string and the rightmost "0" after the decimal point in the format string determine the range of digits that are always present in the output string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The number being formatted is always rounded to as many decimal places as there are digit placeholders ("0" or "#") to the right of the decimal point. If the format string contains no decimal point, the value being formatted is rounded to the nearest whole number.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the number being formatted has more digits to the left of the decimal separator than there are digit placeholders to the left of the "." character in the format string, the extra digits are output before the first digit placeholder.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To allow different formats for positive, negative, and zero values, the format string can contain between one and three sections separated by semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">One section: The format string applies to all values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Two sections: The first section applies to positive values and zeros, and the second section applies to negative values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Three sections: The first section applies to positive values, the second applies to negative values, and the third applies to zeros. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the section for negative values or the section for zero values is empty, that is if there is nothing between the semicolons that delimit the section, the section for positive values is used instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the section for positive values is empty, or if the entire format string is empty, the value is formatted using general floating-point formatting with 15 significant digits. General floating-point formatting is also used if the value has more than 18 digits to the left of the decimal point and the format string does not specify scientific notation.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TNumericField">EditFormat</property> affects only the display of the field's data when it is being edited. It does not affect the validity of strings assigned to a numeric field using the AsString property, nor does it affect the display of the field's data when it is not being edited.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TIntegerField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TIntegerField</class> represents a signed 32-bit integer field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TIntegerField</class> encapsulates the fundamental behavior common to fields that contain integer data. Integer fields can hold values in the range -2,147,483,648 to 2,147,483,647, and are frequently used to hold values that are large, signed whole numbers. In addition to the properties, methods, and events common to all fields that are introduced by the TField class, <class namespace="DB">TIntegerField</class> introduces new properties to convert between integer values and other data types, and to limit the range of valid integers that the field will permit.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the integer field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TIntegerField</class> instance using the dataset's Fields property or FieldByName method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TIntegerField</class> is the direct ancestor of three other field types that represent whole numbers: TAutoIncField, TSmallIntField, and TWordField.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TIntegerField">Create</method>s an instance of <method namespace="DB" class="TIntegerField">TIntegerField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TIntegerField">TIntegerField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TIntegerField">Create</method> sets the DataType property to ftInteger, MinValue to -2147483648, and MaxValue to 2147483647. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TIntegerField">Create</method> to create and initialize an instance of <method namespace="DB" class="TIntegerField">TIntegerField</method>. After instantiating a <method namespace="DB" class="TIntegerField">TIntegerField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TIntegerField">TIntegerField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TIntegerField">TIntegerField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TIntegerField">TIntegerField</method> object for a field named Quantity accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TIntegerField;
begin
  SQLDataSet1.Close;
  T := TIntegerField.Create(SQLDataSet1);
  T.FieldName := 'Quantity';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TIntegerField *T = new TIntegerField(SQLDataSet1);
T-&gt;FieldName = "Quantity";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the integer field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TIntegerField">Value</property> to read data directly from and write data directly to an integer field. Using the <property namespace="DB" class="TIntegerField">Value</property> property is the same as using the AsInteger property. Use <property namespace="DB" class="TIntegerField">Value</property> when you know the field component is a 32-bit integer field. Use AsInteger when working with a generic field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MaxValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the maximum value in the integer field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TIntegerField">MaxValue</property> to get or set the maximum value that can be entered into the field. If a value greater than <property namespace="DB" class="TIntegerField">MaxValue</property> is entered, an EDatabaseError exception is raised.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the value of <property namespace="DB" class="TIntegerField">MaxValue</property> is 0, the integer field can have a value up to the maximum value that can be represented by the native database type. For 32-bit integer fields, this value is 2147483647.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MinValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the minimum value in the integer field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TIntegerField">MinValue</property> to get or set the minimum value that can be entered into the field. If a value smaller than <property namespace="DB" class="TIntegerField">MinValue</property> is entered, an EDatabaseError exception is raised.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the value of <property namespace="DB" class="TIntegerField">MinValue</property> is 0, the integer field can have a value as small as the native database type can represent. For 32-bit integer fields, this minimum value is -2147483648.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TSmallintField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TSmallIntField represents a signed 16-bit integer field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TSmallIntField encapsulates the fundamental behavior common to small-integer fields. Small-integer fields can hold values in the range -32768 to 32767, and are used to hold values that are signed 16-bit whole numbers.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the small integer field, you can access it by name at runtime. When using dynamic field components, you can access the TSmallIntField instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TSmallintField">Create</method>s an instance of a TSmallIntField object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of TSmallIntField. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TSmallintField">Create</method> sets the DataType property to ftSmallInt, MinValue to -32768, and MaxValue to 32767. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TSmallintField">Create</method> to create and initialize an instance of TSmallIntField. After instantiating a TSmallIntField, associate it with a specific field by setting its FieldName property to the name of the field. Give the TSmallIntField a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the TSmallIntField with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a TSmallIntField object for a field named Children accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TSmallintField;
begin
  SQLDataSet1.Close;
  T := TSmallintField.Create(SQLDataSet1);
  T.FieldName := 'Children';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TSmallintField *T = new TSmallintField(SQLDataSet1);
T-&gt;FieldName = "Children";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TLargeintField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A <class namespace="DB">TLargeintField</class> object represents a large integer field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TLargeintField</class> fields are database fields that contain large (64-bit) integer values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the large integer field, you can access it by name at runtime. When using dynamic field components, you can access the TIntegerField instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TLargeintField">Create</method> creates an instance of <method namespace="DB" class="TLargeintField">TLargeintField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TLargeintField">TLargeintField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TLargeintField">Create</method> sets the DataType property to ftLargeint, and valid characters to '+', '-', and '0'..'9'. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TLargeintField">Create</method> to create and initialize an instance of <method namespace="DB" class="TLargeintField">TLargeintField</method>. After instantiating a <method namespace="DB" class="TLargeintField">TLargeintField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TLargeintField">TLargeintField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TLargeintField">TLargeintField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TLargeintField">TLargeintField</method> object for a field named Population accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TLargeintField;
begin
  SQLDataSet1.Close;
  T := TLargeintField.Create(SQLDataSet1);
  T.FieldName := 'Population';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TLargeintField *T = new TLargeintField(SQLDataSet1);
T-&gt;FieldName = "Population";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsLargeInt">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the field value as a large integer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TLargeintField">AsLargeInt</property> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assign the large integer field value to a 64-bit integer variable.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assign a 64-bit integer value to the large integer field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, this code assigns a 64-bit integer value to a large integer field:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">MyLargeIntegerField.AsLargeInt := 2147483648;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">MyLargeIntegerField-&gt;AsLargeInt = 2147483648;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To assign a large integer field value to a 64-bit integer, use code similar to this:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">LargeIntegerVariable := MyLargeIntegerField.AsLargeInt;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">LargeIntVariable = MyLargeIntegerField-&gt;AsLargeInt;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a value assigned to the field is not within the range established by the MinValue and MaxValue properties, an EDatabaseError exception is raised.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the large integer field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TLargeintField">Value</property> to read data directly from and write data directly to a large integer field. Using the <property namespace="DB" class="TLargeintField">Value</property> property is the same as using the AsLargeInt property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a value assigned to the field is not within the range established by the Min<property namespace="DB" class="TLargeintField">Value</property> and the Max<property namespace="DB" class="TLargeintField">Value</property> properties, an EDatabaseError exception is raised.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MaxValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the maximum value in the large integer field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TLargeintField">MaxValue</property> to get or set the maximum value that can be entered into the field. If a value greater than <property namespace="DB" class="TLargeintField">MaxValue</property> is entered, an EDatabaseError exception is raised.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the value of <property namespace="DB" class="TLargeintField">MaxValue</property> is 0, the large integer field can have a value up to the maximum value that can be represented by the native database type. For 64-bit integer fields, this value is 2 ^63 - 1.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MinValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the minimum value in the large integer field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TLargeintField">MinValue</property> to get or set the minimum value that can be entered into the field. If a value smaller than <property namespace="DB" class="TLargeintField">MinValue</property> is entered, an EDatabaseError exception is raised.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the value of <property namespace="DB" class="TLargeintField">MinValue</property> is 0, the large integer field can have a value as small as the native database type can represent. For 64-bit integer fields, this minimum value is -2 ^63 </para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TWordField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TWordField</class> represents an unsigned 16-bit integer field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TWordField</class> encapsulates the fundamental behavior common to fields that contain unsigned integer data. Word fields can hold values in the range 0 to 65535, and are used to hold values that are unsigned 16-bit whole numbers.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the word field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TWordField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TWordField">Create</method>s an instance of <method namespace="DB" class="TWordField">TWordField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TWordField">TWordField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TWordField">Create</method> sets the DataType property to ftWord, MinValue to 0, and MaxValue to 65535. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TWordField">Create</method> to create and initialize an instance of <method namespace="DB" class="TWordField">TWordField</method>. After instantiating a <method namespace="DB" class="TWordField">TWordField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TWordField">TWordField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TWordField">TWordField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TWordField">TWordField</method> object for a field named Counter accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TWordField;
begin
  SQLDataSet1.Close;
  T := TWordField.Create(SQLDataSet1);
  T.FieldName := 'Counter';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TWordField *T = new TWordField(SQLDataSet1);
T-&gt;FieldName = "Counter";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TAutoIncField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TAutoIncField</class> is a persistent field object for an autoincrement field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TAutoIncField</class> provides access to an autoincrement field in a table. Autoincrement fields can hold values in the range -2,147,483,648 to 2,147,483,647, and are used as a counter for the records in the dataset. Each record is given a unique value in an autoincrement field, with each record receiving the next highest integer from that of the previously inserted record. Autoincrement fields are commonly used to provide a unique primary key value for a record.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Auto-incrementing fields are a function of the database back-end. An application should not attempt to set a field value for an autoincrement field (with or without a <class namespace="DB">TAutoIncField</class> object).</para>
            
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the auto-incrementing field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TAutoIncField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TAutoIncField">Create</method>s an instance of <method namespace="DB" class="TAutoIncField">TAutoIncField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TAutoIncField">TAutoIncField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the inherited constructor, <method namespace="DB" class="TAutoIncField">Create</method> sets the DataType property to ftAutoInc. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TAutoIncField">Create</method> to create and initialize an instance of <method namespace="DB" class="TAutoIncField">TAutoIncField</method>. After instantiating a <method namespace="DB" class="TAutoIncField">TAutoIncField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TAutoIncField">TAutoIncField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TAutoIncField">TAutoIncField</method> with a dataset component by setting its DataSet property to the name of the dataset component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TAutoIncField">TAutoIncField</method> object for a field named ID accessed through a TSQLQuery named SQLQuery1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TAutoIncField;
begin
  SQLQuery1.Close;
  T := TAutoIncField.Create(SQLQuery1);
  T.FieldName := 'ID';
  T.Name := SQLQuery1.Name + T.FieldName;
  T.Index := SQLQuery1.FieldCount;
  T.DataSet := SQLQuery1;
  SQLQuery1.FieldDefs.UpDate;
  SQLQuery1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TAutoIncField *T;
SQLQuery1-&gt;Close();
T = new TAutoIncField(SQLQuery1);
T-&gt;FieldName = "ID";
T-&gt;Name = SQLQuery1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLQuery1-&gt;FieldCount;
T-&gt;DataSet = SQLQuery1;
SQLQuery1-&gt;FieldDefs-&gt;UpDate();
SQLQuery1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFloatField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TFloatField</class> represents a field that contains floating-point values in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TFloatField</class> encapsulates the fundamental behavior common to numeric data. Floating-point fields can hold values in the range from (positive or negative) 5.0 * 10^-324 to 1.7 * 10^308 with an accuracy of 15 digits. <class namespace="DB">TFloatField</class> introduces new properties to convert between integer values and other data types, to control the precision of numbers that the field will permit, and to format the value for display purposes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the float field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TFloatField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TFloatField">Create</method>s an instance of <method namespace="DB" class="TFloatField">TFloatField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TFloatField">TFloatField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TFloatField">Create</method> sets the DataType property to ftFloat and Precision to 15. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TFloatField">Create</method> to create and initialize an instance of <method namespace="DB" class="TFloatField">TFloatField</method>. After instantiating a <method namespace="DB" class="TFloatField">TFloatField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TFloatField">TFloatField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TFloatField">TFloatField</method> with a dataset component by setting its DataSet property to the name of the dataset component. Optionally set the Precision property to the desired degree of precision.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TFloatField">TFloatField</method> object for a field named Amount accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TFloatField;
begin
  SQLDataSet1.Close;
  T := TFloatField.Create(SQLDataSet1);
  T.Precision := 2;
  T.FieldName := 'Amount';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TFloatField *T = new TFloatField(SQLDataSet1);
T-&gt;Precision = 2;
T-&gt;FieldName = "Amount";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the floating-point field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TFloatField">Value</property> to read data from and write data to a floating-point component at runtime. Using the <property namespace="DB" class="TFloatField">Value</property> property is the same as using the AsFloat property. Use <property namespace="DB" class="TFloatField">Value</property> when you know the field component is a floating-point field. Use AsFloat when working with a generic field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.currency">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the value in the field should be formatted as a <property namespace="DB" class="TFloatField">currency</property> value. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DB" class="TFloatField">currency</property> property to specify the formatting of the field for viewing and editing in a data-aware control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The field is formatted for display using the DisplayFormat property if it is assigned. If DisplayFormat is not assigned, <property namespace="DB" class="TFloatField">currency</property> determines how the field is formatted for display. If Currency is true<condition language="CBuilder">,</condition> the value is formatted for display using the FloatToText function with the ffCurrency formatting code. If Currency is false, the value is formatted with the ffGeneral format.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The field is formatted for editing purposes using the EditFormat (or DisplayFormat) property if it is assigned. If neither EditFormat nor DisplayFormat is assigned, Currency determines how the field is formatted for editing. If Currency is true, the value is formatted for editing using the FloatToText function with the ffFixed formatting code. If Currency is false, the value is formatted with the ffGeneral format.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MaxValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the maximum value in the floating-point field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TFloatField">MaxValue</property> to get or set the maximum value that can be entered into the field. If a value greater than <property namespace="DB" class="TFloatField">MaxValue</property> is entered, an EDatabaseError exception is raised.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MinValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the minimum value in the floating-point field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TFloatField">MinValue</property> to get or set the minimum value that can be entered into the field. If a value smaller than <property namespace="DB" class="TFloatField">MinValue</property> is entered, an EDatabaseError exception is raised.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Precision">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines the precision used in formatting the value in a floating-point field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TFloatField">Precision</property> to set the number of digits beyond the decimal point that the value should be formatted to before rounding begins. <property namespace="DB" class="TFloatField">Precision</property> affects the format of the floating-point value when it is displayed as a text string, not the actual floating-point value that is stored in the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The default value of <property namespace="DB" class="TFloatField">Precision</property> is 15 decimal places.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TFloatField">Precision</property> must be greater than or equal to 2. Trying to set <property namespace="DB" class="TFloatField">Precision</property> to a value less than 2 changes the value of <property namespace="DB" class="TFloatField">Precision</property> to 2.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TCurrencyField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TCurrencyField</class> represents a field that contains currency values in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TCurrencyField</class> encapsulates the fundamental behavior common to currency fields. <class namespace="DB">TCurrencyField</class> differs from its immediate ancestor TFloatField only in having a DataType of ftCurrency, and in formatting the value using a currency format (one that represents monetary values) by default. Currency fields can hold values in the range from (positive or negative) 5.0 * 10^-324 to 1.7 * 10^308 with an accuracy of 15 digits. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not confuse <class namespace="DB">TCurrencyField</class> with the Currency data type. Currency fields use the double data type to store and manipulate their values. This data type is the format used by the physical database tables for currency fields. The TBCDField class uses the Currency data type to store and manipulate its value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the currency field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TCurrencyField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCurrencyField">Create</method>s an instance of <method namespace="DB" class="TCurrencyField">TCurrencyField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TCurrencyField">TCurrencyField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TCurrencyField">Create</method> sets the DataType property to ftCurrency and the Currency property to true. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TCurrencyField">Create</method> to create and initialize an instance of <method namespace="DB" class="TCurrencyField">TCurrencyField</method>. After instantiating a <method namespace="DB" class="TCurrencyField">TCurrencyField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TCurrencyField">TCurrencyField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TCurrencyField">TCurrencyField</method> with a dataset component by setting its DataSet property to the name of the dataset component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TCurrencyField">TCurrencyField</method> object for a field named Amount accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TCurrencyField;
begin
  SQLDataSet1.Close;
  T := TCurrencyField.Create(SQLDataSet1);
  T.FieldName := 'Amount';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TCurrencyField *T = new TCurrencyField(SQLDataSet1);
T-&gt;FieldName = "Amount";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBooleanField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBooleanField</class> represents a field containing Boolean values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBooleanField</class> encapsulates the fundamental behavior common to Boolean data. Boolean fields can hold values of true or false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In addition to the properties, methods, and events common to all fields that are introduced by the TField class, <class namespace="DB">TBooleanField</class> introduces new properties to convert between boolean values and other data types, and to provide display strings that represent various interpretations of the data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the boolean field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TBooleanField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Instantiates a Boolean field object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TBooleanField">TBooleanField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TBooleanField">Create</method> sets the DataType property to ftBoolean and initializes the strings associated with Boolean values to 'True' and 'False'. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TBooleanField">Create</method> to create and initialize an instance of <method namespace="DB" class="TBooleanField">TBooleanField</method>. After instantiating a <method namespace="DB" class="TBooleanField">TBooleanField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TBooleanField">TBooleanField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TBooleanField">TBooleanField</method> with a dataset component by setting its DataSet property to the name of the dataset component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TBooleanField">TBooleanField</method> object for a field named PaidInFull accessed through a TClientDataSet named ClientDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TBooleanField;
begin
  ClientDataSet1.Close;
  T := TBooleanField.Create(ClientDataSet1);
  T.FieldName := 'PaidInFull';
  T.Name := ClientDataSet1.Name + T.FieldName;
  T.Index := ClientDataSet1.FieldCount;
  T.DataSet := ClientDataSet1;
  ClientDataSet1.FieldDefs.UpDate;
  ClientDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">ClientDataSet1-&gt;Close();
TBooleanField *T = new TBooleanField(ClientDataSet1);
T-&gt;FieldName = "PaidInFull";
T-&gt;Name = ClientDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = ClientDataSet1-&gt;FieldCount;
T-&gt;DataSet = ClientDataSet1;
ClientDataSet1-&gt;FieldDefs-&gt;UpDate();
ClientDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the data in the Boolean field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TBooleanField">Value</property> to read data from and write data to a Boolean field object at runtime. Using <property namespace="DB" class="TBooleanField">Value</property> is the same as using the AsBoolean property. Use <property namespace="DB" class="TBooleanField">Value</property> when you know the field component is a Boolean field. Use AsBoolean when working with a generic field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayValues">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls how the Boolean field is translated to and from display format.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TBooleanField">DisplayValues</property> to specify strings the field uses to represent Boolean values. Use any pair of phrases, separated by a semicolon. For example, to have the true and false values correspond to the letters T and F, respectively, set <property namespace="DB" class="TBooleanField">DisplayValues</property> as follows:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On Windows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Table1LogicalField.DisplayValues := 'T;F';</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On cross-platform:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ClientDataSet1LogicalField.DisplayValues := 'T;F';</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On Windows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Table1LogicalField-&gt;DisplayValues = "T;F";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On cross-platform:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ClientDataSet1LogicalField-&gt;DisplayValues = "T;F";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Similarly, to set the values of true and false to the strings Yes and No, set <property namespace="DB" class="TBooleanField">DisplayValues</property> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On Windows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Table1LogicalField.DisplayValues := 'Yes;No';</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On cross-platform:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ClientDataSet1LogicalField.DisplayValues := 'Yes;No';</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On Windows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Table1LogicalField -&gt;DisplayValues = "Yes;No";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On cross-platform:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ClientDataSet1LogicalField -&gt;DisplayValues = "Yes;No";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The string associated with true or false can be an empty string. To set the value for true to an empty string, set <property namespace="DB" class="TBooleanField">DisplayValues</property> to a string that begins with a semicolon. For example, to associate false with the string Fail, and true with an empty string, set <property namespace="DB" class="TBooleanField">DisplayValues</property> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On Windows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Table1LogicalField.DisplayValues := ';Fail';</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On cross-platform:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ClientDataSet1LogicalField.DisplayValues := ';Fail';</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On Windows:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Table1LogicalField -&gt;DisplayValues = ";Fail";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On cross-platform:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ClientDataSet1LogicalField -&gt;DisplayValues = ";Fail";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To associate false with an empty string, set <property namespace="DB" class="TBooleanField">DisplayValues</property> to the string for true, with no semicolon at all.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The strings associated with true and false by <property namespace="DB" class="TBooleanField">DisplayValues</property> appear in data-aware controls when they display the data for a Boolean field. If one of the strings is an empty string, boolean values associated with that string appear blank in data-aware controls.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">These strings are also used when getting or setting the Boolean field's AsString property.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDateTimeField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDateTimeField</class> represents a date-time field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDateTimeField</class> encapsulates the fundamental behavior common to Date-time fields. Date-time fields contain combined date and time information, sometimes called timestamps. <class namespace="DB">TDateTimeField</class> introduces new properties to convert between date-time values and other data types, and to format the value of a date-time field for display.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Data-time values accessed through dbExpress use TSQLTimeStampField instead of <class namespace="DB">TDateTimeField</class>
               
               </para>
            
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the date-time field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TDateTimeField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDateTimeField">Create</method>s and initializes a <method namespace="DB" class="TDateTimeField">TDateTimeField</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TDateTimeField">TDateTimeField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDateTimeField">Create</method> sets the DataType property to ftDateTime. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TDateTimeField">Create</method> to create and initialize an instance of <method namespace="DB" class="TDateTimeField">TDateTimeField</method>. After instantiating a <method namespace="DB" class="TDateTimeField">TDateTimeField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TDateTimeField">TDateTimeField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TDateTimeField">TDateTimeField</method> with a dataset component by setting its DataSet property to the name of the dataset component. Optionally set the DisplayFormat property to the desired date and time format.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TDateTimeField">TDateTimeField</method> object for a field named CheckOut accessed through a TClientDataSet named ClientDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TDateTimeField;
begin
  ClientDataSet1.Close;
  T := TDateTimeField.Create(ClientDataSet1);
  T.FieldName := 'CheckOut';
  T.Name := ClientDataSet1.Name + T.FieldName;
  T.Index := ClientDataSet1.FieldCount;
  T.DataSet := ClientDataSet1;
  T.DisplayFormat := 'mm/dd/yyyy hh:nn:ss ampm';
  ClientDataSet1.FieldDefs.UpDate;
  ClientDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">ClientDataSet1-&gt;Close();
TDateTimeField *T = new TDateTimeField(ClientDataSet1);
T-&gt;FieldName = "CheckOut";
T-&gt;Name = ClientDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = ClientDataSet1-&gt;FieldCount;
T-&gt;DataSet = ClientDataSet1;
T-&gt;DisplayFormat = "mm//dd//yyyy hh:nn:ss ampm";
ClientDataSet1-&gt;FieldDefs-&gt;UpDate();
ClientDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the data in the date-time field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDateTimeField">Value</property> to read data directly from and write data directly to a date-time field component at runtime. <property namespace="DB" class="TDateTimeField">TDateTimeField</property> components store and manipulate their data as TDateTime values. Thus, for date-time fields, the <property namespace="DB" class="TDateTimeField">Value</property> property is the same as the AsDateTime property.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  DT: TDateTime;
begin
  DT := Table1DateField.Value;
  ShowMessage(DateTimeToStr(DT));
end;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayFormat">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls the formatting of the date-time field for display purposes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDateTimeField">DisplayFormat</property> to specify the formatting string to use for formatting the value in a date-time field when the field's value appears as a string. If <property namespace="DB" class="TDateTimeField">DisplayFormat</property> is not assigned a string, the value is formatted according to the default date-time format<condition os="Windows"> specified by the Windows Control Panel</condition>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TDateTimeField">DisplayFormat</property> does not affect the value of the AsString property.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Construct a <property namespace="DB" class="TDateTimeField">DisplayFormat</property> string using these format specifiers:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Specifier</th>
                        
                  <th>Displays</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>c</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the ShortDateFormat global variable, followed by the time using the format given by the LongTimeFormat global variable. The time is not displayed if the fractional part of the DateTime value is zero.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>d</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a number without a leading zero (1-31).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a number with a leading zero (01-31).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as an abbreviation (Sun-Sat) using the strings given by the ShortDayNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a full name (Sunday-Saturday) using the strings given by the LongDayNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ddddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the ShortDateFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dddddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the LongDateFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>m</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a number without a leading zero (1-12). If the m specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a number with a leading zero (01-12). If the mm specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mmm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as an abbreviation (Jan-Dec) using the strings given by the ShortMonthNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mmmm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a full name (January-December) using the strings given by the LongMonthNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>yy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The year as a two-digit number (00-99).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>yyyy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The year as a four-digit number (0000-9999).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>h</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The hour without a leading zero (0-23).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>hh</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The hour with a leading zero (00-23).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>n</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The minute without a leading zero (0-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>nn</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The minute with a leading zero (00-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>s</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The second without a leading zero (0-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ss</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The second with a leading zero (00-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>t</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the format given by the ShortTimeFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tt</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the format given by the LongTimeFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>am/pm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by "am" for any hour before noon, or "pm" for any hour after noon. The am/pm specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>a/p</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by "a" for any hour before noon, or "p" for any hour after noon. The a/p specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ampm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by the contents of the TimeAMString global variable for any hour before noon, or the contents of the TimePMString global variable for any hour after noon.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>/</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date separator character given by the DateSeparator global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>:</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time separator character given by the TimeSeparator global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>'xx'/"xx"</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Characters enclosed in single or double quotes are displayed as-is, with no formatting changes.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Format specifiers may be written in uppercase or lowercase letters; both produce the same result.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the string given by the Format parameter is empty, the date and time value is formatted as if a c format specifier had been given.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TSQLTimeStampField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TSQLTimeStampField</class> represents a date-time field in a DBExpress dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TSQLTimeStampField</class> encapsulates the fundamental behavior common to Date-time fields. Date-time fields contain combined date and time information, sometimes called timestamps. <class namespace="DB">TSQLTimeStampField</class> uses the TSQLTimeStamp type to work with date-time values internally. This is the type used by DBExpress drivers for representing date and time values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the SQL timestamp field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TSQLTimeStampField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TSQLTimeStampField">Create</method>s and initializes a <method namespace="DB" class="TSQLTimeStampField">TSQLTimeStampField</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TSQLTimeStampField">TSQLTimeStampField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TSQLTimeStampField">Create</method> sets the DataType property to ftTimeStamp. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TSQLTimeStampField">Create</method> to create and initialize an instance of <method namespace="DB" class="TSQLTimeStampField">TSQLTimeStampField</method>. After instantiating a <method namespace="DB" class="TSQLTimeStampField">TSQLTimeStampField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TSQLTimeStampField">TSQLTimeStampField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TSQLTimeStampField">TSQLTimeStampField</method> with a dataset component by setting its DataSet property to the name of the dataset component. Optionally set the DisplayFormat property to the desired date and time format.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TSQLTimeStampField">TSQLTimeStampField</method> object for a field named CheckOut accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TSQLTimeStampField;
begin
  SQLDataSet1.Close;
  T := TSQLTimeStampField.Create(SQLDataSet1);
  T.FieldName := 'CheckOut';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  T.DisplayFormat := 'mm/dd/yyyy hh:nn:ss ampm';
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TSQLTimeStampField *T = new TSQLTimeStampField(SQLDataSet1);
T-&gt;FieldName = "CheckOut";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
T-&gt;DisplayFormat = "mm//dd//yyyy hh:nn:ss ampm";
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the data in the SQL timestamp field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TSQLTimeStampField">Value</property> to read data directly from and write data directly to a SQL timestamp field component at runtime. <property namespace="DB" class="TSQLTimeStampField">TSQLTimeStampField</property> components store and manipulate their data as TSQLTimeStamp values. Thus, for SQL timestamp fields, the <property namespace="DB" class="TSQLTimeStampField">Value</property> property is the same as the AsSQLTimeStamp property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayFormat">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Controls the formatting of the SQL timestamp field for display purposes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TSQLTimeStampField">DisplayFormat</property> to specify the formatting string to use for formatting the value in a SQL timestamp field when the field's value appears as a string. If <property namespace="DB" class="TSQLTimeStampField">DisplayFormat</property> is not assigned a string, the value is formatted according to the default date-time format<condition os="Windows"> specified by the Windows Control Panel</condition>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TSQLTimeStampField">DisplayFormat</property> does not affect the value of the AsString property.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Construct a <property namespace="DB" class="TSQLTimeStampField">DisplayFormat</property> string using these format specifiers:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Specifier</th>
                        
                  <th>Displays</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>c</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the ShortDateFormat global variable, followed by the time using the format given by the LongTimeFormat global variable. The time is not displayed if the fractional part of the DateTime value is zero.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>d</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a number without a leading zero (1-31).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a number with a leading zero (01-31).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as an abbreviation (Sun-Sat) using the strings given by the ShortDayNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a full name (Sunday-Saturday) using the strings given by the LongDayNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ddddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the ShortDateFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dddddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the LongDateFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>m</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a number without a leading zero (1-12). If the m specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a number with a leading zero (01-12). If the mm specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mmm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as an abbreviation (Jan-Dec) using the strings given by the ShortMonthNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mmmm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a full name (January-December) using the strings given by the LongMonthNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>yy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The year as a two-digit number (00-99).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>yyyy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The year as a four-digit number (0000-9999).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>h</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The hour without a leading zero (0-23).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>hh</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The hour with a leading zero (00-23).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>n</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The minute without a leading zero (0-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>nn</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The minute with a leading zero (00-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>s</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The second without a leading zero (0-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ss</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The second with a leading zero (00-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>t</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the format given by the ShortTimeFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tt</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the format given by the LongTimeFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>am/pm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by "am" for any hour before noon, or "pm" for any hour after noon. The am/pm specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>a/p</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by "a" for any hour before noon, or "p" for any hour after noon. The a/p specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ampm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by the contents of the TimeAMString global variable for any hour before noon, or the contents of the TimePMString global variable for any hour after noon.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>/</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date separator character given by the DateSeparator global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>:</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time separator character given by the TimeSeparator global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>'xx'/"xx"</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Characters enclosed in single or double quotes are displayed as-is, with no formatting changes.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Format specifiers may be written in uppercase or lowercase letters; both produce the same result.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the string given by the Format parameter is empty, the date and time value is formatted as if a c format specifier had been given.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDateField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDateField</class> represents a date field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDateField</class> encapsulates the fundamental behavior common to Date fields. Date fields contain date values (without any time value), which they manage using the TDateTime type (Delphi) or class (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the date field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TDateField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDateField">Create</method>s an instance of <method namespace="DB" class="TDateField">TDateField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TDateField">TDateField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDateField">Create</method> sets the DataType property to ftDate. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TDateField">Create</method> to create and initialize an instance of <method namespace="DB" class="TDateField">TDateField</method>. After instantiating a <method namespace="DB" class="TDateField">TDateField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TDateField">TDateField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TDateField">TDateField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TDateField">TDateField</method> object for a field named LastContact accessed through a TClientDataSet named ClientDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TDateField;
begin
  ClientDataSet1.Close;
  T := TDateField.Create(ClientDataSet1);
  T.FieldName := 'LastContact';
  T.Name := ClientDataSet1.Name + T.FieldName;
  T.Index := ClientDataSet1.FieldCount;
  T.DataSet := ClientDataSet1;
  T.DisplayFormat := 'mm/dd/yyyy';
  ClientDataSet1.FieldDefs.UpDate;
  ClientDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">ClientDataSet1-&gt;Close();
TDateField *T = new TDateField(ClientDataSet1);
T-&gt;FieldName = "LastContact";
T-&gt;Name = ClientDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = ClientDataSet1-&gt;FieldCount;
T-&gt;DataSet = ClientDataSet1;
T-&gt;DisplayFormat = "mm//dd//yyyy";
ClientDataSet1-&gt;FieldDefs-&gt;UpDate();
ClientDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TTimeField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TTimeField</class> represents a time field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TTimeField</class> encapsulates the fundamental behavior common to fields that contain time values. Time fields contain time values (without any date), which they manage using the TDateTime type (Delphi) or class (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the time field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TTimeField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TTimeField">Create</method>s and initializes an instance of <method namespace="DB" class="TTimeField">TTimeField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TTimeField">TTimeField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TTimeField">Create</method> sets the DataType property to ftTime. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TTimeField">Create</method> to create and initialize an instance of <method namespace="DB" class="TTimeField">TTimeField</method>. After instantiating a <method namespace="DB" class="TTimeField">TTimeField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TTimeField">TTimeField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TTimeField">TTimeField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">The example below creates a <method namespace="DB" class="TTimeField">TTimeField</method> object for a field named CheckOutTime accessed through a TQuery named Query1.</condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TimeField;
begin
  Query1.Close;
  T := TTimeField.Create(Query1);
  T.FieldName := 'CheckOutTime';
  T.Name := Query1.Name + T.FieldName;
  T.Index := Query1.FieldCount;
  T.DataSet := Query1;
  Query1.FieldDefs.UpDate;
  Query1.Open;
end;</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBinaryField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBinaryField</class> represents an untyped binary field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBinaryField</class> encapsulates the fundamental behavior common to untyped binary fields. In addition to the properties, methods, and events common to all fields that are introduced by the TField class, <class namespace="DB">TBinaryField</class> reimplements the properties that are used to read and write binary data from or to the underlying database table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the binary field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TBinaryField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TBinaryField">Create</method>s an instance of <method namespace="DB" class="TBinaryField">TBinaryField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TBinaryField">TBinaryField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TBinaryField">Create</method> to create and initialize an instance of <method namespace="DB" class="TBinaryField">TBinaryField</method>. After instantiating a <method namespace="DB" class="TBinaryField">TBinaryField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TBinaryField">TBinaryField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TBinaryField">TBinaryField</method> with a dataset component by setting its DataSet property to the name of the dataset component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TBinaryField">TBinaryField</method> object for a field named RawData accessed through a TSQLQuery named SQLQuery1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TBinaryField;
begin
  SQLQuery1.Close;
  T := TBinaryField.Create(SQLQuery1);
  T.FieldName := 'RawData';
  T.Name := SQLQuery1.Name + T.FieldName;
  T.Index := SQLQuery1.FieldCount;
  T.DataSet := SQLQuery1;
  SQLQuery1.FieldDefs.UpDate;
  SQLQuery1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TBinaryField *T;
SQLQuery1-&gt;Close();
T = new TBinaryField(SQLQuery1);
T-&gt;FieldName = "RawData";
T-&gt;Name = SQLQuery1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLQuery1-&gt;FieldCount;
T-&gt;DataSet = SQLQuery1;
SQLQuery1-&gt;FieldDefs-&gt;UpDate();
SQLQuery1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBytesField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBytesField</class> represents a bytes field in a dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBytesField</class> encapsulates the fundamental behavior common to bytes fields. A bytes field value is a set of unformatted bytes of fixed size.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the bytes field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TBytesField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TBytesField">Create</method>s an instance of <method namespace="DB" class="TBytesField">TBytesField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TBytesField">TBytesField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TBytesField">Create</method> sets the DataType property to ftBytes. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TBytesField">Create</method> to create and initialize an instance of <method namespace="DB" class="TBytesField">TBytesField</method>. After instantiating a <method namespace="DB" class="TBytesField">TBytesField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TBytesField">TBytesField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TBytesField">TBytesField</method> with a dataset component by setting its DataSet property to the name of the dataset component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TBytesField">TBytesField</method> object for a field named BytesField accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TBytesField;
begin
  SQLDataSet1.Close;
  T := TBytesField.Create(SQLDataSet1);
  T.FieldName := 'BytesField';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TBytesField *T = new TBytesField(SQLDataSet1);
T-&gt;FieldName = "BytesField";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TVarBytesField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TVarBytesField</class> represents a variable-length untyped binary field in a dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A variable bytes field value is a set of bytes of variable size, with the actual length of the value stored in the first two bytes. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the variable bytes field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TVarBytesField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TVarBytesField">Create</method>s an instance of <method namespace="DB" class="TVarBytesField">TVarBytesField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">It is seldom necessary to call <method namespace="DB" class="TVarBytesField">Create</method> directly, because a VarBytes field object is instantiated automatically for all variable bytes fields in a dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TVarBytesField">Create</method> sets the DataType to ftVarBytes and initializes the Size property to 16.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBCDField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBCDField</class> represents a binary-coded decimal (BCD) field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBCDField</class> encapsulates the fundamental behavior common to binary-coded decimal (BCD) fields. BCD values provide greater precision and accuracy than floating-point numbers. BCD fields are often used for storing and manipulating monetary values. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The IDE uses two different field types for representing BCD fields: <class namespace="DB">TBCDField</class> and TFM<class namespace="DB">TBCDField</class>. <class namespace="DB">TBCDField</class> uses the Currency (Delphi) or System::Currency (C++) type to manipulate BCD values. This is faster than storing and manipulating the value using a true BCD type, but limits the precision of the BCD values it can support to 4 decimal places and 20 significant digits.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBCDField</class> converts the data from a BCD value to a Currency value when it fetches the data from the database table, and converts it from a Currency value to a binary-coded decimal value when it posts the data. If the underlying database table contains a value that requires greater precision, <class namespace="DB">TBCDField</class> raises an exception. If your application requires BCD values with more than 4 decimal places or 20 significant digits, you should use TFM<class namespace="DB">TBCDField</class> instead. TFM<class namespace="DB">TBCDField</class> is a true BCD, with the precision of the binary-coded decimal type (TBCD) but with somewhat slower performance.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the BCD field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TBCDField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TBCDField">Create</method> creates an instance of <method namespace="DB" class="TBCDField">TBCDField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TBCDField">TBCDField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the inherited constructor, <method namespace="DB" class="TBCDField">Create</method> sets the DataType property to ftBCD and initializes Size to 4. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TBCDField">Create</method> to create and initialize an instance of <method namespace="DB" class="TBCDField">TBCDField</method>. After instantiating a <method namespace="DB" class="TBCDField">TBCDField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TBCDField">TBCDField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TBCDField">TBCDField</method> with a dataset component by setting its DataSet property to the name of the dataset component. Specify the precision of the <method namespace="DB" class="TBCDField">TBCDField</method> by setting the Precision property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TBCDField">TBCDField</method> object for a field named Amount accessed through a TSQLQuery named SQLQuery1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TBCDField;
begin
  SQLQuery1.Close;
  T := TBCDField.Create(SQLQuery1);
  T.FieldName := 'Amount';
  T.Name := SQLQuery1.Name + T.FieldName;
  T.Index := SQLQuery1.FieldCount;
  T.DataSet := SQLQuery1;
  T.Precision := 2;
  SQLQuery1.FieldDefs.UpDate;
  SQLQuery1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLQuery1-&gt;Close();
TBCDField *T = new TBCDField(SQLQuery1);
T-&gt;FieldName = "Amount";
T-&gt;Name = SQLQuery1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLQuery1-&gt;FieldCount;
T-&gt;DataSet = SQLQuery1;
SQLQuery1-&gt;FieldDefs-&gt;UpDate();
SQLQuery1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the BCD field as a Currency value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unlike other field types, the <property namespace="DB" class="TBCDField">Value</property> of a binary-coded decimal (BCD) field does not correspond to the physical format of the data that is stored in the underlying database table. The IDE does not have a native type for BCD. Therefore, <property namespace="DB" class="TBCDField">TBCDField</property> converts the data from a BCD value to a Currency value when it fetches the data from the database table, and converts it from a Currency value to a BCD value when it posts the data. For BCD fields, <property namespace="DB" class="TBCDField">Value</property> is the same as the AsCurrency property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Because <property namespace="DB" class="TBCDField">TBCDField</property> works with its data as a Currency value, simply getting the value of the field and posting that value back to the database table can alter the contents of the field. That is, the line below can alter the contents of the field in the database table.</para>
                  
            </note>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">MyBCDField.Value := MyBCDField.Value;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">MyBCDField-&gt;Value = MyBCDField-&gt;Value;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.currency">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the value in the field should be formatted as a <property namespace="DB" class="TBCDField">currency</property> value. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DB" class="TBCDField">currency</property> property to influence how the value in the field should be formatted for viewing and editing in a data-aware control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For display purposes, the field is formatted using the DisplayFormat property if it is assigned. If DisplayFormat is not assigned, <property namespace="DB" class="TBCDField">currency</property> determines how the field is formatted for display. If <property namespace="DB" class="TBCDField">currency</property> is true, the value is formatted for display using the FloatToText function with the ffCurrency formatting code. If <property namespace="DB" class="TBCDField">currency</property> is false, the value is formatted with the ffGeneral format.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For editing purposes, the field is formatted using the EditFormat (or DisplayFormat) property if it is assigned. If neither EditFormat nor DisplayFormat is assigned, <property namespace="DB" class="TBCDField">currency</property> determines how to format the field for editing. If <property namespace="DB" class="TBCDField">currency</property> is true, the value is formatted for editing using the FloatToText function with the ffFixed formatting code. If <property namespace="DB" class="TBCDField">currency</property> is false, the value is formatted with the ffGeneral format.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MaxValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the maximum value in the binary-coded decimal field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TBCDField">MaxValue</property> to get or set the maximum value that can be entered into the field. If a value greater than <property namespace="DB" class="TBCDField">MaxValue</property> is entered, <property namespace="DB" class="TBCDField">TBCDField</property> raises an EDatabaseError exception<condition language="CBuilder">.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Newly created binary-coded decimal (BCD) fields set <property namespace="DB" class="TBCDField">MaxValue</property> to the maximum value that can be expressed by the Currency data type.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MinValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the minimum value in the binary-coded decimal field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TBCDField">MinValue</property> to get or set the minimum value that can be entered into the field. If a value smaller than <property namespace="DB" class="TBCDField">MinValue</property> is entered, <property namespace="DB" class="TBCDField">TBCDField</property> raises an EDatabaseError exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Newly created integer fields set <property namespace="DB" class="TBCDField">MinValue</property> to the minimum value that can be expressed by the Currency data type.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Precision">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of digits of accuracy used to store the field value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TBCDField">Precision</property> can be a value between 0 and 32. However, because <property namespace="DB" class="TBCDField">TBCDField</property> uses the Currency type to work with data from BCD fields, <property namespace="DB" class="TBCDField">TBCDField</property> limits the precision of the BCD values it can support to 4 decimal places and 20 significant digits. The underlying database table may include values that require greater precision, and setting precision to a value greater than 20 allows you to create a table with higher precision.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFMTBCDField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TFMTBCDField</class> represents a binary-coded decimal (BCD) field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TFMTBCDField</class> encapsulates the fundamental behavior common to binary-coded decimal (BCD) fields. BCD values provide greater precision and accuracy than floating-point numbers. BCD fields are often used for storing and manipulating monetary values. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The IDE uses two different field types for representing BCD fields: <class namespace="DB">TFMTBCDField</class> and TBCDField. <class namespace="DB">TFMTBCDField</class> uses a true BCD value (TBCD) to store and manipulate BCD values. This gives greater precision and accuracy than the Currency type used by TBCDField objects, but results in somewhat slower performance. If your application does not require more than 4 decimal places or 20 significant digits, you may want to use TBCDField instead to take advantage of its better performance.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the BCD field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TFMTBCDField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TFMTBCDField">Create</method> creates an instance of <method namespace="DB" class="TFMTBCDField">TFMTBCDField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TFMTBCDField">TFMTBCDField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TFMTBCDField">Create</method> to create and initialize an instance of <method namespace="DB" class="TFMTBCDField">TFMTBCDField</method>. After instantiating a <method namespace="DB" class="TFMTBCDField">TFMTBCDField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TFMTBCDField">TFMTBCDField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TFMTBCDField">TFMTBCDField</method> with a dataset component by setting its DataSet property to the name of the dataset component. Specify the precision of the <method namespace="DB" class="TFMTBCDField">TFMTBCDField</method> by setting the Precision property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TFMTBCDField">TFMTBCDField</method> object for a field named Amount accessed through a TSQLQuery named SQLQuery1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TFMTBCDField;
begin
  SQLQuery1.Close;
  T := TFMTBCDField.Create(SQLQuery1);
  T.FieldName := 'Amount';
  T.Name := SQLQuery1.Name + T.FieldName;
  T.Index := SQLQuery1.FieldCount;
  T.DataSet := SQLQuery1;
  T.Precision := 20;
  SQLQuery1.FieldDefs.UpDate;
  SQLQuery1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLQuery1-&gt;Close();
TFMTBCDField *T = new TFMTBCDField(SQLQuery1);
T-&gt;FieldName = "Amount";
T-&gt;Name = SQLQuery1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLQuery1-&gt;FieldCount;
T-&gt;DataSet = SQLQuery1;
T-&gt;Precision = 20;
SQLQuery1-&gt;FieldDefs-&gt;UpDate();
SQLQuery1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the BCD field as a TBcd value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TFMTBCDField">Value</property> to read data from and write data to a BCD field. Using the <property namespace="DB" class="TFMTBCDField">Value</property> property is the same as using the AsBCD property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a value assigned to the field is not within the range established by the Min<property namespace="DB" class="TFMTBCDField">Value</property> and the Max<property namespace="DB" class="TFMTBCDField">Value</property> properties, an EDatabaseError exception is raised.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.currency">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the value in the field should be formatted as a <property namespace="DB" class="TFMTBCDField">currency</property> value. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DB" class="TFMTBCDField">currency</property> property to influence how the value in the field should be formatted for viewing and editing in a data-aware control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For display purposes, the field is formatted using the DisplayFormat property if it is assigned. Similarly, for editing purposes, the field is formatted using the EditFormat (or DisplayFormat) property if it is assigned.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If DisplayFormat or EditFormat is not assigned, <condition language="Delphi">C</condition>
                     
               <condition language="CBuilder">c</condition>urrency determines how the field is formatted. If <property namespace="DB" class="TFMTBCDField">currency</property> is true, the value is formatted to represent a monetary value. If <property namespace="DB" class="TFMTBCDField">currency</property> is false, it is formatted to reflect the precision and decimal places of the BCD type.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MaxValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the maximum value in the binary-coded decimal field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TFMTBCDField">MaxValue</property> to get or set the maximum value that can be entered into the field. <property namespace="DB" class="TFMTBCDField">MaxValue</property> is the string representation of the maximum value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a value greater than <property namespace="DB" class="TFMTBCDField">MaxValue</property> is entered, <property namespace="DB" class="TFMTBCDField">TFMTBCDField</property> raises an EDatabaseError exception<condition language="CBuilder">.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.MinValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Limits the minimum value in the binary-coded decimal field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TFMTBCDField">MinValue</property> to get or set the minimum value that can be entered into the field. <property namespace="DB" class="TFMTBCDField">MinValue</property> is the string representation of the minimum value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a value smaller than <property namespace="DB" class="TFMTBCDField">MinValue</property> is entered, <property namespace="DB" class="TFMTBCDField">TFMTBCDField</property> raises an EDatabaseError exception.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Precision">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of digits of accuracy used to store the field value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TFMTBCDField">Precision</property> can be a value between 0 and 32. Some database servers support more digits than 32, but these can't be handled by client datasets, and so <property namespace="DB" class="TFMTBCDField">TFMTBCDField</property> limits the value of <property namespace="DB" class="TFMTBCDField">Precision</property> to be no greater than 32. </para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBlobType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBlobType</type> indicates the type of a BLOB field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBlobType</type> represents a range of TFieldType values. These are the possible values of BlobType:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftBlob</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Binary Large Object field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftMemo</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Text memo field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftGraphic</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Bitmap field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftFmtMemo</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Formatted text memo field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftParadoxOle</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Paradox OLE field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftDBaseOle</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>dBASE OLE field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftTypedBinary</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Typed binary field</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftOraBlob</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>BLOB fields in Oracle 8 tables</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ftOraClob</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>CLOB fields in Oracle 8 tables</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBlobField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBlobField</class> represents a field in a dataset that holds a reference to a binary large object (BLOB).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBlobField</class> encapsulates the fundamental behavior common to binary large object (BLOB) fields. BLOB fields are database fields that contain raw binary data of arbitrary length. BLOB fields can represent different arbitrarily large data types. These data types are distinguished in the header of the binary data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In addition to the field types supported directly, <class namespace="DB">TBlobField</class> is the direct ancestor of two BLOB field components: TMemoField (ftMemo) and TGraphicField (ftGraphic). These descendants represent BLOB fields that have headers peculiar to memos or graphic data, respectively.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TBlobField</class> introduces new methods to support streaming data to and from the BLOB field and to support copying raw binary data between the BLOB field and a binary file. You can also use the stream returned by a dataset's CreateBlobStream method to read or write the data managed by a BLOB field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the BLOB field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TBlobField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IsBlob">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates that this is a BLOB field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TBlobField">IsBlob</method> when working with a TField object to determine whether it represents BLOB data. For example, before using the GetData or SetData method (which does not work with BLOB fields), call <method namespace="DB" class="TBlobField">IsBlob</method> to determine whether the method can be used. The <method namespace="DB" class="TBlobField">IsBlob</method> method for <method namespace="DB" class="TBlobField">TBlobField</method> always returns true.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TBlobField">Create</method>s an instance of a BLOB field component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TBlobField">TBlobField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TBlobField">Create</method> initializes the DataType property to ftBlob. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TBlobField">Create</method> to create and initialize an instance of <method namespace="DB" class="TBlobField">TBlobField</method>. After instantiating a <method namespace="DB" class="TBlobField">TBlobField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TBlobField">TBlobField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TBlobField">TBlobField</method> with a dataset component by setting its DataSet property to the name of the dataset component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TBlobField">TBlobField</method> object for a field named Images accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TBlobField;
begin
  SQLDataSet1.Close;
  T := TBlobField.Create(SQLDataSet1);
  T.FieldName := 'Images';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;Close();
TBlobField *T = new TBlobField(SQLDataSet1);
T-&gt;FieldName = "Images";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Assign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies a value to the BLOB field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TBlobField">Assign</method> to copy data to the BLOB field. <method namespace="DB" class="TBlobField">Assign</method> copies the Value of a BLOB field from</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Another BLOB field</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A TStrings object</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A TPicture or TBitmap object, if the BlobType is ftGraphic or ftTypedBinary</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Any object that supports <method namespace="DB" class="TBlobField">TBlobField</method> in its <method namespace="DB" class="TBlobField">Assign</method>To method</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the example below, the <method namespace="DB" class="TBlobField">Assign</method> method is used to copy the bitmap from a TImage component into a BLOB field through its <method namespace="DB" class="TBlobField">TBlobField</method> field object:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">if not (ClientDataSet1.State in [dsInsert, dsEdit]) then
  ClientDataSet1.Insert;
ClientDataSet1Images.Assign(Image1.Picture);
ClientDataSet1.Post;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">if ((ClientDataSet1-&gt;State != dsInsert) &amp;&amp;
(ClientDataSet1-&gt;State != dsEdit))
  ClientDataSet1-&gt;Insert();
ClientDataSet1Images-&gt;Assign(Image1-&gt;Picture);
ClientDataSet1-&gt;Post();</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Clear">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TBlobField">Clear</method>s the current value in the BLOB field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TBlobField">Clear</method> to delete the current value in the field and leave the field without a value.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Query1Images.Clear;</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.LoadFromFile">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Loads BLOB data from a file into the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TBlobField">LoadFromFile</method> to load the contents of a file into a BLOB field. Specify the name of the file to load into the field as the value of the FileName parameter.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">if not (Query.State in [dsInsert, dsEdit]) then Query1.Insert;
Query1Images.LoadFromFile('c:\Windows\Waves.bmp');
Query1.Post;</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.LoadFromStream">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Loads BLOB data from a stream into the field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TBlobField">LoadFromStream</method> to copy the contents of a stream into the BLOB field. Specify the stream from which the field's value is copied as the value of the Stream parameter.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The Stream parameter is typically not a BLOB stream. BLOB streams (returned by the dataset's CreateBlobStream method) provide a completely separate mechanism for streaming data into a BLOB field.</para>
                  
            </note>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  MS: TMemoryStream;
begin
if not (ClientDataSet1.State in [dsInsert, dsEdit]) then
 ClientDataSet1.Insert;
  MS := TMemoryStream.Create();
try
Image1.Picture.Bitmap.SaveToStream(MS);
    ClientDataSet1Images.LoadFromStream(MS);
finally
    MS.Free;
end;
  ClientDataSet1.Post;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">if ((ClientDataSet1-&gt;State != dsInsert) &amp;&amp;
(ClientDataSet1-&gt;State != dsEdit))
  ClientDataSet1-&gt;Insert();
TMemoryStream *pMS = new TMemoryStream;
try
{
  Image1-&gt;Picture-&gt;Bitmap-&gt;SaveToStream(pMS);
  ClientDataSet1Images-&gt;LoadFromStream(pMS);
}
__finally
{
delete pMS;
}
ClientDataSet1-&gt;Post();</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SaveToFile">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Saves the contents of the BLOB field to a file.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TBlobField">SaveToFile</method> to save the contents of the BLOB field to a file. Specify the name of the file as the value of the FileName parameter.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Query1Files.SaveToFile('c:\Data\' + Query1FileName.AsString);</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SaveToStream">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Saves the contents of the BLOB field to a stream.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TBlobField">SaveToStream</method> to copy the contents of a BLOB field to a stream. Specify the name of the stream to which the field's value is saved as the value of the Stream parameter.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The Stream parameter is typically not a BLOB stream. BLOB streams (returned by the dataset's CreateBlobStream method) provide a completely separate mechanism for streaming data from a BLOB field.</para>
                  
            </note>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  MS: TMemoryStream;
begin
  MS := TMemoryStream.Create;
try
    SQLDataSet1Images.SaveToStream(MS);
    Image1.Picture.Bitmap.LoadFromStream(MS);
finally
    MS.Free;
end;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TMemoryStream *pMS = new TMemoryStream;
try
{
  SQLDataSet1Images-&gt;SaveToStream(pMS);
  Image1-&gt;Picture-&gt;Bitmap-&gt;LoadFromStream(pMS);
}
__finally
{
delete pMS;
}</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SetFieldType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the type of the BLOB field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TBlobField">SetFieldType</method> to change the field type of a BLOB field, overriding the default type. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Normally, the type of the physical database field is checked and a TFieldType is selected that matches most closely. BLOB fields can indicate more explicitly what kind of BLOB is in the database. Specify the BLOB type as the value of the Value parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The following table contains the possible values for BLOB fields. Calling <method namespace="DB" class="TBlobField">SetFieldType</method> with any other data type does nothing.</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Description</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBlob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Binary Large Object field</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftMemo</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Text memo field</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftGraphic</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Bitmap field</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftFmtMemo</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Formatted text memo field</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftParadoxOle</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Paradox OLE field</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftDBaseOle</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>dBASE OLE field</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftTypedBinary</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Typed binary field</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftOraBlob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>BLOB fields in Oracle 8 tables</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftOraClob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>CLOB fields in Oracle 8 tables</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Calling <method namespace="DB" class="TBlobField">SetFieldType</method> does the same thing as setting the BlobType property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.BlobSize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of bytes of data contained in the blob field on the current record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TBlobField">BlobSize</property> to determine the amount of memory required to store the contents of the BLOB field. Use <property namespace="DB" class="TBlobField">BlobSize</property> instead of the DataSize property, which always returns 0 for BLOB fields.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unlike the DataSize property, which specifies the size for field data on any record, <property namespace="DB" class="TBlobField">BlobSize</property> gives the size of the BLOB data for the current record only.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">In the Delphi example below, a handler for the AfterScroll event of a TQuery, the value of the <property namespace="DB" class="TBlobField">BlobSize</property> property is displayed in the Caption of a form.</condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">procedure TForm1.Query1AfterScroll(DataSet: TDataSet);
begin
  Caption := 'BLOB size: ' +
    IntToStr(TBlobField(Query1.FieldByName('BITMAP')).BlobSize);
end;</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Modified">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a the value for the BLOB field was changed since it was last read from the underlying database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the value of the BLOB field is set by using the properties or methods of <property namespace="DB" class="TBlobField">TBlobField</property>, the BLOB stream returned by a dataset's CreateBlobStream method, or a data-aware control, <property namespace="DB" class="TBlobField">Modified</property> is automatically set to true. <condition os="Windows">Set <property namespace="DB" class="TBlobField">Modified</property> to true when changing the value of a BLOB field using direct Borland Database Engine (BDE) API calls.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">BLOB fields use the <property namespace="DB" class="TBlobField">Modified</property> property to trigger data events and to indicate when <condition os="Linux">the dataset may need</condition>
                     
               <condition os="Windows">BDE needs</condition> to clean up any buffers used to store BLOB data.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the data in the BLOB field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TBlobField">Value</property> to read data directly from and write data directly to a BLOB field component at runtime. For BLOB fields, the <property namespace="DB" class="TBlobField">Value</property> property is equivalent to the AsString property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The string data (Delphi) or AnsiString (C++) type can store binary data as well as text. Thus, even BLOB fields for nontextual BLOB types such as ftGraphic or ftTypedBinary can get or set their data using a string (Delphi) or an AnsiString (C++).</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Transliterate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether any text in the BLOB field should be converted to and from the character set identified by the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TBlobField">Transliterate</property> when the physical database table identified by the dataset <condition os="Windows">does not use an ANSI language driver and the data may contain extended ASCII characters</condition>
                     
               <condition os="Linux">uses a different character set than UTF-8 (on Linux) or ANSI (on Windows) and the BLOB field contains text</condition>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TBlobField">Transliterate</property> is true<condition language="CBuilder">,</condition> BLOB fields call the dataset's Translate method to translate <condition os="Windows">ANSI</condition>
                     
               <condition os="Linux">UTF-8</condition> characters to the character set used by the dataset when the value is changed using the Value property, the AsString property, or the AsVariant property. When these properties are read to obtain the value of the BLOB field, the Translate method translates the characters in the database table to the <condition os="Linux">UTF-8 (Linux) or </condition>ANSI<condition os="Linux"> (Windows) </condition>character set.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>BLOB streams (returned by the dataset's CreateBlobStream method) also check the <property namespace="DB" class="TBlobField">Transliterate</property> property when reading from or writing to a BLOB field.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.BlobType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the type of the BLOB field associated with a BLOB field object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TBlobField">BlobType</property> to set or read the data type for the BLOB data associated with the field component. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specify <property namespace="DB" class="TBlobField">BlobType</property> when using a <property namespace="DB" class="TBlobField">TBlobField</property> object to represent a BLOB field type that isn't directly supported (such as a formatted memo BLOB). <property namespace="DB" class="TBlobField">BlobType</property> ensures that the BLOB type in the dataset matches the expected field type.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.GraphicHeader">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the field's value includes a Paradox graphic BLOB header.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TBlobField">GraphicHeader</property> to specify whether the BLOB field represents a Paradox graphic field. <property namespace="DB" class="TBlobField">TBlobField</property> checks <property namespace="DB" class="TBlobField">GraphicHeader</property> to determine whether it must write out a Paradox graphic BLOB header when writing the field's data to the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TBlobField">GraphicHeader</property> is ignored unless the DataType property is ftGraphic or ftTypedBinary.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TMemoField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TMemoField</class> represents a memo field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TMemoField</class> encapsulates the fundamental behavior common to fields that contain text data or arbitrary length. Memo fields are a form of binary large object (BLOB) field where the data consists of simple text. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the memo field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TMemoField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TMemoField">Create</method>s an instance of <method namespace="DB" class="TMemoField">TMemoField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TMemoField">TMemoField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TMemoField">Create</method> sets the DataType property to ftMemo, and initializes the Transliterate property to true. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TMemoField">Create</method> to create and initialize an instance of <method namespace="DB" class="TMemoField">TMemoField</method>. After instantiating a <method namespace="DB" class="TMemoField">TMemoField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TMemoField">TMemoField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TMemoField">TMemoField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">The example below creates a <method namespace="DB" class="TMemoField">TMemoField</method> object for a field named Notes accessed through a TQuery named Query1.</condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TMemoField;
begin
  Query1.Close;
  T := TMemoField.Create(Query1);
  T.FieldName := 'Notes';
  T.Name := Query1.Name + T.FieldName;
  T.Index := Query1.FieldCount;
  T.DataSet := Query1;
  Query1.FieldDefs.UpDate;
  Query1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TMemoField *T;
Query1-&gt;Close();
T = new TMemoField(Query1);
T-&gt;FieldName = "Notes";
T-&gt;Name = Query1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = Query1-&gt;FieldCount;
T-&gt;DataSet = Query1;
Query1-&gt;FieldDefs-&gt;UpDate();
Query1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TGraphicField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TGraphicField</class> represents a graphics field in a dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TGraphicField</class> encapsulates the fundamental behavior common to fields that hold graphic data. Graphics fields are a form of binary large object (BLOB) field where the data includes a BLOB header describing the encoding of the graphical value. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the graphics field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TGraphicField</class> instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TGraphicField">Create</method>s an instance of <method namespace="DB" class="TGraphicField">TGraphicField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TGraphicField">TGraphicField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TGraphicField">Create</method> sets the DataType property to ftGraphic. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TGraphicField">Create</method> to create and initialize an instance of <method namespace="DB" class="TGraphicField">TGraphicField</method>. After instantiating a <method namespace="DB" class="TGraphicField">TGraphicField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TGraphicField">TGraphicField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TGraphicField">TGraphicField</method> with a dataset component by setting its DataSet property to the name of the dataset component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below creates a <method namespace="DB" class="TGraphicField">TGraphicField</method> object for a field named Pics accessed through a TSQLDataSet named SQLDataSet1.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TGraphicField;
begin
  SQLDataSet1.Close;
  T := TGraphicField.Create(SQLDataSet1);
  T.FieldName := 'Pics';
  T.Name := SQLDataSet1.Name + T.FieldName;
  T.Index := SQLDataSet1.FieldCount;
  T.DataSet := SQLDataSet1;
  SQLDataSet1.FieldDefs.UpDate;
  SQLDataSet1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TGraphicField *T;
SQLDataSet1-&gt;Close();
T = new TGraphicField(SQLDataSet1);
T-&gt;FieldName = "Pics";
T-&gt;Name = SQLDataSet1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = SQLDataSet1-&gt;FieldCount;
T-&gt;DataSet = SQLDataSet1;
SQLDataSet1-&gt;FieldDefs-&gt;UpDate();
SQLDataSet1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TObjectField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TObjectField</class> is the common ancestor of TADTField, TArrayField, TDataSetField, and TReferenceField components in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TObjectField</class> encapsulates the fundamental behavior common to fields that are a composite of simpler types. These include ADT fields and array fields, which are built up of subfields, and dataset fields and reference fields, which refer to another dataset. <class namespace="DB">TObjectField</class> introduces the Fields property and the FieldValues property for accessing the subfields that make up the composite (or that reside in the dataset that is the field's value).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not create instances of <class namespace="DB">TObjectField</class>. It is intended only as a base class.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TObjectField">Create</method>s and initializes a <method namespace="DB" class="TObjectField">TObjectField</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not create <method namespace="DB" class="TObjectField">TObjectField</method> instances. <method namespace="DB" class="TObjectField">TObjectField</method> is an abstract base class that should not be directly instantiated. The constructor for descendant classes is usually called indirectly by using the Fields editor at design time to create a persistent field component. Dataset objects also call field constructors automatically to create dynamic field components.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TObjectField">Create</method> creates a TFields object to manage the child fields of the object field.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TObjectField">Destroy</method>s an instance of <method namespace="DB" class="TObjectField">TObjectField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DB" class="TObjectField">Destroy</method> directly in an application. The destructor is called automatically by the dataset that owns the object field component, and applications never need to call it explicitly.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an application creates a descendant of <method namespace="DB" class="TObjectField">TObjectField</method> without an owner, it should call Free instead of <method namespace="DB" class="TObjectField">Destroy</method>. Free checks that the field reference is not nil, and only then calls <method namespace="DB" class="TObjectField">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TObjectField">Destroy</method> closes the dataset, deletes the instance of <method namespace="DB" class="TObjectField">TObjectField</method> from the dataset, and calls the inherited destructor.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of child fields that comprise the object field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DB" class="TObjectField">FieldCount</property> to determine the number of child fields associated with the object field. This is the number of fields managed by the Fields property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Fields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the T<property namespace="DB" class="TObjectField">Fields</property> object that contains an array of child fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Child fields of the object field are maintained in a T<property namespace="DB" class="TObjectField">Fields</property> object specified by the <property namespace="DB" class="TObjectField">Fields</property> property. Use this property to access individual subfield components.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldValues">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides access to the values for all child fields in the object field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TObjectField">FieldValues</property> to get or set the values of the object field's subfields. <property namespace="DB" class="TObjectField">FieldValues</property> accepts and returns a Variant, so it can handle and convert fields of any type. For example, the following statements are syntactically identical and write the value from an edit box into an ADT field with a child string field called STREET:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">DataSet1.FieldByName('ADDRESS.STREET').Value := Edit1.Text;
TADTField(DataSet1.FieldByName('ADDRESS')).FieldValues[0] := Edit1.Text;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Table1-&gt;FieldByName("ADDRESS.STREET")-&gt;Value = Edit1-&gt;Text;
((TADTField*)Table1-&gt;FieldByName("ADDRESS"))-&gt;FieldValues[0] = Edit1-&gt;Text;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The next statements reads a string value from the first child field of the object field ADDRESS into an edit box:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Edit1.Text := DataSet1.FieldByName('ADDRESS').FieldValues[0];</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Edit1-&gt;Text = ((TADTField*)DataSet1-&gt;FieldByName("ADDRESS"))-&gt;FieldValues[0];</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Because <property namespace="DB" class="TObjectField">FieldValues</property> always uses Variants, it may be slower than directly accessing a subfield and using its native format (i.e., using its AsXXX property), especially in applications that process large amounts of data.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.UnNamed">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether an object field in a nested table has a name associated with it.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TObjectField">UnNamed</property> is set to true when the object field in a nested table has no name associated with it.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ObjectType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the classification of the field object in Oracle.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In Oracle, objects are classified into object types.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TADTField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A <class namespace="DB">TADTField</class> object represents an ADT (Abstract Data Type) field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ADT fields are database fields that contain Abstract Data Type (ADT) values. ADTs are user defined types created on the server, and are similar to records (Delphi) or structures (C++). An ADT can contain most scalar field types, including array fields, reference fields, nested dataset fields, or nested ADTs.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TADTField">Create</method>s an instance of <method namespace="DB" class="TADTField">TADTField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TADTField">Create</method> to create and initialize an instance of <method namespace="DB" class="TADTField">TADTField</method>. <method namespace="DB" class="TADTField">Create</method> calls the inherited constructor and then sets the DataType to ftADT.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TArrayField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TArrayField</class> represents an Array field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Array fields consist of a set of subfields of the same type. The field type of all subfields can be scalar (for example, float, string), or non-scalar (an ADT), but an array field of arrays is not permitted. The SparseArrays property of TDataSet determines whether a unique TField object is created for each element of the array field.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TArrayField">Create</method>s an instance of <method namespace="DB" class="TArrayField">TArrayField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not need to explicitly create <method namespace="DB" class="TArrayField">TArrayField</method> instances. These are created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TArrayField">Create</method> calls the inherited TField constructor, sets the DataType to ftArray, and sets the Size to 10. The AOwner parameter specifies the owner of the field (typically, the dataset). The owner is responsible for freeing the field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Size">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The number of elements in the array field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TArrayField">Size</property> property to get or set the number of elements in the array field.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDataSetField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDataSetField</class> provides access to nested datasets.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDataSetField</class> represents a nested dataset field in a database. This nested dataset can result from an object relational database (such as the nested datasets in Oracle 8 databases) or from a provider that packages data for the master table of a master/detail relationship. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDataSetField</class> introduces a new property NestedDataSet for referencing nested datasets. It also introduces the Fields property for accessing the fields in the nested dataset. When assigning data to a data set field, use the DataSetField property of a dataset component that is assigned as the value of the dataset field.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSetField">Create</method>s and initializes a <method namespace="DB" class="TDataSetField">TDataSetField</method> instance.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TDataSetField">TDataSetField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSetField">Create</method> sets the DataType property to ftDataSet. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TDataSetField">Create</method> to create and initialize an instance of <method namespace="DB" class="TDataSetField">TDataSetField</method>. After instantiating a <method namespace="DB" class="TDataSetField">TDataSetField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TDataSetField">TDataSetField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Specify the dataset that contains the dataset field by setting its DataSet property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.NestedDataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the dataset that is nested in the dataset field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TDataSetField">NestedDataSet</property> to access the nested dataset of the dataset field.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.IncludeObjectField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Indicates whether this field can be represented as a persistent field in the nested dataset.</condition>
                     
               <condition os="Linux">Reserved for future use.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Linux">The <property namespace="DB" class="TDataSetField">IncludeObjectField</property> property is not currently implemented.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">In BDE-enabled datasets, set this property to true to allow the nested dataset that is the value of this field to access this parent dataset field.  When this property is true, a persistent field can be created for this dataset field in the detail dataset using the Fields editor. The name of this dataset field is then displayed above the child fields in a grid associated with the nested dataset. </condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">The default value is false.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TReferenceField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TReferenceField</class> represents a REF field in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reference fields store a pointer or reference to another persistent object. <class namespace="DB">TReferenceField</class> introduces properties for working with references contained in other tables and for working directly with the reference field values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the reference field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TReferenceField</class>Field instance using the dataset's Fields property or FieldByName method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TReferenceField">Create</method>s an instance of <method namespace="DB" class="TReferenceField">TReferenceField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TReferenceField">TReferenceField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TReferenceField">Create</method> sets the DataType to ftReference.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ReferenceTableName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Names the table that contains the reference associated with the reference field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TReferenceField">ReferenceTableName</property> is set, edits to the referenced data can be posted on the table of the reference field.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TGuidField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TGuidField</class> represents a guid field in a dataset. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TGuidField</class> encapsulates the fundamental behavior common to fields storing Globally Unique Identifiers (GUIDs). In addition to the properties, methods, and events common to all fields that are introduced by the TField class, <class namespace="DB">TGuidField</class> introduces the AsGuid property for setting and getting the field's value as a TGUID data type.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you use the Fields editor at design time to create a persistent field component for the guid field, you can access it by name at runtime. When using dynamic field components, you can access the <class namespace="DB">TGuidField</class> instance using the dataset's Fields property or FieldByName method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition status="hold">Maximum/minimum data storage limits?</condition>
            
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TGuidField">Create</method>s an instance of a <method namespace="DB" class="TGuidField">TGuidField</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not explicitly create instances of <method namespace="DB" class="TGuidField">TGuidField</method>. Instead, the field components are created automatically, as persistent field components defined in the Fields editor at design time or as dynamic field components created automatically by the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TGuidField">Create</method> sets the DataType property to ftGuid. The AOwner parameter specifies the component, typically a dataset, that becomes the new field's Owner. The Owner is responsible for freeing the component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In the rare cases when you must create a persistent field component at runtime, call <method namespace="DB" class="TGuidField">Create</method> to create and initialize an instance of <method namespace="DB" class="TGuidField">TGuidField</method>. After instantiating a <method namespace="DB" class="TGuidField">TGuidField</method>, associate it with a specific field by setting its FieldName property to the name of the field. Give the <method namespace="DB" class="TGuidField">TGuidField</method> a unique identifier in the Name property. Establish where the field appears in the collection of fields by providing an ordinal number in the Index property. Associate the <method namespace="DB" class="TGuidField">TGuidField</method> with a dataset component by setting its DataSet property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">The example below creates a <method namespace="DB" class="TGuidField">TGuidField</method> object for a field named Guid accessed through a TQuery named Query1.</condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  T: TGuidField;
begin
  Query1.Close;
  T := TGuidField.Create(Query1);
  T.FieldName := 'Guid';
  T.Name := Query1.Name + T.FieldName;
  T.Index := Query1.FieldCount;
  T.DataSet := Query1;
  Query1.FieldDefs.UpDate;
  Query1.Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TGuidField *T;
Query1-&gt;Close();
T = new TGuidField(Query1);
T-&gt;FieldName = "Guid";
T-&gt;Name = Query1-&gt;Name + T-&gt;FieldName;
T-&gt;Index = Query1-&gt;FieldCount;
T-&gt;DataSet = Query1;
Query1-&gt;FieldDefs-&gt;UpDate();
Query1-&gt;Open();</codeBlock>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsGuid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the field as a Globally Unique Identifier (GUID).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TGuidField">AsGuid</property> to</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assign the GUID field value to a TGUID variable (Delphi) or GUID variable (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assign a TGUID value (Delphi) or GUID value (C++) as the value of the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TGuidField">AsGuid</property>
                     
               <condition os="Windows">uses the StringToGUID and GUIDToString functions internally to </condition>convert<condition os="Linux">s</condition> between the internal representation of the GUID as a string and a TGUID type.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TAggregateField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TAggregate field represents a maintained aggregate in a client dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TAggregateField</class> represents an aggregate value from a client dataset in a form that can be used by data-aware controls. Use the Fields Editor on a ClientDataSet to create a persistent aggregate field to which a TDBText control can bind.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As with TAggregate, <class namespace="DB">TAggregateField</class> has an Expression property that represents a calculation summarizing the data in a set of records. When using aggregate fields, you do not need to explicitly create the corresponding aggregate object in the client dataset: the Fields editor creates that object when you create a persistent aggregate field. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TAggregateField">Create</method>s an instance of <method namespace="DB" class="TAggregateField">TAggregateField</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TAggregateField">Create</method> to create and initialize an instance of <method namespace="DB" class="TAggregateField">TAggregateField</method> at runtime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">It is seldom necessary to call <method namespace="DB" class="TAggregateField">Create</method> directly, because an aggregate field component is instantiated automatically when an aggregate field is added through the Fields Editor of a client dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TAggregateField">Create</method> initializes DataType to ftUnknown, FieldKind to fkAggregate, Precision to 15, and Visible to false.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Handle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Points to the aggregate handle.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TAggregateField">TAggregateField</property> uses <property namespace="DB" class="TAggregateField">Handle</property> internally to obtain its aggregated values. Most applications do not need to use this value.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Component writers can use <property namespace="DB" class="TAggregateField">Handle</property>, if necessary, with the routines declared in the dsintf unit. </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ResultType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the data type of the aggregate field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TAggregateField">ResultType</property> to determine the type of data that the aggregate produces.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Active">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the aggregate should be calculated.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DB" class="TAggregateField">Active</property> property to indicate that the aggregate field's value should be maintained when possible. If <property namespace="DB" class="TAggregateField">Active</property> is false, the value of the aggregate is never calculated. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DB" class="TAggregateField">Active</property> is true, the aggregate field's value is calculated unless</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">It summarizes records over a group not defined by the current index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The client dataset's Aggregates<property namespace="DB" class="TAggregateField">Active</property> property is false.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To determine whether the aggregate that corresponds to the field is currently maintained, read its InUse property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.currency">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether the value in the field should be formatted as a <property namespace="DB" class="TAggregateField">currency</property> value. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TAggregateField">currency</property> to specify the formatting of the field if its ResultType is a floating-point type (ftFloat or ftCurrency).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Floating-point values are formatted for display using the DisplayFormat property if it is assigned. If DisplayFormat is not assigned, <property namespace="DB" class="TAggregateField">currency</property> determines how the field is formatted for display. If Currency is true<condition language="CBuilder">,</condition> the value is formatted for display using the FloatToText function with the ffCurrency formatting code. If Currency is false, the value is formatted with the ffGeneral format.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the name of the field for display purposes. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TAggregateField">DisplayName</property> to give the aggregate a name that can be used to label values displayed to the user.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When you create an aggregate field in the Fields editor, <property namespace="DB" class="TAggregateField">DisplayName</property> is the same as the AggregateName property of the corresponding TAggregate object. However, if you change <property namespace="DB" class="TAggregateField">DisplayName</property>, the aggregate's AggregateName is not updated as well.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DisplayFormat">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines how numeric and time values are formatted for display in a data-aware control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DB" class="TAggregateField">DisplayFormat</property> property to override automatic formatting of a field for display purposes when ResultType is ftFloat, ftCurrency, ftDate, ftTime, or ftDateTime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When ResultType is ftFloat or ftCurrency, the value of <property namespace="DB" class="TAggregateField">DisplayFormat</property> is a string that encodes the formatting of data using the specifiers in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Specifier</th>
                        
                  <th>Represents</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>0</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digit placeholder. If the value being formatted has a digit in the position where the "0" appears in the format string, then that digit is copied to the output string. Otherwise, a "0" is stored in that position in the output string.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>#</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Digit placeholder. If the value being formatted has a digit in the position where the "#" appears in the format string, then that digit is copied to the output string. Otherwise, nothing is stored in that position in the output string.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Decimal point. The first "." character in the format string determines the location of the decimal separator in the formatted value; any additional "." characters are ignored. The actual character used as a the decimal separator in the output string is determined by the DecimalSeparator global variable. The default value of DecimalSeparator is specified in the Number Format of the Regional Settings section in the Windows Control Panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>,</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Thousand separator. If the format string contains one or more "," characters, the output will have thousand separators inserted between each group of three digits to the left of the decimal point. The placement and number of "," characters in the format string does not affect the output, except to indicate that thousand separators are wanted. The actual character used as a the thousand separator in the output is determined by the ThousandSeparator global variable. The default value of ThousandSeparator is specified in the Number Format of the Regional Settings section in the Windows Control Panel.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>E+</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Scientific notation. If any of the strings "E+", "E-", "e+", or "e-" are contained in the format string, the number is formatted using scientific notation. A group of up to four "0" characters can immediately follow the "E+", "E-", "e+", or "e-" to determine the minimum number of digits in the exponent. The "E+" and "e+" formats cause a plus sign to be output for positive exponents and a minus sign to be output for negative exponents. The "E-" and "e-" formats output a sign character only for negative exponents.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>'xx'/"xx"</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Characters enclosed in single or double quotes are output as-is, and do not affect formatting.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>;</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Separates sections for positive, negative, and zero numbers in the format string.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>c</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the ShortDateFormat global variable, followed by the time using the format given by the LongTimeFormat global variable. The time is not displayed if the fractional part of the DateTime value is zero.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>d</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a number without a leading zero (1-31).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a number with a leading zero (01-31).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as an abbreviation (Sun-Sat) using the strings given by the ShortDayNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a full name (Sunday-Saturday) using the strings given by the LongDayNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ddddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the ShortDateFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dddddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the LongDateFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>m</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a number without a leading zero (1-12). If the m specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a number with a leading zero (01-12). If the mm specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mmm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as an abbreviation (Jan-Dec) using the strings given by the ShortMonthNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mmmm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a full name (January-December) using the strings given by the LongMonthNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>yy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The year as a two-digit number (00-99).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>yyyy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The year as a four-digit number (0000-9999).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>h</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The hour without a leading zero (0-23).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>hh</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The hour with a leading zero (00-23).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>n</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The minute without a leading zero (0-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>nn</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The minute with a leading zero (00-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>s</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The second without a leading zero (0-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ss</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The second with a leading zero (00-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>t</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the format given by the ShortTimeFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tt</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the format given by the LongTimeFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>am/pm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by "am" for any hour before noon, or "pm" for any hour after noon. The am/pm specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>a/p</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by "a" for any hour before noon, or "p" for any hour after noon. The a/p specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ampm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by the contents of the TimeAMString global variable for any hour before noon, or the contents of the TimePMString global variable for any hour after noon.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>/</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date separator character given by the DateSeparator global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>:</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time separator character given by the TimeSeparator global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>'xx'/"xx"</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Characters enclosed in single or double quotes are displayed as-is, with no formatting changes.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The locations of the leftmost "0" before the decimal point in the format string and the rightmost "0" after the decimal point in the format string determine the range of digits that are always present in the output string.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The number being formatted is always rounded to as many decimal places as there are digit placeholders ("0" or "#") to the right of the decimal point. If the format string contains no decimal point, the value being formatted is rounded to the nearest whole number.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the number being formatted has more digits to the left of the decimal separator than there are digit placeholders to the left of the "." character in the format string, the extra digits are output before the first digit placeholder.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To allow different formats for positive, negative, and zero values, the format string can contain between one and three sections separated by semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">One section: The format string applies to all values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Two sections: The first section applies to positive values and zeros, and the second section applies to negative values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Three sections: The first section applies to positive values, the second applies to negative values, and the third applies to zeros. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the section for negative values or the section for zero values is empty, that is, if there is nothing between the semicolons that delimit the section, the section for positive values is used instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the section for positive values is empty, or if the entire format string is empty, the value is formatted using general floating-point formatting with 15 significant digits. General floating-point formatting is also used if the value has more than 18 digits to the left of the decimal point and the format string does not specify scientific notation.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When ResultType is ftDate, ftTime, or ftDateTime, the value of <property namespace="DB" class="TAggregateField">DisplayFormat</property> is a string that encodes the formatting of data using the specifiers in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Specifier</th>
                        
                  <th>Displays</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>c</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the ShortDateFormat global variable, followed by the time using the format given by the LongTimeFormat global variable. The time is not displayed if the fractional part of the DateTime value is zero.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>d</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a number without a leading zero (1-31).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a number with a leading zero (01-31).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as an abbreviation (Sun-Sat) using the strings given by the ShortDayNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The day as a full name (Sunday-Saturday) using the strings given by the LongDayNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ddddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the ShortDateFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>dddddd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date using the format given by the LongDateFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>m</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a number without a leading zero (1-12). If the m specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a number with a leading zero (01-12). If the mm specifier immediately follows an h or hh specifier, the minute rather than the month is displayed.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mmm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as an abbreviation (Jan-Dec) using the strings given by the ShortMonthNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>mmmm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The month as a full name (January-December) using the strings given by the LongMonthNames global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>yy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The year as a two-digit number (00-99).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>yyyy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The year as a four-digit number (0000-9999).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>h</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The hour without a leading zero (0-23).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>hh</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The hour with a leading zero (00-23).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>n</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The minute without a leading zero (0-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>nn</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The minute with a leading zero (00-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>s</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The second without a leading zero (0-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ss</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The second with a leading zero (00-59).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>t</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the format given by the ShortTimeFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tt</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the format given by the LongTimeFormat global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>am/pm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by "am" for any hour before noon, or "pm" for any hour after noon. The am/pm specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>a/p</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by "a" for any hour before noon, or "p" for any hour after noon. The a/p specifier can use lower, upper, or mixed case, and the result is displayed accordingly.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ampm</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time using the 12-hour clock for the preceding h or hh specifier, followed by the contents of the TimeAMString global variable for any hour before noon, or the contents of the TimePMString global variable for any hour after noon.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>/</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The date separator character given by the DateSeparator global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>:</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The time separator character given by the TimeSeparator global variable.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>'xx'/"xx"</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Characters enclosed in single or double quotes are displayed as-is, with no formatting changes.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Expression">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the formula used to calculate the aggregate value.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TAggregateField">Expression</property> to indicate how aggregate values should be calculated. <property namespace="DB" class="TAggregateField">Expression</property> contains an expression that includes one or more of the summary operators in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Operator</th>
                        
                  <th>Use</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Sum</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Totals the values for a numeric field or expression.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Avg</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Computes the average value for a numeric or date-time field or expression.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Count</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Specifies the number of non-blank values for a field or expression. Use count(*) to count the number of records in a dataset or subgroup.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Min</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Indicates the minimum value for a string, numeric, or date-time field or expression.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Max</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Indicates the maximum value for a string, numeric, or date-time field or expression.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Sum(Qty * Price)</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>{legal -- summary of an expression on fields }</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Max(Field1) - Max(Field2)</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>{legal -- expression on summaries }</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Avg(DiscountRate) * 100</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>{ legal -- expression of summary and constant }</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Min(Sum(Field1))</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>{ illegal -- nested summaries }</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Count(Field1) - Field2</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>{ illegal -- expression of summary and field }</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The summary operators act on field values or on expressions built from field values using the same operators you use to create filters. (You can't nest summary operators, however.) You can create expressions by using operators on summarized values with other summarized values, or on summarized values and constants. However, you can't combine summarized values with field values, because such expressions are ambiguous (there is no indication of which record should supply the field value.) These rules are illustrated in the following expressions:</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To specify the set of records summarized by this expression, use the GroupingLevel property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.GroupingLevel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the set of records summarized by this aggregate field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TAggregateField">GroupingLevel</property> to indicate the groups of records over which the field's aggregate is calculated. When <property namespace="DB" class="TAggregateField">GroupingLevel</property> is 0 (the default), the aggregate summarizes all the records in the client dataset. When <property namespace="DB" class="TAggregateField">GroupingLevel</property> is greater than 0, the aggregate summarizes each group of records that has the same values on the first <property namespace="DB" class="TAggregateField">GroupingLevel</property> fields of the index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TAggregateField">GroupingLevel</property> can be any value from 0 to the number of fields in the index specified by IndexName.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.IndexName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the index that is used to define subgroups of records.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TAggregateField">IndexName</property> to specify an index that sorts the records of the client dataset into subgroups. Each subgroup is defined as a set of records that all have the same values on a set of fields. This defining set of fields is the first GroupingLevel fields of the index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TAggregateField">IndexName</property> is required for any aggregate that does not summarize all the records in the client dataset (GroupingLevel = 0). When the index associated with an aggregate is not the current index of the client dataset, its value is unavailable.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Precision">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines the precision used in formatting floating-point values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the aggregate field represents a floating-point value (ResultType is ftFloat or ftCurrency), use <property namespace="DB" class="TAggregateField">Precision</property> to set the number of digits beyond the decimal point that appear before rounding begins. <property namespace="DB" class="TAggregateField">Precision</property> affects the format of the floating-point value when it is displayed as a text string, not the actual value that is stored in the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The default value of <property namespace="DB" class="TAggregateField">Precision</property> is 15 decimal places.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TAggregateField">Precision</property> must be greater than or equal to 2. Trying to set <property namespace="DB" class="TAggregateField">Precision</property> to a value less than 2 changes the value of <property namespace="DB" class="TAggregateField">Precision</property> to 2.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TDataLink</class> is a helper class used by data-aware objects to coordinate the actions of TDataSource and TDataSet, and to respond to data events.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="Db">TDataLink</class> or one of its descendants in any data-aware object that implements a DataSource property to represent its link to a dataset or that needs to respond to data events.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The constructor of the data-aware object should call the constructor of <class namespace="Db">TDataLink</class>, and initialize any relevant properties. The data-aware object can then link to a TDataSource by using the DataSource property of the <class namespace="Db">TDataLink</class>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Data-aware objects that link to a single field in a dataset should use a TFieldDataLink instead.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.MoveBy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Repositions the dataset to another record relative to its active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">MoveBy</method> record changes the active record in the associated dataset, based on the Distance parameter. If Distance is greater than 0, <method namespace="Db" class="TDataLink">MoveBy</method> causes the dataset to move forward by that number of records. If Distance is less than 0, <method namespace="Db" class="TDataLink">MoveBy</method> causes the dataset to move backward. <method namespace="Db" class="TDataLink">MoveBy</method> returns the number of records actually moved (which may be less than the absolute value of Distance if the dataset encountered the first or last record before moving the indicated number of records).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">MoveBy</method> calls the <method namespace="Db" class="TDataLink">MoveBy</method> method of the associated dataset. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Edit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Attempts to drive the data source into an editing state if it is not already in one.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TDataLink">Edit</method> to try to ensure that the current record can be modified. A return value of true indicates that the data source was already in an editing state, or that it was successfully changed to allow editing. A return value of false indicates that the data source could not be changed to allow editing. For example, if the ReadOnly property is true, <method namespace="Db" class="TDataLink">Edit</method> will not allow editing and will return false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ExecuteAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes an action with the datasource as its target.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">ExecuteAction</method> is called automatically when the user invokes an action with the Owner as a target. The Action parameter specifies the action that was invoked. <method namespace="Db" class="TDataLink">ExecuteAction</method> checks whether the associated datasource can handle the action, and if so, forwards the action to the datasource. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">ExecuteAction</method> returns true if the action was successfully dispatched, and false if the <method namespace="Db" class="TDataLink">TDataLink</method> could not handle the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.UpdateAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates an action to reflect the current state of the <method namespace="Db" class="TDataLink">TDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">UpdateAction</method> is called automatically when the application is idle to give the <method namespace="Db" class="TDataLink">TDataLink</method> an opportunity to update associated actions. This allows actions to be grayed, checked, or to otherwise reflect the status of the <method namespace="Db" class="TDataLink">TDataLink</method> they target.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Action parameter specifies the action component that should be updated. <method namespace="Db" class="TDataLink">UpdateAction</method> returns true if the action component now reflects the state of the component, and false if it did not know how to update the action.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">Create</method>s an instance of <method namespace="Db" class="TDataLink">TDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">Create</method> is called from the constructor of any data-aware object that uses a <method namespace="Db" class="TDataLink">TDataLink</method> to implement its DataSource property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling the inherited constructor, <method namespace="Db" class="TDataLink">Create</method> initializes the BufferCount property to 1. Data-aware objects that use a <method namespace="Db" class="TDataLink">TDataLink</method> object to manage their link to a DataSource should change the BufferCount property to the number or records they represent, after calling the inherited constructor.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ActiveChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to changes in the Active property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">ActiveChanged</method> method defined by <method namespace="Db" class="TDataLink">TDataLink</method> merely provides an interface for a method that can respond to changes in the Active property. Derived objects that do not need to respond to such changes can allow the inherited method to ignore them.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CheckBrowseMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Allows the data-aware object to respond just before an event that changes the dataset state.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">CheckBrowseMode</method> method defined by <method namespace="Db" class="TDataLink">TDataLink</method> merely provides an interface for a method that can update any state information just before a change to the dataset occurs. Derived objects that do not need to respond to these events can allow the inherited method to ignore them.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.DataEvent">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to various events that occur while working with data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">DataEvent</method> is called automatically when various data events occur. Event indicates the event that just occurred. Info provides additional context information for some events. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">DataEvent</method> dispatches these events by calling the appropriate methods, as indicated in the following table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Data eventInfoMethod called</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Data event</th>
                        
                  <th>Info</th>
                        
                  <th>Method called</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>deFieldChange | deRecordChange</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The field that changed</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>RecordChanged</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>deDataSetChange</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Current index into the record buffer</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>DataSetChanged</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>deDataSetScroll</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Current index into the record buffer</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>DataSetScrolled</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>deLayoutChange</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Current index into the record buffer</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>LayoutChanged</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>deUpdateRecord</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>UpdateRecord</para>
                        
                  </td>
                        
                  <td>
                           
                     <para/>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>deUpdateState</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>EditingChanged or ActiveChanged</para>
                        
                  </td>
                        
                  <td>
                           
                     <para/>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>deCheckBrowseMode</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>CheckBrowseMode</para>
                        
                  </td>
                        
                  <td>
                           
                     <para/>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>deFocusControl</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>FocusControl</para>
                        
                  </td>
                        
                  <td>
                           
                     <para/>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.DataSetChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to changes in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">DataSetChanged</method> responds to changes to the contents of the dataset. Anything that changes the contents of the dataset, whether it is editing the data, inserting or deleting records, or changing the key triggers this method. Changes specific to the representation of the data within the data-aware object, such as scrolling the dataset or changing the layout of data elements within the object, also trigger this method. <method namespace="Db" class="TDataLink">DataSetChanged</method> simply calls RecordChanged. Derived classes can override this procedure to make additional adjustments to changes in the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.DataSetScrolled">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Allows a response to scrolling the representation of the dataset within the data-aware object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">DataSetScrolled</method> ignores the Distance parameter and calls DataSetChanged. Derived classes can override this procedure to make additional adjustments when the dataset scrolls.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.EditingChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to changes in the editing state of the data source.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">EditingChanged</method> method defined by <method namespace="Db" class="TDataLink">TDataLink</method> merely provides an interface for a method that can respond to changes in the editing state of the data source. <method namespace="Db" class="TDataLink">EditingChanged</method> is called immediately after the Editing property has changed its value. Derived objects that do not need to respond to such changes can allow the inherited method to ignore them.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FocusControl">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides the interface for a method to force focus to the data-aware component associated with the <method namespace="Db" class="TDataLink">TDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">FocusControl</method> method defined by <method namespace="Db" class="TDataLink">TDataLink</method> merely provides an interface for a method that can force the input focus to a data-aware object associated with the <method namespace="Db" class="TDataLink">TDataLink</method>. Derived objects that do not need this capability can allow the inherited method to ignore the request.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.LayoutChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to changes in the representation of the data by the data-aware object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">LayoutChanged</method> method simply calls the DataSetChanged method. <method namespace="Db" class="TDataLink">LayoutChanged</method> is intended to provide an interface for a method that can respond after changes in the representation of the data by the data-aware object. An example of such a change would be changing the number or order of the columns in a TCustomDBGrid.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.RecordChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to changes in the contents of the current record or field of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">RecordChanged</method> method defined by <method namespace="Db" class="TDataLink">TDataLink</method> merely provides an interface for a method that can respond to changes to the contents of the current record. <method namespace="Db" class="TDataLink">RecordChanged</method> is called after changes have been posted to the current record in the dataset, and from DataSetChanged.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Field parameter indicates which field of the current record has changed in value. If Field is nil (Delphi) or NULL (C++), any number of fields within the current record may have changed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Derived objects that do not need to respond to such changes can allow the inherited method to ignore them.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.UpdateData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides an interface for writing edits to a record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">UpdateData</method> method defined by <method namespace="Db" class="TDataLink">TDataLink</method> merely provides an interface for a method that writes updates to the current record in the dataset while avoiding calls to RecordChanged that posting the changes may trigger. Derived objects that do not need to write edits to the dataset can allow the inherited method to do nothing.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.UpdateRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Responds to notifications that edits should be posted to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">UpdateRecord</method> calls UpdateData after guarding against calls to RecordChanged, which may arise while UpdateData is executing. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataLink">Destroy</method>s an instance of <method namespace="Db" class="TDataLink">TDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataLink">TDataLink</method> object should be destroyed in the destructor of its Owner, where that Owner calls Create from its constructor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="Db" class="TDataLink">Destroy</method> directly in an application. Instead, call the Free method. Free checks that the <method namespace="Db" class="TDataLink">TDataLink</method> reference is not nil and only then calls <method namespace="Db" class="TDataLink">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Before calling the inherited destructor, <method namespace="Db" class="TDataLink">Destroy</method> removes any reference to the <method namespace="Db" class="TDataLink">TDataLink</method> from the data source object.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.VisualControl">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a visual control uses the datalink.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="Db" class="TDataLink">TDataLink</property> set <property namespace="Db" class="TDataLink">VisualControl</property> to indicate whether the control that uses the link is a visual control. A value of true indicates a visual control.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Active">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the dataset that <property namespace="Db" class="TDataLink">TDataLink</property> manages is active.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="Db" class="TDataLink">Active</property> to determine whether the dataset for this <property namespace="Db" class="TDataLink">TDataLink</property> is <property namespace="Db" class="TDataLink">Active</property>. When <property namespace="Db" class="TDataLink">Active</property> is false, the dataset is closed, and the dataset cannot read data from or write data to the database. When <property namespace="Db" class="TDataLink">Active</property> is true, data can be read from and written to the dataset.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ActiveRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the index of the current record within the internal record buffer maintained by the dataset for the Owner of the <property namespace="Db" class="TDataLink">TDataLink</property> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TDataLink">ActiveRecord</property> to discover or set the current record in the set of one or more records managed by the dataset. The set of records managed by the dataset corresponds to the number of records from the dataset visible at one time. For example, when the <property namespace="Db" class="TDataLink">TDataLink</property> object is owned by a data-aware grid, the set of records managed by the dataset corresponds to the number of rows shown by the grid, and the <property namespace="Db" class="TDataLink">ActiveRecord</property> represents the current row.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unidirectional datasets do not buffer records. When the data link is used with a unidirectional dataset, <property namespace="Db" class="TDataLink">ActiveRecord</property> is always 0.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.BOF">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the first record in a dataset is active.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="Db" class="TDataLink">BOF</property> to determine if the dataset component associated with the <property namespace="Db" class="TDataLink">TDataLink</property> is positioned on its first record. If <property namespace="Db" class="TDataLink">BOF</property> is true, the active record is unequivocally the first row in the dataset. <property namespace="Db" class="TDataLink">BOF</property> is also true when:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A dataset is first opened.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A call is made to the dataset's First method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A call is made to the dataset's Prior method, and the method fails  because the first row is already active.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A call is made to the dataset's SetRange, resulting in an empty result set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TDataLink">BOF</property> is false in all other cases. An application should assume <property namespace="Db" class="TDataLink">BOF</property> is false unless one of the conditions above is met and the application tests the property directly.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If both Eof and <property namespace="Db" class="TDataLink">BOF</property> are true, a dataset or range is empty.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.BufferCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of records cached by the dataset for the Owner of the <property namespace="Db" class="TDataLink">TDataLink</property> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="Db" class="TDataLink">BufferCount</property> to tell the dataset how many records to buffer together to service the owner of the <property namespace="Db" class="TDataLink">TDataLink</property> object. For example, a data-aware grid sets <property namespace="Db" class="TDataLink">BufferCount</property> to the number of rows visible in the grid.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="Db" class="TDataLink">BufferCount</property> to iterate through all the records buffered by the dataset. For example, a data-aware object can paint itself by cycling through the set of records, moving the ActiveRecord to visit each record in turn.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unidirectional datasets do not buffer records. Do not use <property namespace="Db" class="TDataLink">BufferCount</property> when the datalink is associated with a unidirectional dataset.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the T<property namespace="Db" class="TDataLink">DataSet</property> object that represents the data that this <property namespace="Db" class="TDataLink">TDataLink</property> is tracking.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="Db" class="TDataLink">DataSet</property> to determine the dataset that this <property namespace="Db" class="TDataLink">TDataLink</property> helps manage. The <property namespace="Db" class="TDataLink">TDataLink</property> responds to data events that are received by the <property namespace="Db" class="TDataLink">DataSet</property>, and makes changes to the dataset on behalf of the object that owns the <property namespace="Db" class="TDataLink">TDataLink</property> object.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the T<property namespace="Db" class="TDataLink">DataSource</property> object that the Owner of the <property namespace="Db" class="TDataLink">TDataLink</property> uses to connect to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TDataLink">DataSource</property> to determine or set the T<property namespace="Db" class="TDataLink">DataSource</property> object that connects to the dataset. <property namespace="Db" class="TDataLink">TDataLink</property> responds to data events that the <property namespace="Db" class="TDataLink">DataSource</property> receives.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To implement the <property namespace="Db" class="TDataLink">DataSource</property> property of a data-aware object which owns a <property namespace="Db" class="TDataLink">TDataLink</property> or its descendant, create a method that gets or sets the <property namespace="Db" class="TDataLink">DataSource</property> property of the <property namespace="Db" class="TDataLink">TDataLink</property> derived member.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSourceFixed">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the DataSource property can be set.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TDataLink">DataSourceFixed</property> to determine whether the DataSource property can be changed. By default, <property namespace="Db" class="TDataLink">DataSourceFixed</property> is false, allowing the DataSource property to be changed. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When there is a chance that an asynchronous event might change the DataSource before an operation completes, set <property namespace="Db" class="TDataLink">DataSourceFixed</property> to true before performing the operation to ensure that the DataSource is constant throughout the operation. After the data operation is complete, <property namespace="Db" class="TDataLink">DataSourceFixed</property> can be set back to false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="Db" class="TDataLink">DataSourceFixed</property> to prevent the DataSource of a data-aware object that owns the <property namespace="Db" class="TDataLink">TDataLink</property> from being changed once it is set.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Editing">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the DataSource is in edit mode.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="Db" class="TDataLink">Editing</property> to determine whether the DataSource is inserting a new record into the dataset, or modifying the current record. To change the dataset into edit mode, and hence the <property namespace="Db" class="TDataLink">Editing</property> property to true, use the Edit method.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Eof">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the last record in a dataset is active.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="Db" class="TDataLink">Eof</property> to determine if the dataset component associated with the <property namespace="Db" class="TDataLink">TDataLink</property> is positioned on its last record. If <property namespace="Db" class="TDataLink">Eof</property> is true, the active record is unequivocally the last row in the dataset. <property namespace="Db" class="TDataLink">Eof</property> is true when:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The associated dataset is empty.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A call is made to the dataset's Last method and the dataset is not unidirectional.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A call is made to the dataset's Next method, and the method fails because the last row is already active.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A call to the dataset's SetRange method is made resulting in an empty result set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TDataLink">Eof</property> is false in all other cases. An application should assume <property namespace="Db" class="TDataLink">Eof</property> is false unless one of the conditions above is met and the application tests the property directly.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If both <property namespace="Db" class="TDataLink">Eof</property> and BOF are true, a dataset or range is empty.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset for this <property namespace="Db" class="TDataLink">TDataLink</property> can be modified.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TDataLink">ReadOnly</property> to determine whether the dataset for this <property namespace="Db" class="TDataLink">TDataLink</property> can be modified. Setting <property namespace="Db" class="TDataLink">ReadOnly</property> to true causes any subsequent calls to the Edit method to fail, and changes the DataSource out of an editing state if it is in one. Setting <property namespace="Db" class="TDataLink">ReadOnly</property> to false enables changes to the data in the dataset.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.RecordCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of records in the internal record buffer maintained by the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="Db" class="TDataLink">RecordCount</property> to determine the number of actual records in the buffer maintained by the dataset for the Owner of this <property namespace="Db" class="TDataLink">TDataLink</property>. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In most cases, <property namespace="Db" class="TDataLink">RecordCount</property> is the same as BufferCount. <property namespace="Db" class="TDataLink">RecordCount</property> indicates the number of records actually in the record buffer of the dataset, as opposed to the number of records that the dataset can possibly maintain. For example, a data-aware grid with four rows could have one record actually showing data. In this case, BufferCount would be 4, while <property namespace="Db" class="TDataLink">RecordCount</property> would be 1.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDetailDataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TDetailDataLink</class> is the ancestor to datalink classes that manage the relationships between datasets that are linked in master/detail relationships.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TDetailDataLink</class> descendants are used to create master/detail relationships. They underlie the DataSource property of dataset components.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TDetailDataLink</class> has two descendants, </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TMasterDataLink, which is used by <condition os="Windows">BDE-enabled datasets, ADO-based datasets, and </condition>client datasets.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TSQLDataLink, which is used by unidirectional datasets.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DetailDataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the detail dataset in the master/detail relationship.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="Db" class="TDetailDataLink">DetailDataSet</property> to access the detail dataset. This is the dataset that uses a DetailDataLink to access its master dataset. The detail dataset is the detail datalink's owner, and uses the datalink to implement its DataSource property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not confuse the <property namespace="Db" class="TDetailDataLink">DetailDataSet</property> property with the DataSet property. The DataSet property is the dataset whose data events the detail datalink tracks. That is, DataSet is the master dataset while <property namespace="Db" class="TDetailDataLink">DetailDataSet</property> is the detail set.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TMasterDataLink">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TMasterDataLink</class> allows a dataset to establish a master/detail relationship.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="Db">TMasterDataLink</class> as a private member of a custom dataset class that can represent the detail records for another dataset. <class namespace="Db">TMasterDataLink</class> maintains a list of field components from the master dataset, and passes on data events to the dataset that owns it. In the constructor of the dataset that uses <class namespace="Db">TMasterDataLink</class> to link to another data source, create the <class namespace="Db">TMasterDataLink</class> object and set any event handlers to respond to data events.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not confuse the dataset that is the value of the <class namespace="Db">TMasterDataLink</class> object's DataSet property with the dataset that uses <class namespace="Db">TMasterDataLink</class> to link to a master dataset. The DataSet property is the master dataset, while the dataset that owns the <class namespace="Db">TMasterDataLink</class> object is the detail set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TClientDataSet<condition os="Windows">, ADO-based datasets, and TTable</condition> objects already include a <class namespace="Db">TMasterDataLink</class> object.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Unidirectional datasets<condition os="Windows"> and TQuery objects</condition> use their own dedicated datalink classes to perform the same types of tasks. </para>
            
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetDetailDataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the value of the DetailDataSet property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TMasterDataLink">GetDetailDataSet</method> is the protected read implementation of the DetailDataSet property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TMasterDataLink">Create</method>s an instance of <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TMasterDataLink">Create</method> from the constructor of the dataset that uses <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> to link to a master dataset. The dataset that uses the <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> passes itself as the DataSet parameter. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TMasterDataLink">Create</method> associates the instance of <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> with the dataset that owns it, and creates the helper objects it uses to manage the list of field components.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ActiveChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Regenerates the Fields property and triggers an OnMasterChange or OnMasterDisable event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications can not call the protected <method namespace="Db" class="TMasterDataLink">ActiveChanged</method> procedure. Changes in the Active property or the FieldNames property trigger this procedure. When the source dataset becomes inactive, <method namespace="Db" class="TMasterDataLink">ActiveChanged</method> empties the Fields property and generates an OnMasterDisable event. When the dataset becomes active, <method namespace="Db" class="TMasterDataLink">ActiveChanged</method> regenerates Fields from the source dataset and generates an OnMasterChange event.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CheckBrowseMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the dataset that owns the <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> object when the current record in the source dataset is about to change.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications can not call the protected <method namespace="Db" class="TMasterDataLink">CheckBrowseMode</method> procedure. <method namespace="Db" class="TMasterDataLink">CheckBrowseMode</method> is called immediately before the current record in the source dataset changes. It calls the <method namespace="Db" class="TMasterDataLink">CheckBrowseMode</method> method of the dataset that owns the <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> object, so that it can post any pending edits before the record changes.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.LayoutChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Informs the dataset that owns the <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> object after the data source has changed the number of records buffered.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications can not call the protected <method namespace="Db" class="TMasterDataLink">LayoutChanged</method> method. <method namespace="Db" class="TMasterDataLink">LayoutChanged</method> is called automatically when the source dataset changes to reflect a change in the layout of a control linked to that source dataset. <method namespace="Db" class="TMasterDataLink">LayoutChanged</method> regenerates the Fields property and triggers an OnMasterChange event.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.RecordChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an OnMasterChange event when the contents of one of the fields in the current record changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications can not call the protected <method namespace="Db" class="TMasterDataLink">RecordChanged</method> method. It is called automatically when the contents of the current record change. The Field parameter indicates which field in the current record has changed. If Field is nil (Delphi) or NULL (C++), the entire record has changed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the Field parameter is nil (Delphi) or NULL (C++), or if the Field parameter is one of the fields listed in the Fields property, <method namespace="Db" class="TMasterDataLink">RecordChanged</method> triggers an OnMasterChange event.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TMasterDataLink">Destroy</method>s an instance of <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications do not free instances of <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method>. The dataset that owns the <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> instance frees the datalink from its own destructor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Component writers call the Free method  from the destructor of the dataset that owns the <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> object. Free checks that the <method namespace="Db" class="TMasterDataLink">TMasterDataLink</method> reference is not already freed, and only then calls <method namespace="Db" class="TMasterDataLink">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TMasterDataLink">Destroy</method> frees up the memory used to manage the list of field components. </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Names the fields from the master dataset that are used to define the link to the detail dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="Db" class="TMasterDataLink">FieldNames</property> to the fields in the master dataset that supply values that must be matched by fields in the detail dataset. Each field name in the string must be separated from other field names with a semicolon. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="Db" class="TMasterDataLink">FieldNames</property> causes <property namespace="Db" class="TMasterDataLink">TMasterDataLink</property> to regenerate the Fields property from the field components of the master dataset. Once the Fields property has been regenerated, <property namespace="Db" class="TMasterDataLink">TMasterDataLink</property> triggers an OnMasterChange event.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Fields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists all the field components from the master dataset that are used to establish a link to the detail dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TMasterDataLink">Fields</property> to access individual link field components from the master data set. <property namespace="Db" class="TMasterDataLink">Fields</property> lists the field components in the master dataset named by the FieldNames property. Datasets use this property to ascertain the current values of the link fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TMasterDataLink">Fields</property> is a read-only property. <property namespace="Db" class="TMasterDataLink">Fields</property> is generated by locating the field components referenced by the FieldNames property in the master dataset.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnMasterChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after the Fields property changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="Db" class="TMasterDataLink">OnMasterChange</event> event handler to update the dataset that owns the TMasterSourceLink to reflect any changes that occurred in the source (master) dataset or the FieldNames property. The Fields property reflects the new state of the source (master) dataset and the FieldNames property. If FieldNames refers to any fields that disappeared from the source dataset, the Fields property contains undefined field components for those fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Typically, the <event namespace="Db" class="TMasterDataLink">OnMasterChange</event> event handler updates the detail dataset to reflect those details that correspond to the master field values obtained from the Fields property.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnMasterDisable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the source dataset becomes inactive.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="Db" class="TMasterDataLink">OnMasterDisable</event> event handler to respond when the source (master) dataset becomes inactive. When the source dataset is inactive, the field components in the Fields property can not be used to obtain the data from records in the source dataset. Thus, only information cached by the detail dataset that owns the <event namespace="Db" class="TMasterDataLink">TMasterDataLink</event> can be used after <event namespace="Db" class="TMasterDataLink">OnMasterDisable</event> until the next OnMasterChange event occurs.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TDataSource</class> provides an interface between a dataset component and data-aware controls on a form.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="Db">TDataSource</class> to </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">provide a conduit between a dataset and data-aware controls on a form that enable display, navigation, and editing of the data underlying the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">link two datasets in a master/detail relationship.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">All datasets must be associated with a data source component if their data is to be displayed and manipulated in data-aware controls. Similarly, each data-aware control needs to be associated with a data source component in order for the control to receive and manipulate data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Data source components also link datasets in master-detail relationships.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IsLinkedTo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks whether a data source is linked to a specified dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TDataSource">IsLinkedTo</method> to verify that a data source is linked to a specific dataset. DataSet is the name of the dataset to which the data source should be linked. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the data source already uses the specified dataset (or its parent dataset if the specified dataset is nested in another dataset), <method namespace="Db" class="TDataSource">IsLinkedTo</method> returns true. If the data source does not use the specified dataset <method namespace="Db" class="TDataSource">IsLinkedTo</method> returns false.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="Db" class="TDataSource">IsLinkedTo</method> is a low-level method mainly of interest to component developers who need to detect circular data references. Otherwise <method namespace="Db" class="TDataSource">IsLinkedTo</method> should not be called directly.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataSource">Create</method>s an instance of a <method namespace="Db" class="TDataSource">TDataSource</method> component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TDataSource">Create</method> to instantiate a <method namespace="Db" class="TDataSource">TDataSource</method> component at runtime. Data source components added to a form or data module at design time are automatically created.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataSource">Create</method> instantiates a data link list, and sets the Enabled and AutoEdit properties of the component to true.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Edit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Puts the associated dataset into edit mode, if possible.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TDataSource">Edit</method> to enable a data source component to control a user's ability to edit a dataset associated with the data source. <method namespace="Db" class="TDataSource">Edit</method> checks that the Auto<method namespace="Db" class="TDataSource">Edit</method> property of the data source is true and that its State property is dsBrowse before calling the dataset's <method namespace="Db" class="TDataSource">Edit</method> method. Checking these properties before calling the dataset's <method namespace="Db" class="TDataSource">Edit</method> method ensures that the dataset is in a state that supports editing, and that the data source allows editing as well.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataSource">Destroy</method>s the instance of a data source component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="Db" class="TDataSource">Destroy</method> directly. Instead, call Free, which checks that the data source reference is not nil before calling <method namespace="Db" class="TDataSource">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataSource">Destroy</method> sets OnStateChange to nil (Delphi) or NULL (C++), sets the dataset for the component to nil (Delphi) or NULL (C++), and frees the data link list before calling the inherited destructor for the component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.State">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reads the current state of the dataset component associated with a data source.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="Db" class="TDataSource">State</property> to determine the current state of the dataset associated with a data source component. The state of a dataset indicates the action, if any, taking place against the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The possible values of <property namespace="Db" class="TDataSource">State</property> correspond to the values for a dataset's <property namespace="Db" class="TDataSource">State</property> property and are identical to them except that when Enabled is false or DataSet is unassigned, <property namespace="Db" class="TDataSource">State</property> is dsInactive regardless of the actual state of the dataset.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AutoEdit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines if a data source component automatically calls a dataset's Edit method when a data-aware control associated with the data source receives focus.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TDataSource">AutoEdit</property> is true by default. If <property namespace="Db" class="TDataSource">AutoEdit</property> is true, then when a user attempts to modify the data displayed by the control the data source calls the underlying dataset's Edit method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="Db" class="TDataSource">AutoEdit</property> to false to protect data from unintentional modification. Even if <property namespace="Db" class="TDataSource">AutoEdit</property> is false, an application can explicitly call a dataset's Edit method to permit data modification.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the dataset for which the data source component serves as a conduit to data-aware controls or other datasets.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="Db" class="TDataSource">DataSet</property> to the name of an existing dataset component either at design time, or at runtime. By changing the value of <property namespace="Db" class="TDataSource">DataSet</property> at runtime an application can effectively use the same data-aware controls to display and edit data in different datasets.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DataSource.<property namespace="Db" class="TDataSource">DataSet</property> := Client<property namespace="Db" class="TDataSource">DataSet</property>1;</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DataSource-&gt;<property namespace="Db" class="TDataSource">DataSet</property> = Client<property namespace="Db" class="TDataSource">DataSet</property>1;</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To link a dataset that resides in a data module to a form at design-time, choose File | Use unit (Delphi) or File | Include unit header (C++).</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Enabled">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines if the data-aware controls associated with the data source component display data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TDataSource">Enabled</property> to control whether data-aware controls connected to a data source display data. If <property namespace="Db" class="TDataSource">Enabled</property> is true (the default), data are displayed. If <property namespace="Db" class="TDataSource">Enabled</property> is false, all controls associated with the data source are blank.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>While an application can set <property namespace="Db" class="TDataSource">Enabled</property> to false to blank out data-aware controls during processing of multiple records, a better choice is to use the TDataSet EnableControls and DisableControls methods. Using these methods prevents the controls from blanking out during processing.</para>
                  
            </note>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnStateChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the state of a data source component's dataset changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="Db" class="TDataSource">OnStateChange</event> event handler to take specific actions when the State property changes for a dataset associated with a data source component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">During the course of a normal connection to a database, a dataset's state changes frequently. For example, each time a user starts editing a field in a data-aware control the dataset's State property is changed from dsBrowse to dsEdit if the State is not already dsEdit. An <event namespace="Db" class="TDataSource">OnStateChange</event> event handler can respond to changes in state by taking actions such as disabling or enabling menu items or buttons.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnDataChange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the data in a record has changed, either due to field edits or moving the cursor to a new record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="Db" class="TDataSource">OnDataChange</event> event handler to take specific actions when a field in the current record has been edited and the application moves to another field, or when the current record in the associated dataset changes. <event namespace="Db" class="TDataSource">OnDataChange</event> is especially useful in applications that must synchronize data display in controls that are not data-aware. This event is typically used to make sure the control reflects the current field values in the dataset, because it is triggered by all changes. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Methods that can trigger this event include the Next or Prior methods for the dataset. Data-aware controls notify a data source of a data change when:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Scrolling to a new record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Modifications to a field's data.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnUpdateData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when the data in the current record is about to be updated.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="Db" class="TDataSource">OnUpdateData</event> event handler to take specific actions prior to posting data changes to the database. If an application posts changes to the database and an <event namespace="Db" class="TDataSource">OnUpdateData</event> event handler exists, the handler is called before the dataset's Post method is executed. An <event namespace="Db" class="TDataSource">OnUpdateData</event> event handler might be useful for performing additional data processing or validation before posting.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDataSetDesigner">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TDataSetDesigner</class> is the base class for all dataset designers.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="Db">TDataSetDesigner</class> when defining a design-time editor, such as the Fields editor, that enables a developer to specify the fields that belong to a dataset at design time. The dataset designer is specified as the designer property of a dataset that uses it to enable design-time specification of its structure.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataSetDesigner">Create</method>s and initializes an instance of <method namespace="Db" class="TDataSetDesigner">TDataSetDesigner</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TDataSetDesigner">Create</method> from the component editor of a specialized dataset to create an instance of the dataset designer. <method namespace="Db" class="TDataSetDesigner">Create</method> initializes the DataSet property of the dataset designer and the Designer property of the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.BeginDesign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ensures that the dataset is not active while design changes are made.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataSetDesigner">BeginDesign</method> is called before changing the structure of the associated dataset. <method namespace="Db" class="TDataSetDesigner">BeginDesign</method> deactivates the dataset and disables any associated controls until the EndDesign method is called.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.DataEvent">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides the interface for a method that can respond to data events.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TDataSetDesigner">DataEvent</method> to pass information about data events to the dataset designer. The Event parameter specifies the type of event that is occurring. Use the Info parameter to specify additional information about the event. The value of the Info parameter depends on the type of data event.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="Db" class="TDataSetDesigner">DataEvent</method> method for <method namespace="Db" class="TDataSetDesigner">TDataSetDesigner</method> does nothing when informed of a data event. Override this method to allow the data set designer to respond to different types of events.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.EndDesign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reactivates the dataset if it was active when designing began.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TDataSetDesigner">EndDesign</method> when changes to the dataset are complete. <method namespace="Db" class="TDataSetDesigner">EndDesign</method> re-enables all controls that use the dataset and resets the Active property of the dataset to the value it help when BeginDesign was called.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Disposes of an instance of <method namespace="Db" class="TDataSetDesigner">TDataSetDesigner</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call the <method namespace="Db" class="TDataSetDesigner">Destroy</method> method directly.  Instead, when freeing the dataset designer from a component editor, use the Free method.  Free checks that the dataset designer reference is not nil, and only then calls <method namespace="Db" class="TDataSetDesigner">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TDataSetDesigner">Destroy</method> sets the Designer property of the associated dataset to nil (Delphi) or NULL (C++) before destroying the instance of <method namespace="Db" class="TDataSetDesigner">TDataSetDesigner</method>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides a reference to the dataset currently being designed.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TDataSetDesigner">DataSet</property> to access the dataset, if any, that is being designed. When the user specifies changes in the dataset designer, the changes can be made to the dataset specified by the <property namespace="Db" class="TDataSetDesigner">DataSet</property> property.<condition language="Delphi"/>
                  
            </para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TCheckConstraint">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TCheckConstraint</class> represents a record-level constraint on a dataset component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">BDE-enabled and </condition>
               
               <condition os="Linux">C</condition>
               
               <condition os="Windows">c</condition>lient dataset components implement a Constraints property that uses check constraints to represent record-level constraints. These constraints can be derived from the server<condition os="Windows"> or the data dictionary,</condition> and can be customized in applications. Each <class namespace="Db">TCheckConstraint</class> object represents an individual constraint associated with a dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetDisplayName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves the current text for a constraint.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TCheckConstraint">GetDisplayName</method> to retrieve the current text for a check constraint. <method namespace="Db" class="TCheckConstraint">GetDisplayName</method> returns the current value of the ImportedConstraint property, unless it is an empty string. In that case it returns the current value of the CustomConstraint property. If it, too, is an empty string, <method namespace="Db" class="TCheckConstraint">GetDisplayName</method> returns the class name of the object.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Assign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TCheckConstraint">Assign</method>s one constraint to another.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TCheckConstraint">Assign</method> to copy the SQL that defines the constraint of another <method namespace="Db" class="TCheckConstraint">TCheckConstraint</method> object into this one. Source is the <method namespace="Db" class="TCheckConstraint">TCheckConstraint</method> from which to read text.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CustomConstraint">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the SQL text representation of a constraint defined on a record by an application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TCheckConstraint">CustomConstraint</property> to store the SQL text that defines a check constraint defined by the application for a dataset component. Custom constraints are local to the application and do not get applied by the server when an application writes its changes to a database.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Custom constraints are SQL expressions. Because of this, always use a period (.) as a floating-point separator.  This may be inconsistent with international <condition os="Windows">Windows </condition>settings.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ErrorMessage">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the text of an error message to display if data entered in a record by a user violates the constraint condition.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TCheckConstraint">ErrorMessage</property> to set the error message string to display in an exception message dialog if a user enters data in a record that violates a check constraint condition.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FromDictionary">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Indicates whether to fetch a check constraint from the Data Dictionary.</condition>
                     
               <condition os="Linux">Reserved for future use.</condition>
                  
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Linux">
                        
                  <property namespace="Db" class="TCheckConstraint">FromDictionary</property> is only implemented for the Windows product, which has a data dictionary.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Use <property namespace="Db" class="TCheckConstraint">FromDictionary</property> to indicate whether this check constraint is derived from the Data Dictionary </condition>
                     
               <condition language="Delphi" os="Windows">(True)</condition>
                     
               <condition language="CBuilder" os="Windows">(true)</condition>
                     
               <condition os="Windows">, or is local to the application </condition>
                     
               <condition language="Delphi" os="Windows">(False)</condition>
                     
               <condition language="CBuilder" os="Windows">(false)</condition>
                     
               <condition os="Windows">.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ImportedConstraint">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the SQL text for a check constraint imported from <condition os="Windows">the Data Dictionary or </condition>a remote SQL database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="Db" class="TCheckConstraint">ImportedConstraint</property> stores the SQL text for a check constraint that is imported from the server<condition os="Windows"> or Data Dictionary</condition>. Although an application can set this property at runtime, ordinarily the text in <property namespace="Db" class="TCheckConstraint">ImportedConstraint</property> is automatically provided to the application.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Linux"/>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TCheckConstraints">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TCheckConstraints</class> contains a collection of check constraints for a dataset component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">BDE-enabled and c</condition>
               
               <condition os="Linux">C</condition>lient dataset components support check constraints that define the values that can be entered into a single record. The <class namespace="Db">TCheckConstraints</class> object maintains the collection of check constraints that apply to a given dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Add">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TCheckConstraints">Add</method>s a check constraint to the list maintained by this collection object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TCheckConstraints">Add</method> to add another check constraint to those known to the dataset component that owns this check constraint object. After adding a check constraint, set its properties to provide the SQL that defines the constraint.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Instantiates an instance of a check constraint collection object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not need to instantiate <method namespace="Db" class="TCheckConstraints">TCheckConstraints</method>. This object is created by the dataset that uses it to implement its Constraints property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TCheckConstraints">Create</method> to instantiate a check constraint collection at runtime when you need a collection object and it has not been created automatically for you. <method namespace="Db" class="TCheckConstraints">Create</method> calls its inherited constructor, and sets the collection's owner object to Owner.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Maintains an indexed array of check constraints.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TCheckConstraints">Items</property> to access individual check constraints that apply to the dataset component that owns this check constraint collection.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TParamType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TParamType</type> and <type namespace="DRIntf">TParamType</type>s represent the use of parameters on datasets that represent queries or stored procedures.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TParamType</type> indicates how a query or stored procedure parameter is used. <type namespace="DRIntf">TParamType</type>s is a set of parameter types that can be used to filter parameters so that an application need only work with those parameters that are of interest.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The DbClient unit defines a constant, AllParamTypes, of type <type namespace="DRIntf">TParamType</type>s that represents any possible parameter type:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> const AllParamTypes = [ptUnknown, ptInput, ptOutput, ptInputOutput, ptResult];</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> #define AllParamTypes <type namespace="DRIntf">TParamType</type>s() &lt;&lt; ptUnknown &lt;&lt; ptInput &lt;&lt; ptOutput &lt;&lt; ptInputOutput &lt;&lt; ptResult )</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TParamType</type> includes the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ptUnknown</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Unknown or undetermined. Before executing a stored procedure, the application must set parameters of this type to another kind.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ptInput</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Used to input a field value. Identifies a parameter used to pass values to a query or stored procedure for processing.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ptOutput</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Used to output a field value. Identifies a parameter used by a stored procedure to return values to an application.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ptInputOutput</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Used for both input and output.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ptResult</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Used as a return value. Identifies a parameter used by a stored procedure to return an error or status value. A stored procedure can only have one parameter of type ptResult.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TParam">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TParam</class> represents a field parameter for a query or stored procedure.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties of a <class namespace="DB">TParam</class> to set the value of a parameter that represents the value of a field. Datasets that represent queries and stored procedures create <class namespace="DB">TParam</class> objects to represent the parameters of their query or stored procedures. Client datasets use <class namespace="DB">TParam</class> objects to pass parameter values to a source dataset.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>
                  
                  <condition os="Windows">ADO-based datasets do not use <class namespace="DB">TParam</class> objects to represent parameter values. They use the <class namespace="DB">TParam</class>eter class instead.</condition>
               
               </para>
            
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TParam</class> shares many properties with TField, as both describe the value of a field in a dataset. However, a TField object has several properties to describe the field binding, and how the field is displayed, edited, or calculated that are not needed in a <class namespace="DB">TParam</class> object. Conversely, <class namespace="DB">TParam</class> includes properties that indicate how the field value is passed as a parameter.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetDataSize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the number of bytes needed to hold the parameter's value in the format used by the corresponding type of database field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TParam">GetDataSize</method> to determine the number of bytes used to represent the parameter's value. <method namespace="DB" class="TParam">GetDataSize</method> indicates the buffer size needed before calling the GetData method. The value returned by <method namespace="DB" class="TParam">GetDataSize</method> depends on the Value of the parameter. For some values of DataType, this is always the same:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>DataType</th>
                        
                  <th>Value of DataSize</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBoolean</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>2 </para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftSmallint</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>2</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftWord</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>2</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftAutoInc</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>4</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftDate</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>4</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftInteger</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>4</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftTime</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>4</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftCurrency</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>8</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftDateTime</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>8</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftFloat</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>8</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftTimeStamp</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>16</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBCD</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>34 </para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftString</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>length of the string + 1</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftFixedChar</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>length of the string + 1</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftVarBytes</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>If the value is a Variant array, the number of elements in the array, else 0</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBytes</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>If the value is a Variant array, the number of elements in the array, else 0</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftBlob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>number of bytes of blob data</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftFmtMemo</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>number of bytes of blob data</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftGraphic</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>number of bytes of blob data</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftMemo</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>length of memo string + 1</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftDBaseOle</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>number of bytes of blob data</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftParadoxOle</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>number of bytes of blob data</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftOraBlob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>number of bytes of blob data</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftOraClob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>number of bytes of blob data</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftTypedBinary</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>number of bytes of data</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftADT</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>0</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftArray</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>0</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftDataSet</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>0</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftReference</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>0</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftCursor</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>0</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ftUnknown</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>raises an EDatabaseError exception</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The size returned by <method namespace="DB" class="TParam">GetDataSize</method> is the size required for the physical database representation of the Value. The field object that corresponds to that physical database field may store its data in another format requiring a different number of bytes.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TParam">Create</method>s an instance of <method namespace="DB" class="TParam">TParam</method> and inserts it in a parameter list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TParam">Create</method> to instantiate a <method namespace="DB" class="TParam">TParam</method> object. <method namespace="DB" class="TParam">TParam</method> objects are usually created by the dataset that uses them to represent its field parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AParams is the <method namespace="DB" class="TParam">TParam</method>s object to which the parameter belongs.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AParamType indicates how the parameter is to be used. It becomes the value of the ParamType property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Collection is the <method namespace="DB" class="TParam">TParam</method>s object to which the parameter belongs.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Assign">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies the Name and Value of another <method namespace="DB" class="TParam">TParam</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">Assign</method> to copy from another parameter or from a field component. If the Source parameter is another parameter, <method namespace="DB" class="TParam">Assign</method> transfers the value of</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The DataType property</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Bound property</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Value property</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Name property</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ParamType property only if it is currently ftUnknown.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the Source parameter is a field component, <method namespace="DB" class="TParam">Assign</method> transfers the value of</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The DataType property</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Value property</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Name property (from the FieldName of the field)</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When assigning values from a field, <method namespace="DB" class="TParam">Assign</method> sets the Bound property to true.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TParam">Assign</method> does not alter the use of a parameter, only the identifier and the value.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AssignField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assigns the DataType, Name, and Value properties from a TField object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">AssignField</method> to set a parameter to represent a particular TField object. <method namespace="DB" class="TParam">AssignField</method> sets the Bound property to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unlike <method namespace="DB" class="TParam">AssignField</method>Value, <method namespace="DB" class="TParam">AssignField</method> names the parameter after the field object as well as taking its value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AssignFieldValue">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assigns the DataType and Value properties from a TField object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">AssignFieldValue</method> to set the Value property to the value passed as the Value parameter. <method namespace="DB" class="TParam">AssignFieldValue</method> assumes that the Value represents a value from a field like the Field parameter, and assigns the DataType property accordingly. <method namespace="DB" class="TParam">AssignFieldValue</method> sets the Bound property to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unlike AssignField, <method namespace="DB" class="TParam">AssignFieldValue</method> does not name the parameter after the field object.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Clear">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the Value of the parameter to NULL.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">Clear</method> to assign a NULL value to a parameter. Calling <method namespace="DB" class="TParam">Clear</method> neither sets nor clears the Bound property. When assigning a NULL value to a parameter, set the Bound property as well as calling <method namespace="DB" class="TParam">Clear</method>.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fills the buffer with the Value of the parameter in the native format of a database field of the appropriate type.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">GetData</method> to obtain the value of a parameter in the format ready to be written directly to the underlying database. That format is the format used by physical database fields corresponding to DataType. Buffer must have enough space to hold the information. Use the <method namespace="DB" class="TParam">GetData</method>Size method to determine the necessary size.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The native format for a database field may not be the same as the datatype used by the corresponding field object. Use the As... properties to get the value in the type used by the corresponding field object. Use <method namespace="DB" class="TParam">GetData</method> to get the value in the native database format.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, when DataType is ftBCD, <method namespace="DB" class="TParam">GetData</method> retrieves the value in binary-coded decimal, even though the TBCDField object uses Currency to store and manipulate its values. AsBCD gets the value in the Currency type. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.LoadFromFile">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Loads the value of a BLOB parameter from the specified file.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">LoadFromFile</method> to set the value of a BLOB parameter from a value stored in the file specified by the FileName parameter. The DataType property is set to the value passed as the BlobType parameter.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Query2.ParamByName('Notes').LoadFromFile('c:\Files\Note1234.txt', ftMemo);</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.LoadFromStream">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Loads the value of a BLOB parameter from a stream.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">LoadFromStream</method> to set the value of a BLOB parameter from a value read from the stream specified by the Stream parameter. For example, use <method namespace="DB" class="TParam">LoadFromStream</method> to set the value of a BLOB parameter directly from a BLOB stream. The DataType property is set to the value passed as the BlobType parameter.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SetBlobData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies a new value for the parameter in physical database format from Buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">SetBlobData</method> to set the value of a parameter from a buffer that contains data from a Binary Large Object (BLOB) field. <method namespace="DB" class="TParam">SetBlobData</method> copies the number of bytes specified by the Size parameter from the buffer specified by the Buffer parameter, and sets the DataType property to ftBlob.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SetData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies a new value for the parameter in physical database format from Buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TParam">SetData</method> to set the value of a parameter from a buffer that contains data in the physical database format. The GetData method of a TField object fetches data in the physical database format.<condition os="Windows"> Borland Database Engine API calls can also provide data in physical database format.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When the DataType property is ftUnknown, ftBytes, ftVarBytes, ftAutoInc, ftBlob, ftGraphic, ftFmtMemo, ftParadoxOle, ftDBaseOle, or ftTypedBinary, <method namespace="DB" class="TParam">SetData</method> raises an EDatabaseError exception. For BLOB fields, use the SetBlobData method instead.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsBCD">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a binary-coded decimal (BCD) field with less than 4 decimal places or 20 significant digits.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsBCD</property> to assign the value for a BCD field to the parameter when the BCD field can be converted to the Currency type without a loss of precision.  TBCDField objects use the Currency type to represent the value of BCD fields, so <property namespace="DB" class="TParam">AsBCD</property> takes a Currency value as well. Setting <property namespace="DB" class="TParam">AsBCD</property> sets the DataType property to ftBCD.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsBCD</property> property to determine the value that was assigned to an output parameter, represented as a Currency type. The value of the parameter is converted to a Currency value if possible.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the BCD field requires greater precision than allowed by the Currency type, use a TFMTBCDField object and the AsFMTBCD property instead.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsFMTBCD">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a binary-coded decimal (BCD) field with more than 4 decimal places or 20 significant digits</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsFMTBCD</property> to assign the value for a BCD field to the parameter when the BCD field is represented by a TFMTBCDField object.  TFMTBCDField objects and the <property namespace="DB" class="TParam">AsFMTBCD</property> property use a true BCD type to represent the value of BCD fields. This is more accurate but slower than the Currency type used by TBCDField and the AsBCD property. Setting <property namespace="DB" class="TParam">AsFMTBCD</property> sets the DataType property to ftFMTBCD.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsFMTBCD</property> property to determine the value that was assigned to an output parameter, represented as a TBcd type. The value of the parameter is converted to a TBcd value if possible.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the BCD field uses less than 4 decimal places or 20 significant digits, you can achieve better performance by using a TBCDField object and the AsBCD property instead.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsBlob">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a binary large object (BLOB) field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsBlob</property> to assign the value for a Blob field to the parameter. <property namespace="DB" class="TParam">AsBlob</property> takes a TBlobData (Delphi) or an AnsiString (C++) value, which can act as an untyped string of bytes. Setting <property namespace="DB" class="TParam">AsBlob</property> sets the DataType property to ftBlob.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For example, if the variable Buffer is of type PChar and contains binary data read from a file, the contents of Buffer are directly assigned to the BLOB parameter using the <property namespace="DB" class="TParam">AsBlob</property> property:</condition>
                  
            </para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Query1.Params[0].AsBlob := Buffer;</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications seldom need to read <property namespace="DB" class="TParam">AsBlob</property> because Blob fields can't be used as output parameters.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsBoolean">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a boolean field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsBoolean</property> to assign the value for a boolean field to the parameter. Setting <property namespace="DB" class="TParam">AsBoolean</property> sets the DataType property to ftBoolean.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsBoolean</property> property to determine the value that was assigned to an output parameter, represented as a Boolean (Delphi) or bool (C++). The value of the parameter is converted to a Boolean or bool value if possible.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsCurrency">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a field of type Currency.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsCurrency</property> to assign the value for a parameter of type Currency. Setting <property namespace="DB" class="TParam">AsCurrency</property> sets the DataType property to ftCurrency.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsCurrency</property> property to determine the value that was assigned to an output parameter, represented as a Currency type. The value of the parameter is converted if possible.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsDate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a date field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsDate</property> to assign the value for a date field to the parameter. Setting <property namespace="DB" class="TParam">AsDate</property> sets the DataType property to ftDate.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsDate</property> property to determine the value that was assigned to an output parameter, represented as a TDateTime. The value of the parameter is converted to a DateTime value if possible. If the DataType for the parameter is ftDate, only the date portion of the TDateTime value is valid. If a TDateTime value is assigned to a parameter via the <property namespace="DB" class="TParam">AsDate</property> property and the TDateTime value has a nonzero time, the time is ignored and only the date is assigned. If <property namespace="DB" class="TParam">AsDate</property> is used to get the value for a TDateTime container, the date from the parameter is stored but the TDateTime gets a zero time value.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>It is not possible to store a NULL value directly to a parameter using <property namespace="DB" class="TParam">AsDate</property>. Use the <property namespace="DB" class="TParam">TParam</property>
                        
                  <condition language="Delphi">.</condition>
                        
                  <condition language="CBuilder">::</condition>Clear method instead.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsDateTime">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a date-time field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsDateTime</property> to assign the value for a date-time field to the parameter. Setting <property namespace="DB" class="TParam">AsDateTime</property> sets the DataType property to ftDateTime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsDateTime</property> property to determine the value that was assigned to an output parameter, represented as a DateTime. The value of the parameter is converted to a DateTime value if possible. <condition os="Windows">If a TDate value is assigned to a parameter via the <property namespace="DB" class="TParam">AsDateTime</property> property, the date portion of the TDate value is assigned to the parameter and the time portion is assigned a zero value. If <property namespace="DB" class="TParam">AsDateTime</property> is used to get the value for a TDate container, the date from the parameter is stored but the time value returned by <property namespace="DB" class="TParam">AsDateTime</property> is ignored.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>It is not possible to store a NULL value directly to a parameter using <property namespace="DB" class="TParam">AsDateTime</property>. Use the <property namespace="DB" class="TParam">TParam</property>
                        
                  <condition language="Delphi">.</condition>
                        
                  <condition language="CBuilder">::</condition>Clear method instead.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsFloat">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a float field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsFloat</property> to assign the value for a float field to the parameter. Setting <property namespace="DB" class="TParam">AsFloat</property> sets the DataType property to ftFloat.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsFloat</property> property to determine the value that was assigned to an output parameter, represented as a double. The value of the parameter is converted to a double value if possible.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsInteger">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents an integer field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsInteger</property> to assign the value for an integer field to the parameter. Setting <property namespace="DB" class="TParam">AsInteger</property> sets the DataType property to ftInteger.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsInteger</property> property to determine the value that was assigned to an output parameter, represented as a 32-bit integer. The value of the parameter is converted to a 32-bit integer if possible.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsSmallInt">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a small integer field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsSmallInt</property> to assign the value for a small integer field to the parameter. Setting <property namespace="DB" class="TParam">AsSmallInt</property> sets the DataType property to ftSmallint.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsSmallInt</property> property to determine the value that was assigned to an output parameter, represented as a 32-bit integer. The value of the parameter is converted to a LongInt value if possible.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TParam">AsSmallInt</property> works with a 32-bit integer. Small integer field objects store and manipulate their data as 32-bit integers even though the values in the underlying database are 16-bit integers.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsSQLTimeStamp">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents an SQL timestamp field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsSQLTimeStamp</property> to assign the value for an SQL timestamp field to the parameter. Setting <property namespace="DB" class="TParam">AsSQLTimeStamp</property> sets the DataType property to ftTimeStamp.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsSQLTimeStamp</property> property to determine the value that was assigned to an output parameter, represented as an SQLTimeStamp record (Delphi) or structure (C++). The value of the parameter is converted to an SQLTimeStamp record or structure if possible.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsMemo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a memo field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsMemo</property> to assign the value for a memo field to the parameter. Setting <property namespace="DB" class="TParam">AsMemo</property> sets the DataType property to ftMemo.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A literal string or a null-terminated string may be directly assigned to the parameter for a memo column using the <property namespace="DB" class="TParam">AsMemo</property> property. For example:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">SQLQuery1.Params[0].AsMemo := 'Some text in a long Pascal String';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLQuery2-&gt;ParamByName("Notes")-&gt;AsString = "Some string value";</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">It is seldom necessary to read <property namespace="DB" class="TParam">AsMemo</property>, because memo fields can not be used as output parameters.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">Some servers support string field types that are too long to fit in the record buffer. These fields are represented as memo fields, although they are not actually Blob fields. When working with such "pseudo-Blob" fields, use the AsString property instead.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsString">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a string field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsString</property> to assign the value for a string field to the parameter. Setting <property namespace="DB" class="TParam">AsString</property> sets the DataType property to ftString.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsString</property> property to determine the value that was assigned to an output parameter, represented as a string. The value of the parameter is converted to a string.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">Some servers support string field types that are too long to fit in the record buffer. These fields are represented as memo fields, although they are not actually Blob fields. When working with such "pseudo-Blob" fields, use the <property namespace="DB" class="TParam">AsString</property> property rather than the AsMemo property.</condition>
                     
               </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsTime">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a time field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsTime</property> to assign the value for a time field to the parameter. Setting <property namespace="DB" class="TParam">AsTime</property> sets the DataType property to ftTime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsTime</property> property to determine the value that was assigned to the parameter, represented as a DateTime. The value of the parameter is converted to a DateTime value if possible. If the DataType for the parameter is ftTime, only the time portion of the TDateTime value is valid.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>It is not possible to store a NULL value directly to a parameter using <property namespace="DB" class="TParam">AsTime</property>. Use the <property namespace="DB" class="TParam">TParam</property>
                        
                  <condition language="Delphi">.</condition>
                        
                  <condition language="CBuilder">::</condition>Clear method instead.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AsWord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the value of the parameter when it represents a word field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">AsWord</property> to assign the value for a word field to the parameter. Setting <property namespace="DB" class="TParam">AsWord</property> sets the DataType property to ftWord.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read the <property namespace="DB" class="TParam">AsWord</property> property to determine the value that was assigned to the parameter, represented as a 32-bit integer. The value of the parameter is converted to a LongInt value if possible.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TParam">AsWord</property> works with a 32-bit integer. Word field objects store and manipulate their data as 32-bit integers even though the values in the underlying database are unsigned 16-bit values.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Bound">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a value (NULL or otherwise) has been assigned to the parameter.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TParam">Bound</property> to determine whether a value has been assigned to the parameter. Whenever a value is assigned to the <property namespace="DB" class="TParam">TParam</property> object, <property namespace="DB" class="TParam">Bound</property> is automatically set to true. Set <property namespace="DB" class="TParam">Bound</property> to false to undo the setting of a value. The Clear method replaces the value of the parameter with NULL, but does not set <property namespace="DB" class="TParam">Bound</property> to false. However, if the Clear method is used to bind the parameter to a NULL value, <property namespace="DB" class="TParam">Bound</property> must be separately set to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Datasets that represent queries and stored procedures use the value of <property namespace="DB" class="TParam">Bound</property> to determine whether to assign a default value for the parameter. If <property namespace="DB" class="TParam">Bound</property> is false, datasets that represent queries attempt to assign a value from the dataset indicated by their DataSource property. Similarly, when <property namespace="DB" class="TParam">Bound</property> is false, datasets that represent stored procedures attempt to supply a value directly from the server.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.IsNull">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the value assigned to the parameter is NULL (blank).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="DB" class="TParam">IsNull</property> to discover if the value of the parameter is NULL, indicating the value of a blank field. NULL values can arise in the following ways:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assigning the value of another, NULL, parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assigning the value of a blank field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calling the Clear method.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>NULL parameters are not the same as unbound parameters. Unbound parameters have not had a value assigned. NULL parameters have a NULL value. NULL parameters may be bound or unbound.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.NativeStr">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the value of the parameter as a string, using the character set of the database table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TParam">NativeStr</property> to obtain a string version of the parameter value that uses the character set (code page) associated with the underlying database table.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Text">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the parameter as a string.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set the <property namespace="DB" class="TParam">Text</property> property to assign the value of the parameter to a string without changing the DataType. Unlike the AsString property, which sets the value to a string and changes the DataType, setting the text property converts the string to the DataType of the parameter, and sets the value accordingly. Thus, use AsString to treat the parameter as representing the value of a string field. Use <property namespace="DB" class="TParam">Text</property> instead when assigning a value that is in string form, when making no assumptions about the field type. For example, <property namespace="DB" class="TParam">Text</property> is useful for assigning user data that was input using an edit control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reading the <property namespace="DB" class="TParam">Text</property> property is the same as reading the AsString property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the type of field whose value the parameter represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TParam">DataType</property> is set automatically when a value is assigned to the parameter. Do not set <property namespace="DB" class="TParam">DataType</property> for bound fields, as that may cause the assigned value to be misinterpreted.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TParam">DataType</property> to discover the type of data that was assigned to the parameter. Each possible value of <property namespace="DB" class="TParam">DataType</property> corresponds to a type of database field.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Precision">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of digits allowed for a numeric parameter.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">Precision</property> to indicate the maximum number of digits allowed in the parameter, including both significant and fractional. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TParam">Precision</property> only applies to parameters used by dbExpress datasets. </para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The NumericScale property controls the total number of decimal digits allowed.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.NumericScale">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of decimal places for the parameter.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">NumericScale</property> to indicate the maximum number of digits that can appear to the right of the decimal place in a parameter's value (the scale). </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TParam">NumericScale</property> only applies to parameters used by dbExpress datasets. </para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The Precision property controls the total number of digits allowed. </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Name">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of the parameter. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TParam">Name</property> to identify a particular parameter within a <property namespace="DB" class="TParam">TParam</property>s object. <property namespace="DB" class="TParam">Name</property> is the name of the parameter, not the name of the field whose value the parameter represents.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ParamType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the type of the parameter the <property namespace="DB" class="TParam">TParam</property> represents. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Objects that use <property namespace="DB" class="TParam">TParam</property> objects to represent field parameters set <property namespace="DB" class="TParam">ParamType</property> to indicate how the parameter is used. <property namespace="DB" class="TParam">ParamType</property> must be one of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Description</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ptUnknown</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Unknown or undetermined. Before executing a stored procedure, the application must set parameters of this type to another kind.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ptInput</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Used to input a field value. Identifies a parameter used to pass values to a query or stored procedure for processing.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ptOutput</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Used to output a field value. Identifies a parameter used by a stored procedure to return values to an application.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ptInputOutput</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Used for both input and output.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ptResult</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Used as a return value. Identifies a parameter used by a stored procedure to return an error or status value. A stored procedure can only have one parameter of type ptResult.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Size">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of characters in a string-type parameter.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TParam">Size</property> to indicate the maximum number of characters allowed in the parameter. <property namespace="DB" class="TParam">Size</property> only pertains to string-type parameters. For numeric type parameters, use the NumericScale and Precision properties. For other parameter types, <property namespace="DB" class="TParam">Size</property> should be zero.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TParam">Size</property> only applies to parameters used by dbExpress datasets. </para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Value">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the value of the parameter as a Variant.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TParam">Value</property> in generic code that manipulates the values of parameters without needing to know the field type the parameters represent.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TParams">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">TParams</class> manages a list of field parameters.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Datasets that represent queries and stored procedures use <class namespace="Db">TParams</class> objects to represent the parameters of their query or stored procedures. Client datasets use <class namespace="Db">TParams</class> to represent parameters they pass to a source dataset.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>
                  
                  <condition os="Windows">ADO-based datasets do not use <class namespace="Db">TParams</class> objects to represent parameters. They use the TParameters class instead.</condition>
               
               </para>
            
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the properties and methods of <class namespace="Db">TParams</class> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access a specific field parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add or delete field parameters from the list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Get or set the values of individual field parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Compare field parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Iterate through all field parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copy a set of field parameters to another parameter list.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CreateParam">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new field parameter object and inserts it into the Items list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TParams">CreateParam</method> to instantiate a new TParam object and add it to the Items managed by this <method namespace="Db" class="TParams">TParams</method> object. Specify the field type of the new parameter as the value of FldType, specify the name of the parameter as the value of ParamName, and specify the type of parameter as the value of ParamType.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Parameters for datasets that represent queries are only created by specifying parameters in the SQL statement. The TParam objects in such as dataset's Params property are created automatically when parameter tokens are added to the SQL statement.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IsEqual">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether two <method namespace="Db" class="TParams">TParams</method> objects have identical Items.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TParams">IsEqual</method> returns true if the Items property of the Value parameter exactly matches the Items property. To match, each Items list must have the same number of field parameters, in the same order, which match on name, datatype, parameter type, and value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ParseSQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Locates the parameters in an SQL statement and replaces them with question marks.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TParams">ParseSQL</method> to replace all the parameters in the SQL statement passed as SQL with question marks (?). <method namespace="Db" class="TParams">ParseSQL</method> recognizes parameters by a preceding colon (:). Double colons (::) or colons contained in quoted strings are parsed as literals, and the immediately following name is not replaced with a question mark. The converted SQL statement is returned.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the DoCreate parameter is true, all parameters in the Items property are replaced with a set of TParam objects whose names are the same as the strings removed from the SQL statement.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, given the SQL string</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SELECT * FROM EMPLOYEES
WHERE (ID = :EMP_ID) AND (NAME = :EMP_NAME)</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TParams">ParseSQL</method> returns the string</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SELECT *
FROM EMPLOYEES
WHERE (ID = ?) AND (NAME = ?)</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">and, if DoCreate is true, the Items property contains two TParam objects with the names EMP_ID and EMP_NAME.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ParamByName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Locates the parameter with a given name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TParams">ParamByName</method> to find a parameter with the name passed in Value. If a match is found, <method namespace="Db" class="TParams">ParamByName</method> returns the parameter. Otherwise, an exception is raised. Use this method rather than a direct reference to the Items property to avoid depending on the order of the entries.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To locate a parameter by name without raising an exception if the parameter is not found, use the FindParam method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To locate more than one parameter at a time, by name, use the GetParamList method instead. To get only the value of a named parameter, use the ParamValues property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FindParam">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Locates the parameter with a given name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TParams">FindParam</method> to find a parameter with the name passed in Value. If a match is found, <method namespace="Db" class="TParams">FindParam</method> returns the parameter. Otherwise, it returns nil (Delphi) or NULL (C++). Use this method rather than a direct reference to the Items property to avoid depending on the order of the entries.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To locate more than one parameter at a time, by name, use the GetParamList method instead. To get only the value of a named parameter, use the ParamValues property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TParams">Create</method>s an instance of <method namespace="Db" class="TParams">TParams</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="TParams">Create</method> to instantiate a <method namespace="Db" class="TParams">TParams</method> object. Most applications will not need to create a <method namespace="Db" class="TParams">TParams</method> list, as it is created by the dataset that uses the <method namespace="Db" class="TParams">TParams</method> object.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AssignValues">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assigns new values to the parameters of the Items property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TParams">AssignValues</method> to update the values of the field parameters in the Items list to match the values of the corresponding field parameters in another <method namespace="Db" class="TParams">TParams</method> object. For each entry in Items, the <method namespace="Db" class="TParams">AssignValues</method> method attempts to find a parameter with the same Name property in Value. If successful, the parameter information (type and current data) from the Value parameter is assigned to the Items entry. Entries in Items for which no match is found are left unchanged.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AddParam">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inserts a new field parameter into the Items list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TParams">AddParam</method> to add an instantiated parameter to the Items list. To create a field parameter as well as add it to the list, use CreateParam instead.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Parameters for datasets that represent queries are only created by specifying parameters in the SQL statement. The TParam objects in such a dataset's1` Params property are created automatically when parameter tokens are added to the SQL statement.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.RemoveParam">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes the specified parameter from the Items property of a <method namespace="Db" class="TParams">TParams</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TParams">RemoveParam</method> to remove a field parameter from the Items list. <method namespace="Db" class="TParams">RemoveParam</method> takes Value out of the list but does not free it.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Parameters for datasets that represent queries are only created and removed by specifying parameters in the SQL statement. The TParam objects in such a dataset's Params property are deleted automatically when the corresponding parameter tokens are removed from the SQL statement.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetParamList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fills a TList object with the TParam objects specified by name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="TParams">GetParamList</method> to obtain a subset of the field parameters in the Items list that have been identified by name. ParamNames is a string giving the names of all field parameters of interest. Multiple parameter names are separated by semicolons (;).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="Db" class="TParams">GetParamList</method> adds the field parameters to List in the order they appear in ParamNames. If ParamNames includes a name that does not match any of the field parameters in Items, an exception is raised.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Items">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the individual field parameters of a <property namespace="Db" class="TParams">TParams</property> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TParams">Items</property> to iterate through all the field parameters. Index identifies the index in the range 0 to Count - 1. <property namespace="Db" class="TParams">Items</property> can reference a particular parameter by its index, but the ParamByName method is preferred when working with named parameters, because it does not depend on the order of the parameters.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ParamValues">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the values of individual field parameters that are specified by name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="Db" class="TParams">ParamValues</property> to get or set the values of individual named field parameters. ParamName is a string containing the names of the individual field parameters of interest. If <property namespace="Db" class="TParams">ParamValues</property> is used to access more than one field parameter, the names are separated by semicolons (;).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="Db" class="TParams">ParamValues</property> sets the Value property for each parameter listed in the ParamName string. Specify the values as Variants, in order, in a Variant array.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Getting <property namespace="Db" class="TParams">ParamValues</property> retrieves a Variant array of Variants, each of which represents the value of one of the named parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If ParamName includes a name that does not match any of the field parameters in Items, an exception is raised.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.IProviderSupport">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">IProviderSupport</class> is the interface that datasets use to enable a provider to represent them.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TDataSetProvider uses the <class namespace="DB">IProviderSupport</class> interface to interact with its associated dataset. Any dataset that implements the <class namespace="DB">IProviderSupport</class> interface can be connected to a client dataset <condition os="Windows">or XML broker </condition>via a provider. Once the provider connects the dataset that supports IProvider to a client dataset, that client dataset can obtain data from the dataset and apply updates back to it or its database server.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TDataSet, the base class for all datasets, includes support for <class namespace="DB">IProviderSupport</class>. This support appears as a set of protected methods. However, most of these methods are simple stubs that either do nothing or generate an exception. Most of the dataset classes <condition os="Windows">(dbExpress datasets, BDE-enabled datasets, ADO-enabled datasets, and InterBase Express datasets) </condition>override these protected methods to implement the <class namespace="DB">IProviderSupport</class> interface in a more useful fashion. For datasets that simply rely on the implementation inherited from TDataSet (for example, client datasets), the provider should set its ResolveToDataSet property to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Component writers that create their own custom descendants from TDataSet must override all appropriate <class namespace="DB">IProviderSupport</class> methods if their datasets are to work in an application server or connected to a client dataset <condition os="Windows">or XML broker </condition>via a local provider.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSExecuteStatement">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Executes a specified SQL command.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the value its ResolveToDataSet property is false, a provider component calls <method namespace="DB" class="IProviderSupport">PSExecuteStatement</method> (indirectly) to execute SQL statements that it generates for applying updates. Usually, the dataset passes these statements on to its database server for execution.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The ASQL parameter specifies the SQL command to execute.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AParams contains any parameter values that should be applied to ASQL before execution.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ResultSet allows <method namespace="DB" class="IProviderSupport">PSExecuteStatement</method> to return a dataset component that contains the results of a SELECT statement. If ResultSet is not nil (Delphi) or NULL (C++), <method namespace="DB" class="IProviderSupport">PSExecuteStatement</method> creates a new dataset component as the target of this pointer and fills it with the result set. The caller is responsible for freeing the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSExecuteStatement</method> returns the number of rows affected by executing ASQL.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSGetDefaultOrder">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the definition of an index that imposes the default order on the data included in data packets.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component calls <method namespace="DB" class="IProviderSupport">PSGetDefaultOrder</method> to generate a default index, called DEFAULT_ORDER, for the records that appear in data packets. This index defines the default sort order for records when they appear in the client dataset on the client.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSGetDefaultOrder</method> creates a TIndexDef object to describe the default index. The provider that calls <method namespace="DB" class="IProviderSupport">PSGetDefaultOrder</method> subsequently frees this TIndexDef object.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSGetKeyFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the names of all fields required to uniquely identify records in the data packet.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component calls <method namespace="DB" class="IProviderSupport">PSGetKeyFields</method> to determine what information is required to uniquely identify records in the data packet. This information allows it to locate the records that need to change when it applies updates.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSGetKeyFields</method> returns a semicolon-delimited string that lists the names of the key fields of the dataset. By default (as implemented by TDataSet), these are the fields with pfInKey included in their ProviderFlags property.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSGetParams">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the current parameter values of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component calls <method namespace="DB" class="IProviderSupport">PSGetParams</method> to implement its GetParams method. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSGetParams</method> returns a TParams object that describes the current values of all parameters of the dataset. If the dataset does not have any parameters, <method namespace="DB" class="IProviderSupport">PSGetParams</method> returns nil (Delphi) or NULL (C++).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The <method namespace="DB" class="IProviderSupport">PSGetParams</method> method should not create a new instance of TParams for the return value. The provider that calls <method namespace="DB" class="IProviderSupport">PSGetParams</method> does not free the returned value.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSGetQuoteChar">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the character or characters to use in generated SQL statements to enclose quoted strings.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component calls <method namespace="DB" class="IProviderSupport">PSGetQuoteChar</method> (indirectly) when generating the dynamic SQL statements that apply updates. These statements are subsequently executed by a call to PSExecuteStatement.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSGetQuoteChar</method> returns the character or characters that delimit quoted strings in the generated SQL. This string appears both before and after quoted strings.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSGetTableName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the name of the dataset table that appears in generated SQL statements.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSGetTableName</method> returns the name of the underlying database table against which updates are applied when the provider's ResolveToDataSet property is false. This value is used for generating the SQL statements that apply updates. The generated SQL statements are subsequently executed by a call to PSExecuteStatement.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <method namespace="DB" class="IProviderSupport">PSGetTableName</method> does not return a table name, the provider must have an OnGetTableName event handler to supply this value.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSGetIndexDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the definitions of all specified indexes defined for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component calls <method namespace="DB" class="IProviderSupport">PSGetIndexDefs</method> to locate an index that contains information it needs. For example, it uses <method namespace="DB" class="IProviderSupport">PSGetIndexDefs</method> to locate an index that contains the key fields returned by PSGetKeyFields. This information allows the provider to locate the records that need to change when it applies updates. The provider also calls this method to locate indexes that it adds to the metadata of data packets.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">IndexTypes indicates the options required of the returned indexes. <method namespace="DB" class="IProviderSupport">PSGetIndexDefs</method> returns all indexes whose Options property includes the specified flags.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSGetIndexDefs</method> returns a TIndexDefs object that contains all the indexes of the dataset that match the IndexTypes parameter.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSGetUpdateException">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Generates an EUpdateError object based on another exception object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component calls <method namespace="DB" class="IProviderSupport">PSGetUpdateException</method> when the exception E occurs while applying updates. This method allows the provider to create a single EUpdateError object that encapsulates all the exceptions that occur in an update operation.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">PSGetUpdateError determines the error message, context string, and error code from the exception specified by E and creates a new EUpdateError exception that includes that information as well as the information about a previous error as specified by Prev. The context string and error code for E may be specific to the Exception class associated with the dataset. By default, TDataSet generates an EUpdateError with an error code of 1 and an empty context string.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSInTransaction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether actions against the dataset occur in the context of a transaction.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component applies updates within a transaction, if possible. To do so, it first checks whether a transaction is already underway, and if not, generates one using PSStartTransaction. To determine whether a transaction is already underway, the provider calls <method namespace="DB" class="IProviderSupport">PSInTransaction</method>. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSInTransaction</method> returns true if there is a transaction underway, and false otherwise.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSIsSQLBased">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset includes native SQL support.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider calls <method namespace="DB" class="IProviderSupport">PSIsSQLBased</method> to determine whether the dataset supports some form of native SQL. This information is used when generating SQL commands that are executed by PSExecuteStatement.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Even if the dataset is not SQL-based, it may still allow the provider to execute SQL statements for applying updates. For example, BDE-enabled local databases such as Paradox and DBASE provide SQL support via the BDE's local SQL engine, but are not SQL-based. However, table and field names are not specified in the same way for the local SQL engine as they are for native SQL. The provider uses <method namespace="DB" class="IProviderSupport">PSIsSQLBased</method> to determine how these names should appear in generated SQL.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The PSIsSQLSupported method indicates whether the dataset can execute SQL commands at all, regardless of whether the dataset is SQL-based.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSIsSQLSupported">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset can execute SQL statements.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSIsSQLSupported</method> indicates whether the provider can call PSExecuteStatement to execute an SQL statement. When <method namespace="DB" class="IProviderSupport">PSIsSQLSupported</method> returns false, calling PSExecuteStatement generates an exception. The provider can still work with a dataset that returns false from <method namespace="DB" class="IProviderSupport">PSIsSQLSupported</method>, but it must set the ResolveToDataSet property to true, or provide data on a read-only basis.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSUpdateRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applies a single update to the underlying database table or tables.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Before the provider generates SQL statements to apply an update, it calls <method namespace="DB" class="IProviderSupport">PSUpdateRecord</method> to let the dataset apply the update in some other fashion. <condition os="Windows">For example, BDE-enabled datasets generate an OnUpdateRecord to allow the application to apply the update and, if the OnUpdateRecord event handler does not apply the update, uses any associated TUpdateSQL object to apply the update.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UpdateKind indicates whether the update is an insertion (ukInsert), deletion (ukDelete), or modification (ukModify).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Delta is the delta datapacket. The current record represents the record to be updated.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSUpdateRecord</method> returns true if it updates the record, false otherwise. If <method namespace="DB" class="IProviderSupport">PSUpdateRecord</method> returns false, the provider generates dynamic SQL to perform the update and calls PSExecuteStatement.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="IProviderSupport">PSUpdateRecord</method> is only called if the provider's ResolveToDataSet property is false.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSEndTransaction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ends a transaction that was started by a call to PSStartTransaction.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component applies updates within a transaction, if possible. To do so, it uses <method namespace="DB" class="IProviderSupport">PSEndTransaction</method> in conjunction with the PSStartTransaction method. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Commit parameter indicates whether the dataset should commit the current transaction (Commit is true), or roll it back (Commit is false).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>TDataSetProvider only starts a transaction (Using PSStartTransaction) if the PSInTransaction method indicates that there is no transaction already established. That is, it does not assume nested transaction support is available. Thus, there is no need to ensure that <method namespace="DB" class="IProviderSupport">PSEndTransaction</method> does not terminate a transaction that was not started by the provider.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSExecute">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Executes the SQL command associated with the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component calls <method namespace="DB" class="IProviderSupport">PSExecute</method> to implement its Execute method. If the dataset represents a query or stored procedure that does not return a cursor, this method executes the query or stored procedure. If the provider Options includes poAllowCommandText and the dataset supports the PSSetCommandText method, the statement specified by PSSetCommandText may be executed instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If there is not statement to execute, <method namespace="DB" class="IProviderSupport">PSExecute</method> raises an EDatabaseError exception.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSGetAttributes">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns information that is stored in data packets as Name/Value pairs.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component calls <method namespace="DB" class="IProviderSupport">PSGetAttributes</method> to add information about the dataset to the metadata stored with generated data packets. This information is stored as Name/Value pairs that are added to the list specified by the List parameter.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSReset">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Resets the dataset so that it is positioned on the first record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider calls <method namespace="DB" class="IProviderSupport">PSReset</method> to reposition the dataset on the first record before fetching records.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSSetParams">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Assigns the specified parameter values to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="IProviderSupport">PSSetParams</method> assigns the parameter values specified by AParams to the parameters of the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.PSStartTransaction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Starts a transaction that encapsulates all activity until a call to PSEndTransaction.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The provider component applies updates within a transaction, if possible. To do so, it calls <method namespace="DB" class="IProviderSupport">PSStartTransaction</method> to start a transaction before applying updates, and calls PSEndTransaction when all updates are applied or too many errors are encountered. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>TDataSetProvider only starts a transaction (Using <method namespace="DB" class="IProviderSupport">PSStartTransaction</method>) if the PSInTransaction method indicates that there is no transaction already established. That is, it does not assume nested transaction support is available.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBookMarkStr">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBookmarkStr</type> is a bookmark, represented as a string.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBookmarkStr</type> is the value of a bookmark in a dataset. Although this is a string type, it is not necessarily a string of text. The string can be any string of bytes. The format depends on the type of dataset.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TResyncMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TResyncMode</type> is a set of flags that indicate operations a dataset should perform when resynchronizing data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TResyncMode</type> is a set of zero or more of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>rmExact</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The dataset should raise an exception when the resync operation is initiated when the cursor is not positioned on a valid record.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>rmCenter</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The resync operation should position the active record in the center of all buffered records.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDataAction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDataAction</type> indicates how an application should respond to a database error condition.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TDataAction</type> is the type of a parameter in certain dataset event handlers that indicates how the dataset should proceed after the event handler exits. The following table summarizes the possible values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>daFail</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Abort the operation that led to an error and display an error message.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>daAbort</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Abort the operation that led to an error without displaying a message.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>daRetry</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Repeat the operation that led to an error. The cause of the error should be corrected within the event handler before returning this value.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBlobStreamMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBlobStreamMode</type> indicates how a BLOB stream can be used.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When a BLOB stream is first created, <type namespace="DRIntf">TBlobStreamMode</type> is used to specify how that stream can be used. The following table lists the possible values. </para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>bmRead</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The stream is used to read from a BLOB field.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>bmWrite</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The stream is used to write from a BLOB field.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>bmReadWrite</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The stream is used to modify a BLOB field's value.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TLocateOptions">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TLocateOptions</type> defines the values for the Options parameter of the Locate method of a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TLocateOptions</type> is the type of the Options parameter to a dataset's Locate method. The following table lists the possible values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>loCaseInsensitive</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Key fields and key values are matched without regard to case.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>loPartialKey</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Key values can include only part of the matching key field value; for example, 'HAM' would match both 'HAMM' and 'HAMMER.'</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TFilterOption">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFilterOption</type> and <type namespace="DRIntf">TFilterOption</type>s influence how filter strings are applied.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TFilterOption</type>s is a set that specifies how filter expressions are applied to string fields. It can contain zero or more of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>foCaseInsensitive</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Literal strings in the filter are compared to string-valued fields case-insensitively.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>foNoPartialCompare</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Asterisks (*) in the filter are treated as literal characters rather than as wildcards. When filter options does not include foNoPartialCompare, strings that end in an asterisk signify a partial string match with the asterisk matching any number of characters.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TBlobByteData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBlobByteData</type> stores the contents of a Binary Large Object (BLOB) field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TBlobByteData</type> is the type for buffers that store information from a BLOB field.</para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TGroupPosInd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TGroupPosInd</type> and <type namespace="DRIntf">TGroupPosInd</type>s indicate the position of the current record within its group.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">TGroupPosInd</type>s is a set that indicates where the current record sits within a group of records. It is a set because if the group contains only one record, the current record is both first and last.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The following table lists the possible <type namespace="DRIntf">TGroupPosInd</type> values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>gbFirst</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The record is the first record in the group.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>gbMiddle</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The record is neither the first nor the last in the group.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>gbLast</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The record is the last record in the group.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.TDataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDataSet</class> is the base class for all dataset components that represent data in rows and columns.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDataSet</class> introduces the basic properties, events, and methods for working with data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Many of these properties, events, and methods are abstract (Delphi) or pure virtual (C++) in <class namespace="DB">TDataSet</class>. Abstract or pure virtual declarations are declarations without implementations. At the <class namespace="DB">TDataSet</class> level they cannot be used or accessed. Developers must use or derive descendants of <class namespace="DB">TDataSet</class> that redeclare and implement these abstract or pure virtual methods. Many of the other <class namespace="DB">TDataSet</class> methods are declared and implemented in <class namespace="DB">TDataSet</class> as virtual methods, but the implementations are merely stubs that are reimplemented in descendants.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DB">TDataSet</class> has <condition os="Linux">two</condition>
               
               <condition os="Windows">several</condition> descendants: <condition os="Windows">TBDEDataSet, TCustomADONETConnector, TIBCustomDataSet, </condition>TCustomSQLDataSet<condition os="Windows">,</condition> and TCustomClientDataSet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">TBDEDataSet is the base class for datasets that access their data using the Borland Database Engine (BDE). TBDEDataSet descendants include TTable, TQuery, and TStoredProc. Developers who create custom dataset components that use the BDE derive them from TBDEDataSet, TDBDataSet, TQuery, TStoredProc, or TTable.</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">TCustomADONETConnector is the base class for datasets that access their data using ActiveX Data Objects (ADO). TCustomADONETConnector descendants include TADODataSet, TADOTable, TADOQuery, and TADOStoredProc. Developers who create custom dataset components that use ADO derive them from CustomADODataSet.</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">TIBCustomDataSet is the base class for datasets that directly access the data in InterBase tables. TIBCustomDataSet descendants include TIBDataSet, TIBTable, TIBQuery, and TIBStoredProc. Developers who create custom dataset components that directly access data in an InterBase database derive from TIBCustomDataSet.</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TCustomSQLDataSet is the base class for unidirectional datasets. Unidirectional datasets are read-only datasets that permit only forward navigation. TCustomSQLDataSet descendants include the dbExpress datasets TSQLDataSet, TSQLQuery, TSQLTable, and TSQLStoredProc. Developers who create custom dataset components that use dbExpress to access their data derive from TCustomSQLDataSet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TCustomClientDataSet is the base class for in-memory datasets. Client datasets can work with data from files on disk or with data provided by another component via a provider. They cache that data in memory, maintain a record of any changes in a change log, and apply cached updates at a later point back to the source of the data. Developers who create custom datasets that store their data in an in-memory cache derive from TCustomClientDataSet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Developer's can also derive custom dataset components directly from <class namespace="DB">TDataSet</class>, providing their own mechanisms for accessing and manipulating the data.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ActiveBuffer">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a pointer to the buffer for the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">ActiveBuffer</method> is used internally by many dataset methods to ensure that the active buffer points to the buffer for the active record. If an application uses existing dataset methods, the active buffer is always set correctly, so there is usually no need to call <method namespace="DB" class="TDataSet">ActiveBuffer</method> directly.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unidirectional datasets do not buffer records. On Unidirectional datasets, <method namespace="DB" class="TDataSet">ActiveBuffer</method> returns a meaningless value.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">ActiveBuffer</method> is used by bookmarking methods to index into the active record buffer to retrieve bookmark information.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications that provide custom dataset routines may need to call <method namespace="DB" class="TDataSet">ActiveBuffer</method> to access the buffer data.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.BookmarkValid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the validity of a specified bookmark.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This function returns false in all cases, indicating that any bookmark is invalid because the <method namespace="DB" class="TDataSet">TDataSet</method> class does not implement support for bookmarks. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendant classes that implement bookmark support override <method namespace="DB" class="TDataSet">BookmarkValid</method> to test bookmarks for validity and indicate when a bookmark is valid by returning true.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ControlsDisabled">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether data-aware controls update their display to reflect changes to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">ControlsDisabled</method> to ascertain whether the updating of data display in data-aware controls is currently disabled. If <method namespace="DB" class="TDataSet">ControlsDisabled</method> is true, controls are currently disabled. <method namespace="DB" class="TDataSet">ControlsDisabled</method> is true as long as the reference count that keeps track of disabling for the dataset is greater than zero. This count is incremented every time the DisableControls method is called and decremented when EnableControls is called. Applications call DisableControls to improve performance and prevent constant updates during automated iterations through records in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In complex applications, when controls may be disabled multiple times by different processes, you can use <method namespace="DB" class="TDataSet">ControlsDisabled</method> as a check in a procedure to reenable controls should each call to DisableControls not be paired with a subsequent call to EnableControls. For example,</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">procedure ReEnableControls (DataSet: TDataSet);
begin
while DataSet.ControlsDisabled do
  DataSet.EnableControls;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">void __fastcall TForm1::ReEnableControls(TDataSet *DataSet)
{
while (DataSet-&gt;ControlsDisabled())
    DataSet-&gt;EnableControls();
}</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CompareBookmarks">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual function to compare two bookmarks.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DB" class="TDataSet">TDataSet</method>, <method namespace="DB" class="TDataSet">CompareBookmarks</method> always returns 0, indicating no difference between the bookmarks. This is because <method namespace="DB" class="TDataSet">TDataSet</method> does not implement support for bookmarks.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendant classes that provide bookmark support override this method to return a value less than 0 if Bookmark1 is less than Bookmark2, 0 if the bookmarks are identical, and a value greater than 0 if Bookmark1 is greater than Bookmark2.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CreateBlobStream">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides the interface for a method that creates a blob stream for a Binary large object (BLOB) field in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">CreateBlobStream</method> to obtain a stream for reading and writing the value of the field specified by the Field parameter. The Mode parameter indicates whether the stream will be used for reading the field's value (bmRead), writing the field's value (bmWrite), or modifying the field's value (bmReadWrite).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Blob streams are created in a specific mode for a specific field on a specific record. Applications create a new blob stream every time the record in the dataset changes: do not reuse an existing blob stream. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DB" class="TDataSet">TDataSet</method>, <method namespace="DB" class="TDataSet">CreateBlobStream</method> always returns nil (Delphi) or NULL (C++). Descendants of <method namespace="DB" class="TDataSet">TDataSet</method> override this method to create the TStream descendant that reads and writes BLOB data in the format that dataset type uses to store BLOB fields.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>It is preferable to call <method namespace="DB" class="TDataSet">CreateBlobStream</method> rather than creating a blob stream directly in code. This ensures that the stream is appropriate to the dataset, and may also ensure that datasets that do not always store BLOB data in memory fetch the blob data before creating the stream.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FieldByName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Finds a field based on its name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">FieldByName</method> to retrieve field information for a field given its name. FieldName is the name of an existing field. <method namespace="DB" class="TDataSet">FieldByName</method> returns the TField component that represents the specified field. If the specified field does not exist, <method namespace="DB" class="TDataSet">FieldByName</method> raises an EDatabaseError exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FieldName can be the name of a simple field, the name of a subfield of an object field that has been qualified by the parent field's name, or the name of an aggregated field. Because of this flexibility, it is often preferable to use <method namespace="DB" class="TDataSet">FieldByName</method> rather than the Fields property or the AggFields property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application can directly access specific properties and methods of the field returned by <method namespace="DB" class="TDataSet">FieldByName</method>. For example, the following statement determines if a specified field is a calculated field:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">if Customers.FieldByName('FullName').Calculated then
  MessageDlg(Format('%s is a calculated field. ', ['FullName']), mtInformation, [mbOK], 0);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">if (Customers-&gt;FieldByName("FullName")-&gt;Calculated)
  Application.ShowMessage("This is a calculated field", "FullName", MB_OK);</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">FieldByName</method> is especially useful at design time for developers who are creating database applications, but do not have access to the underlying table and therefore cannot use persistent field components.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To retrieve or set the value for a specific field, call the default dataset method FieldValues instead of <method namespace="DB" class="TDataSet">FieldByName</method>.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FindField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Searches for a specified field in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">FindField</method> to determine if a specified field component exists in a dataset. FieldName is the name of the field for which to search. This name can be the the name of a simple field, the name of a subfield of an object field that has been qualified by the parent field's name, or the name of an aggregated field. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <method namespace="DB" class="TDataSet">FindField</method> finds a field with a matching name, it returns the TField component for the specified field. Otherwise it returns nil (Delphi) or NULL (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">FindField</method> is the same as the FieldByName method, except that it returns nil (Delphi) or NULL (C++) rather than raising an exception when the field is not found.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FindFirst">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual method for positioning the dataset on the first record, respecting any filters.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This function returns false, indicating that the active record was not successfully changed. Descendant classes override <method namespace="DB" class="TDataSet">FindFirst</method> to make the first record active, honoring any filters that are in effect. In descendant classes, <method namespace="DB" class="TDataSet">FindFirst</method> returns true if the active record is successfully changed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FindLast">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual method for positioning the dataset on the last record, respecting any filters.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This function returns false, indicating that the active record was not successfully changed. Descendant classes override <method namespace="DB" class="TDataSet">FindLast</method> to make the last record active, honoring any filters that are in effect. In descendants, <method namespace="DB" class="TDataSet">FindLast</method> returns true if the active record is successfully changed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FindNext">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual method for positioning the dataset on the next record, respecting any filters.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This function returns false, indicating that the active record was not successfully changed. Descendant classes override <method namespace="DB" class="TDataSet">FindNext</method> to move to the next record of the dataset, honoring any filters that are in effect. In descendants, <method namespace="DB" class="TDataSet">FindNext</method> returns true if the active record is successfully changed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FindPrior">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual method for positioning the dataset on the previous record, respecting any filters.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This function returns false, indicating that the active record was not successfully changed. Descendant classes override <method namespace="DB" class="TDataSet">FindPrior</method> to move to the previous record of the dataset, honoring any filters that are in effect. In descendants, <method namespace="DB" class="TDataSet">FindPrior</method> returns true if the active record is successfully changed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetBookmark">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Allocates a bookmark for the active record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">GetBookmark</method> to establish a bookmark for the active record in the dataset. Establishing a bookmark for a record enables a dataset to return to that record at any time while the bookmark exists.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">GetBookmark</method> requires that a variable for the bookmark (for Delphi, of type TBookmark) already be declared in the application. Use <method namespace="DB" class="TDataSet">GetBookmark</method> to assign a value to the variable. This value can then be referenced by subsequent calls to GotoBookmark and FreeBookmark.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications that create bookmarks with <method namespace="DB" class="TDataSet">GetBookmark</method> must subsequently release the system resource allocated to them by calling FreeBookmark when the bookmarks are no longer needed.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TDataSet">GetBookmark</method> relies on a protected method to obtain the bookmark value. <method namespace="DB" class="TDataSet">TDataSet</method> descendants implement this method to provide their own type of bookmark support. Unidirectional datasets do not support bookmarks, and so do not return a meaningful value.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetCurrentRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual function to retrieve the current record in a buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This function always returns false, indicating failure. For <method namespace="DB" class="TDataSet">TDataSet</method> descendants that override this method to retrieve the value of the current record, <method namespace="DB" class="TDataSet">GetCurrentRecord</method> returns true if Buffer is successfully filled with the value of the current record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetBlobFieldData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reads BLOB data into a buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">GetBlobFieldData</method> reads blob data from the field specified by FieldNo into a Buffer. The buffer is a dynamic array of bytes, so that it can grow to accommodate the size of the BLOB data. <method namespace="DB" class="TDataSet">GetBlobFieldData</method> returns the size of the buffer.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">GetBlobFieldData</method> is intended primarily for internal use. Applications should use the BLOB stream returned by the CreateBlobStream method to access BLOB data.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetFieldData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves the current value of a field into a buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not need to call <method namespace="DB" class="TDataSet">GetFieldData</method>. TField objects call this method to implement their GetData method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Field or FieldNo parameter indicates the field whose data should be fetched. Field specifies the component itself, while FieldNo indicates its field number. The Buffer parameter is a memory buffer with sufficient space to accept the value of the field as it exists in the database (unformatted and untranslated). NativeFormat indicates whether the dataset fetches the field in the IDE's native format for the field type. When NativeFormat is false, the dataset must convert the field value to the native type. This allows the field to handle data from different types of datasets <condition os="Windows">(ADO-based, BDE-based, and so on) </condition>in a uniform manner.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">GetFieldData</method> returns a value that indicates whether the data was successfully fetched.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DB" class="TDataSet">TDataSet</method>, <method namespace="DB" class="TDataSet">GetFieldData</method> always returns false, indicating that no data was fetched from the specified field. Descendants override this method to fetch data in whatever way is appropriate to the implementation of the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IsEmpty">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset contains no records.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">IsEmpty</method> to determine if a dataset has records. <method namespace="DB" class="TDataSet">IsEmpty</method> returns true if the dataset does not contain any records. Otherwise it returns false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IsLinkedTo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a dataset is linked to a specified data source.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">IsLinkedTo</method> to verify that a dataset provides data through a specific data source. DataSource is the data source component to test.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TDataSet">IsLinkedTo</method> is mainly provided for developers deriving custom components based on <method namespace="DB" class="TDataSet">TDataSet</method>. It is not intended or needed for general data access.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the datasource provides data from the dataset or one of its nested dataset fields (or a nested dataset nested in a dataset field...),  <method namespace="DB" class="TDataSet">IsLinkedTo</method> returns true. If the datasource provides data from some other dataset, or if the data source does not already have a dataset of its own, <method namespace="DB" class="TDataSet">IsLinkedTo</method> returns false.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.IsSequenced">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the underlying database table uses record numbers to indicate the order of records.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DB" class="TDataSet">IsSequenced</method> to determine whether the underlying database table supports sequence numbers, or whether these are computed by the dataset component. When <method namespace="DB" class="TDataSet">IsSequenced</method> returns true, applications can safely use the RecNo property to navigate to records in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DB" class="TDataSet">TDataSet</method>, <method namespace="DB" class="TDataSet">IsSequenced</method> always returns true. Descendants of <method namespace="DB" class="TDataSet">TDataSet</method> reimplement this method to return a value that depends on the underlying table type.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Locate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual method for searching a dataset for a specified record and making it the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This function: </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks whether the dataset is unidirectional, and if so, raises an EDatabaseError exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns false, indicating that a matching record was not found and the active record was not changed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendant classes that are not unidirectional override this method so that it locates the record where the fields identified by the semicolon-separated list of fields in KeyFields have the values specified by the Variant or Variant array KeyValues. Options indicates whether the search is case insensitive and whether partial matches are supported. <method namespace="DB" class="TDataSet">Locate</method> returns true if a record is found that matches the specified criteria and that record is now active.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Lookup">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual method to retrieve field values from a record that matches specified search values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This function:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks whether the dataset is unidirectional, and if so, raises an EDatabaseError exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a Variant with the value false, indicating that a matching record was not found.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendant classes that are not unidirectional override this method so that it locates the record where the fields identified by the comma-delimited string KeyFields have the values specified by the Variant or Variant array KeyValues. In classes that implement <method namespace="DB" class="TDataSet">Lookup</method>, it returns a Variant or Variant array that contains the value or values of the fields specified by the comma-delimited string ResultFields on the specified record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.MoveBy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves to another record relative to the active record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">MoveBy</method> to move the active record by the number of records specified by Distance. A positive value for Distance indicates forward progress through the dataset, while a negative value indicates backward progress. For example, the following statement moves backward through the dataset by 10 records:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">MoveBy(-10);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">DataSet1-&gt;MoveBy(-10);</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">MoveBy</method> posts any changes to the active record and</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the Bof and Eof properties to false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Distance is positive, repeatedly fetches Distance subsequent records (if possible), and makes the last record fetched active. If an attempt is made to move past the end of the file, <method namespace="DB" class="TDataSet">MoveBy</method> sets Eof to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If Distance is negative, repeatedly fetches the appropriate number of previous records (if possible), and makes the last record fetched active. If an attempt is made to move past the start of the file, <method namespace="DB" class="TDataSet">MoveBy</method> sets Bof to true. If the dataset is unidirectional, the dataset raises an EDatabaseError exception when <method namespace="DB" class="TDataSet">MoveBy</method> tries to fetch a prior record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Broadcasts information about the record change so that data-aware controls and linked datasets can update.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the number of records moved. In most cases, Result is the absolute value of Distance, but if <method namespace="DB" class="TDataSet">MoveBy</method> encounters the beginning-of-file or end-of-file before moving Distance records, Result will be less than the absolute value of Distance.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Translate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual procedure to copy a data string from a source to a destination, optionally performing character translation during the copy.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented by <method namespace="DB" class="TDataSet">TDataSet</method>, <method namespace="DB" class="TDataSet">Translate</method> copies a source string to a destination string, and ignores the value passed in ToOem. <method namespace="DB" class="TDataSet">Translate</method> provides a fallback method for derived dataset objects that do not reimplement <method namespace="DB" class="TDataSet">Translate</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">In BDE-enabled datasets, <method namespace="DB" class="TDataSet">Translate</method> converts the source string from ANSI (the native character mapping for the VCL) to OEM (the native character mapping for the BDE) when ToOem is true, and reverses that translation when ToOem is false.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Custom datasets can use <method namespace="DB" class="TDataSet">Translate</method> to convert strings between<condition os="Linux"/>
                     
               <condition os="Windows">ANSI</condition>
                     
               <condition os="Linux">UTF-8 (the native character mapping for dataset components)</condition> and any character mapping used by the underlying data access mechanism.<condition os="Linux"> When ToOem is true, <method namespace="DB" class="TDataSet">Translate</method> converts from ANSI to the underlying data access mapping. When ToOem is false, <method namespace="DB" class="TDataSet">Translate</method> reverses that conversion.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.UpdateStatus">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reports the update status for the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DB" class="TDataSet">TDataSet</method>, <method namespace="DB" class="TDataSet">UpdateStatus</method> always returns usUnmodified. Descendant classes override this method to reflect whether the active record has been modified, and if so, how.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Create</method>s an instance of a <method namespace="DB" class="TDataSet">TDataSet</method> component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Create</method> to instantiate a dataset component at runtime. <method namespace="DB" class="TDataSet">TDataSet</method> contains abstract methods, and is not intended to be used in applications. Instead, applications instantiate dataset descendants such as TClientDataSet<condition os="Windows">, TADODataSet, TTable, TQuery, TStoredProc,</condition> or TSQLDataSet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component, typically a form or data module, that is responsible for freeing the dataset. It becomes the value of the Owner property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Create</method> creates the auxiliary objects such as empty field and field definition lists and initializes default property values (such as setting AutoCalcFields to true).</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Append">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a new, empty record to the end of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For datasets that permit editing, call <method namespace="DB" class="TDataSet">Append</method> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1Open a new, empty record at the end of the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2Set the active record to the new record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After a call to <method namespace="DB" class="TDataSet">Append</method>, an application can enable users to enter data in the fields of the record, and can then post those changes to the <condition os="Windows">database or </condition>change log using Post (Client datasets can subsequently apply updates in the change log back to the database by calling ApplyUpdates.) <condition os="Windows">A newly appended record is posted to the database in one of three ways:</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For indexed Paradox and dBASE tables, the record is inserted into the dataset in a position based on its index.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For unindexed Paradox and dBASE tables, the record is added to the end of the dataset.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For SQL databases, the physical location of the appended record is implementation-specific. For indexed tables, the index is updated with the new record</condition>
                     
               <condition os="Windows">information.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Linux">After the new record is applied back to the database server, its physical location is database-specific. For indexed tables, the index is updated with the new record information.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AppendRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a new, populated record to the end of the dataset and posts it.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">AppendRecord</method> to create a new, empty record at the end of the dataset, populate it with the field values in Values, and post the values to the <condition os="Windows">database or </condition>change log.<condition language="CBuilder"/>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In C++, the Values parameter is an array of field values. The Values_Size parameter is the index of the last value (one less than the total number of values).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">A newly appended record is posted to the database in one of three ways:</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For indexed Paradox and dBASE tables, the record is inserted into the dataset in a position based on its index.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For unindexed Paradox and dBASE tables, the record is added to the end of the dataset.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For SQL databases, the physical location of the append is implementation-specific. For indexed tables, the index is updated with the new record  information.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The newly appended record becomes the active record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Cancel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Cancel</method>s modifications to the active record if those changes are not yet posted.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Cancel</method> to undo modifications made to one or more fields belonging to the active record. As long as those changes are not already posted, <method namespace="DB" class="TDataSet">Cancel</method> returns the record to its previous state, and sets the dataset state to dsBrowse.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Typically <method namespace="DB" class="TDataSet">Cancel</method> is used to back out of changes in response to user request, or in field validation routines that back out illegal field values. The TDBNavigator object contains a <method namespace="DB" class="TDataSet">Cancel</method> button that calls <method namespace="DB" class="TDataSet">Cancel</method>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the dataset is not in an editing state (dsEdit or dsInsert), <method namespace="DB" class="TDataSet">Cancel</method> does nothing. </para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CheckBrowseMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Automatically posts or cancels data changes when the active record changes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">CheckBrowseMode</method> is used internally by many dataset methods to ensure that modifications to the active record are posted when a dataset's state is dsEdit, dsInsert, or dsSetKey and a method switches to a different record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If State is dsEdit or dsInsert, <method namespace="DB" class="TDataSet">CheckBrowseMode</method> calls UpdateRecord, and, if the Modified property for the dataset is true, calls Post. If Modified is false, <method namespace="DB" class="TDataSet">CheckBrowseMode</method> calls Cancel.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If State is dsSetKey, <method namespace="DB" class="TDataSet">CheckBrowseMode</method> calls Post.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If State is dsInactive, <method namespace="DB" class="TDataSet">CheckBrowseMode</method> raises an exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an application uses existing dataset methods, <method namespace="DB" class="TDataSet">CheckBrowseMode</method> is always called when necessary, so there is usually no need to call <method namespace="DB" class="TDataSet">CheckBrowseMode</method> directly.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications that provide custom dataset routines may need to call <method namespace="DB" class="TDataSet">CheckBrowseMode</method> inside those routines to guarantee that changes are posted when switching to a different record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.ClearFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Clears the contents of all fields for the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">ClearFields</method> to erase the current contents of all fields in the active record. If the dataset is not in either dsInsert or dsEdit state, <method namespace="DB" class="TDataSet">ClearFields</method> raises an exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a SetKey operation is not under way, <method namespace="DB" class="TDataSet">ClearFields</method> recalculates all calculated fields, and generates an OnDataChange event on the data source component associated with the dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Close">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Close</method>s a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Close</method> to set the Active property of a dataset to false. When Active is false, the dataset is closed; it cannot read or write data and data-aware controls can't use it to fetch data or post edits.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application must close the dataset before changing properties that affect the status of the database or the controls that display data in an application. For example, to change the DataSource property for a dataset, the dataset must be closed. Closing the dataset puts it into the dsInactive state.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.CursorPosChanged">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Marks the internal cursor position as invalid.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">CursorPosChanged</method> is an internal method that invalidates the variable that tracks the physical cursor position relative to the logical cursor position. CurPosChanged is called by the Locate and Lookup methods prior to searching for a requested record. These methods, if successful, reposition the current record at the first matching record found.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Delete">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Delete</method>s the active record and positions the dataset on the next record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Delete</method> to remove the active record from the database. If the dataset is inactive, <method namespace="DB" class="TDataSet">Delete</method> raises an exception. Otherwise, <method namespace="DB" class="TDataSet">Delete</method>:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Verifies that the dataset is not empty (and raises an exception if it is).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls CheckBrowseMode to post any pending changes to a prior record if necessary.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls the Before<method namespace="DB" class="TDataSet">Delete</method> event handler.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Delete</method>s the record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Frees any buffers allocated for the record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Puts the dataset into dsBrowse mode.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Resynchronizes the dataset to make the next undeleted record active.  If the record deleted was the last record in the dataset, then the previous record becomes the current record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls the After<method namespace="DB" class="TDataSet">Delete</method> event handler.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.DisableControls">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Disables data display in data-aware controls associated with the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">DisableControls</method> prior to iterating through a large number of records in the dataset to prevent data-aware controls from updating every time the active record changes. Disabling controls prevents flicker and speeds performance because data does not need to be written to the display.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If controls are not already disabled, <method namespace="DB" class="TDataSet">DisableControls</method> records the current state of the dataset, broadcasts the state change to all associated data-aware controls and detail datasets, and increments the dataset's disabled count variable. Otherwise, <method namespace="DB" class="TDataSet">DisableControls</method> just increments the disabled count variable.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The disabled count is used internally to determine whether to display data in data-aware controls. When the disable count variable is greater than zero, data is not updated.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the dataset is the master of a master/detail relationship, calling <method namespace="DB" class="TDataSet">DisableControls</method> also disables the master/detail relationship. Setting BlockReadSize instead of calling <method namespace="DB" class="TDataSet">DisableControls</method> updates the detail datasets as you scroll through the dataset, but does not update data-aware controls.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Calls to <method namespace="DB" class="TDataSet">DisableControls</method> can be nested. Only when all calls to <method namespace="DB" class="TDataSet">DisableControls</method> is matched to a corresponding call to EnableControls does the dataset update data controls and detail datasets.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Edit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables editing of data in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Edit</method> to permit editing of the active record in a dataset. <method namespace="DB" class="TDataSet">Edit</method> determines the current state of the dataset. If the dataset is empty, <method namespace="DB" class="TDataSet">Edit</method> calls Insert. Otherwise <method namespace="DB" class="TDataSet">Edit</method>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls CheckBrowseMode to post any pending changes to a prior record if necessary.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks the CanModify property and raises an exception if the dataset can't be edited.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls the Before<method namespace="DB" class="TDataSet">Edit</method> event handler.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves the record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Puts the dataset into ds<method namespace="DB" class="TDataSet">Edit</method> state, enabling the application or user to modify fields in the record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Broadcasts the state change to associated controls.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls the After<method namespace="DB" class="TDataSet">Edit</method> event handler.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.EnableControls">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Re-enables data display in data-aware controls associated with the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">EnableControls</method> to permit data display in data-aware controls after a prior call to DisableControls. <method namespace="DB" class="TDataSet">EnableControls</method> decrements the disabled count variable for the dataset if it is not already zero. If the disable count variable is zero, <method namespace="DB" class="TDataSet">EnableControls</method> updates the current state of the dataset, if necessary, and then tells associated controls to re-enable display.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.First">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves to the first record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">First</method> to make the first record in the dataset active. <method namespace="DB" class="TDataSet">First</method> posts any changes to the active record and:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Clears the record buffers.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fetches the first record and makes it the active record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fetches any additional records required for display, such as those needed to fill out a grid control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the Bof property to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Broadcasts the record change so that data controls and linked detail sets can update.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TDataSet">TDataSet</method> uses internal, protected methods to reposition the active record and to fetch additional records required for display. In <method namespace="DB" class="TDataSet">TDataSet</method>, these internal methods are empty stubs. Descendant classes implement these methods to enable the <method namespace="DB" class="TDataSet">First</method> method to work.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.FreeBookmark">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Frees the resources allocated for a specified bookmark.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">FreeBookmark</method> to free an existing bookmark before reassigning it. <method namespace="DB" class="TDataSet">FreeBookmark</method> releases the memory allocated for a specified bookmark when the bookmark is no longer needed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetDetailDataSets">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fills a list with a dataset for every detail dataset that is not the value of a nested dataset field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Datasets can represent master/detail relationships in two ways: as linked cursors or as nested dataset fields. <method namespace="DB" class="TDataSet">GetDetailDataSets</method> lists all detail datasets of the active record into List if they are not the value of a nested dataset field. To obtain a list of the detail datasets that are the values of nested dataset fields, use the NestedDataSets property instead.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetDetailLinkFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Introduces a method to list the field components that link this dataset as a detail of a master dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <method namespace="DB" class="TDataSet">TDataSet</method>, <method namespace="DB" class="TDataSet">GetDetailLinkFields</method> does nothing. Descendants override this method to fill the two lists with field components that define a master-detail relationship between this dataset and another (master) dataset. The MasterFields list is filled with fields from the master table whose values must equal the values of the fields in the DetailFields list. The DetailFields list is filled with fields from the calling dataset.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetFieldList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves a specified set of field objects into a list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">GetFieldList</method> to copy a specified set of field objects into a list object created and maintained by the application.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">List is the TList object into which to copy the field objects. FieldNames is a string containing the name of the fields to copy. Each field name in the string must be separated from other field names with a semicolon. <method namespace="DB" class="TDataSet">GetFieldList</method> builds a list that contains only the field objects for which it finds a matching name in the dataset's list of field objects.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications do not normally call <method namespace="DB" class="TDataSet">GetFieldList</method> to copy field objects. Field objects are directly accessible through the dataset itself. In some cases, however, it can be useful to work with a copy of a field object or its data instead of working on the actual object in the dataset.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GetFieldNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves a list of names for all fields in a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">GetFieldNames</method> to get a list of names for all fields in a dataset. List is a TStrings object created and maintained by the application. For example, to load a list box with the field names of a table,</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">SQLDataSet1.GetFieldNames(ListBox1.Items);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">SQLDataSet1-&gt;GetFieldNames(ListBox1-&gt;Items);</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieving a list of field names is especially useful for applications that work with datasets whose field objects are created dynamically at runtime. By retrieving a list of field names, the application can be restricted to working only with fields that exist at runtime.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TDataSet">GetFieldNames</method> does not add the names of any aggregated fields to the list.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.GotoBookmark">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual method to position the dataset on the record to which a specified bookmark points.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">GotoBookmark</method> calls an internal method that is an empty stub in <method namespace="DB" class="TDataSet">TDataSet</method>. Descendants of <method namespace="DB" class="TDataSet">TDataSet</method> redeclare and implement the internal method so that <method namespace="DB" class="TDataSet">GotoBookmark</method> makes the record identified by the Bookmark parameter active.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unidirectional datasets do not support bookmarks. Calling <method namespace="DB" class="TDataSet">GotoBookmark</method> on a unidirectional dataset does not change the active record.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Insert">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Insert</method>s a new, empty record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Insert</method> to:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1Open a new, empty record in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2Set the active record to the new record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After a call to <method namespace="DB" class="TDataSet">Insert</method>, an application can allow users to enter data in the fields of the record, and then post those changes to the <condition os="Windows">database or </condition>change log using Post. (Client datasets can subsequently apply updates in the change log back to the database by calling ApplyUpdates.) <condition os="Windows">A newly inserted record is posted in one of three ways:</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For Paradox tables with primary indexes, the record is inserted into the dataset in a position based on its index.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For Paradox tables without primary indexes, the record is inserted into the dataset at the current position.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For dBASE, FoxPro, and Access tables, the record is physically appended to the dataset at the end. If an index happens to be active, the new record may appear in a position relative to the index, but the record is still actually stored at the end of the table.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For SQL databases, the physical location of the insert is implementation-specific. For indexed tables, the index is updated with the new record information.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Linux">After the new record is applied back to the database server, its physical location is database-specific. For indexed tables, the index is updated with the new record information.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.InsertRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inserts a new, populated record to the dataset and posts it.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">InsertRecord</method> to create a new, empty record in the dataset, populate it with the field values in Values, and post the values to the database or change log. In C++, the Values_Size parameter indicates the index of the last value in the Values array (one less than the number of values).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">A newly inserted record is posted to the database in one of three ways:</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For indexed Paradox and dBASE tables, the record is inserted into the dataset in a position based on its index.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For unindexed Paradox tables, the record is inserted into the dataset at the current position.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For unindexed dBASE, FoxPro, and Access tables, the record is inserted into the dataset at the end.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">For SQL databases, the physical location of the insert is implementation-specific. For indexed tables, the index is updated with the new record information.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The newly inserted record becomes the active record.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Last">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves to the last record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Last</method> to make the last record in the dataset active. If the dataset is not unidirectional <method namespace="DB" class="TDataSet">Last</method> posts any changes to the active record and</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Clears the record buffers.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fetches the last record and makes it the active record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fetches any additional records required for display, such as those needed to fill out a grid control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the Eof property to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Broadcasts the record change so that data controls and linked detail sets can update.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For unidirectional datasets, <method namespace="DB" class="TDataSet">Last</method> raises an EDatabaseError exception.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TDataSet">TDataSet</method> uses internal, protected methods to reposition the active record and to fetch additional records required for display. In <method namespace="DB" class="TDataSet">TDataSet</method>, these internal methods are empty stubs. Descendant classes implement these methods to enable the <method namespace="DB" class="TDataSet">Last</method> method to work.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Next">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves to the next record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Next</method> to move to the next record in the dataset, making it the active record. <method namespace="DB" class="TDataSet">Next</method> posts any changes to the active record and</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the Bof and Eof properties to false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fetches the next record and makes it the active record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the dataset is not unidirectional, fetches any additional records required for display, such as those needed to fill out a grid control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the Eof property to true if the last record in the dataset was already active.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Broadcasts the record change so that data controls and linked detail sets can update.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TDataSet">TDataSet</method> uses internal, protected methods to move the active record and to fetch additional records required for display. In <method namespace="DB" class="TDataSet">TDataSet</method>, these internal methods are empty stubs. Descendant classes implement these methods to enable the <method namespace="DB" class="TDataSet">Next</method> method to work.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Open">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Open</method>s the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Open</method> to set the Active property for the dataset to true. When Active is true, data can be populated with data. It can read data from a database or other source (such as a provider). Depending on the CanModify property, active datasets can post changes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting Active to true:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Triggers the Before<method namespace="DB" class="TDataSet">Open</method> event handler if one is defined for the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the dataset state to dsBrowse.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Establishes a way to fetch data (typically by opening a cursor).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Triggers the After <method namespace="DB" class="TDataSet">Open</method> event handler if one is defined for the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an error occurs during the dataset open, dataset state is set to dsInactive, and any cursor is closed.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Post">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Implements a virtual method to write a modified record to the database or change log.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">TDataSet</method> implements a virtual method to write a modified record to the database or change log. Dataset methods that change the dataset state, such as Edit, Insert, or Append, or that move from one record to another, such as First, Last, Next, and Prior automatically call <method namespace="DB" class="TDataSet">Post</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Different types of datasets handle posting differently:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">BDE-enabled datasets post records directly to the database server unless CachedUpdates is true. When caching updates, BDE-enabled datasets post records to an internal change log until they are applied to the database by calling ApplyUpdates.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">ADO and InterBaseExpress datasets post records directly to the database server.</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Client datasets post records to an internal change log until they are applied to the database by calling ApplyUpdates or merged with the client dataset's data by calling MergeChangeLog.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unidirectional datasets are read-only and do not post records at all.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Designers of custom datasets can choose whether to implement <method namespace="DB" class="TDataSet">Post</method> by writing records to the database server or to an internal change log.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Prior">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves to the previous record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Prior</method> to move to the previous record in the dataset, making it the active record. <method namespace="DB" class="TDataSet">Prior</method> posts any changes to the active record and</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the Bof and Eof properties to false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fetches the previous record and makes it the active record. If the dataset is unidirectional, it raises an EDatabaseError exception at this point.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fetches any additional records required for display, such as those needed to fill out a grid control.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the Bof property to true if the first record in the dataset was already active.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Broadcasts the record change so that data controls and linked detail sets can update.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DB" class="TDataSet">TDataSet</method> uses internal, protected methods to move the active record and to fetch additional records required for display. In <method namespace="DB" class="TDataSet">TDataSet</method>, these internal methods are empty stubs. Descendant classes implement these methods to enable the <method namespace="DB" class="TDataSet">Prior</method> method to work.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Refresh">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Re-fetches data from the database to update a dataset's view of data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">Refresh</method> to ensure that an application has the latest data from a database. For example, when an application turns off filtering for a dataset, it should immediately call <method namespace="DB" class="TDataSet">Refresh</method> to display all records in the dataset, not just those that used to meet the filter condition.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <condition os="Windows">The <method namespace="DB" class="TDataSet">Refresh</method> method does not work for all <method namespace="DB" class="TDataSet">TDataSet</method> descendants. In particular, TQuery components do not support the <method namespace="DB" class="TDataSet">Refresh</method> method if the query is not "live". To refresh a static TQuery, close and reopen the dataset.</condition>
                     
               </para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">TDataSet</method> generates a Before<method namespace="DB" class="TDataSet">Refresh</method> event before refreshing the records and an After<method namespace="DB" class="TDataSet">Refresh</method> event afterwards.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Most datasets try to maintain the current record position when you call refresh. However, this is not always possible. For example, the current record may have been deleted from the server by another user. Unidirectional datasets have no mechanism for locating the current record after a refresh, and always move back to the first record.</para>
                  
            </note>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unidirectional datasets refresh the data by closing and reopening the cursor. This can have unintended side effects if, for example, you have code in the BeforeClose, AfterClose, BeforeOpen, or AfterOpen event handlers.</para>
                  
            </warning>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Resync">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Re-fetches the active record and the records that precede and follow it.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Resync</method> is used internally by other dataset methods to resynchronize the dataset with underlying physical data when making calls that may change the internal cursor position. Applications should use the Refresh method instead of calling <method namespace="DB" class="TDataSet">Resync</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Mode indicates optional processing that <method namespace="DB" class="TDataSet">Resync</method> should handle. If Mode contains rmExact, <method namespace="DB" class="TDataSet">Resync</method> raises an exception if <method namespace="DB" class="TDataSet">Resync</method> is called when the cursor is not positioned on a valid record. If Mode contains rmCenter, <method namespace="DB" class="TDataSet">Resync</method> positions the active record in the center of all buffered records.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Regardless of Mode, <method namespace="DB" class="TDataSet">Resync</method> also activates the buffers for the active record, retrieves prior and subsequent records for display purposes, and triggers a dataset change event.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.SetFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the values for all fields in a record</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DB" class="TDataSet">SetFields</method> to set values for some or all fields in the active record at the same time.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Values contains the values to insert into each field. Values are assigned to the record based on the order of columns in the table or tables underlying the dataset. These values can be literals, variables, NULL, or nil (Delphi). If Values contains fewer values than there are fields in the record, all records for which values are not provided are assigned a NULL value. A NULL value overwrites any existing value in such fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In C++, Values_Size is the index of the last value in the Values array (one less than the total number of values).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Before calling <method namespace="DB" class="TDataSet">SetFields</method>, call Edit to put the dataset into dsEdit state. After calling <method namespace="DB" class="TDataSet">SetFields</method>, call Post to write the changes to the <condition os="Windows">database or </condition>change log.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To set values for some fields while retaining existing values for others, pass nil (Delphi) or NULL (C++) (explicitly casting it to void * in C++) for each field that should not change.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.UpdateCursorPos">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Positions the cursor on the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">UpdateCursorPos</method> is an internal routine used by many dataset methods to ensure that the physical cursor is positioned on the active record. Normally an application should not need to call <method namespace="DB" class="TDataSet">UpdateCursorPos</method>. Typically <method namespace="DB" class="TDataSet">UpdateCursorPos</method> is called to ensure that the physical cursor position matches the logical cursor position.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.UpdateRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ensures that data-aware controls and detail datasets reflect record updates.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">UpdateRecord</method> is used internally by some dataset methods to inform data-aware controls of updates<condition os="Windows"> and trigger an On<method namespace="DB" class="TDataSet">UpdateRecord</method> event if cached updates are enabled</condition>. Applications should not need to call <method namespace="DB" class="TDataSet">UpdateRecord</method> directly unless they provide custom dataset methods that bypass <method namespace="DB" class="TDataSet">TDataSet</method> methods.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DB" class="TDataSet">Destroy</method>s the <method namespace="DB" class="TDataSet">TDataSet</method> instance.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DB" class="TDataSet">Destroy</method> directly in an application. Usually destruction of datasets is handled automatically by Delphi. If an application creates its own instances of a dataset, however, and does not assign an Owner that is responsible for freeing the dataset, then the application should call Free, which checks that the dataset reference is not nil before calling <method namespace="DB" class="TDataSet">Destroy</method>.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ActiveRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the index of the active record in the internal cache of records.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most <property namespace="DB" class="TDataSet">TDataSet</property> descendants maintain an internal cache of records from the underlying database table. This cache is used, for example, when the dataset is used to populate a data-aware grid, in which case it includes a record for each row in the grid. <property namespace="DB" class="TDataSet">ActiveRecord</property> indicates the offset in this cache of the record buffer for the active record. This active record is the value returned by the public ActiveBuffer method.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unidirectional datasets never cache records. For unidirectional datasets, the <property namespace="DB" class="TDataSet">ActiveRecord</property> property is meaningless (and always 0).</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CurrentRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the index of the current record in the internal cache of record buffers.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most <property namespace="DB" class="TDataSet">TDataSet</property> descendants maintain an internal cache of records from the underlying database table. For example, if the dataset is used to populate a data-aware grid, the cache includes a record for each row in the grid. <property namespace="DB" class="TDataSet">CurrentRecord</property> indicates the offset in this cache of the record buffer for the current record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The current record is the record currently in use by the dataset. This can differ from the active record (which the end user sees as active) when the dataset performs operations involving other records. For example, when painting a data-aware grid, <property namespace="DB" class="TDataSet">CurrentRecord</property> cycles through all the visible records, while ActiveRecord remains constant. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>For unidirectional datasets, <property namespace="DB" class="TDataSet">CurrentRecord</property> is meaningless.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.BlobFieldCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of columns in the dataset that represent Binary large object (BLOB) fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <property namespace="DB" class="TDataSet">TDataSet</property> use <property namespace="DB" class="TDataSet">BlobFieldCount</property> when determining how to handle BLOB information.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.BookmarkSize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of bytes used to represent a bookmark.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Bookmarks mark a location in a dataset so that an application can easily return to that location quickly. Descendants of <property namespace="DB" class="TDataSet">TDataSet</property> can use different mechanisms for storing enough information to identify records when applications set bookmarks. <property namespace="DB" class="TDataSet">BookmarkSize</property> indicates the number of bytes required to specify bookmark information for a particular dataset.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unidirectional datasets do not support bookmarks.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Buffers">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides indexed access to the record buffers in the internal cache.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">All <property namespace="DB" class="TDataSet">TDataSet</property> descendants except for unidirectional datasets maintain an internal cache of records from the underlying database table. For example, if the dataset is used to populate a data-aware grid, the cache includes a record for each row in the grid. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For datasets that cache records, each entry in <property namespace="DB" class="TDataSet">Buffers</property> points to a record buffer in the internal cache. The BufferCount property specifies the total number of record buffers in the cache.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.BufferCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of records in the internal cache.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">All <property namespace="DB" class="TDataSet">TDataSet</property> descendants except for unidirectional datasets maintain an internal cache of records from the underlying database tables. For example, if the dataset is used to populate a data-aware grid, the cache includes a record for each row in the grid. <property namespace="DB" class="TDataSet">BufferCount</property> indicates the size of this cache. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">BufferCount</property> is read-only. An associated TDataLink object determines its value.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CalcBuffer">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Points to the record buffer used during an OnCalcFields event.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Datasets use <property namespace="DB" class="TDataSet">CalcBuffer</property> to retrieve and store values when in the dsCalcFields state. The values of lookup fields and calculated fields are set in <property namespace="DB" class="TDataSet">CalcBuffer</property>, based on data field values retrieved from this buffer.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not need to explicitly reference <property namespace="DB" class="TDataSet">CalcBuffer</property>. It is used automatically when the dataset is in the dsCalcFields state.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CalcFieldsSize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of bytes in a record buffer dedicated to storing calculated fields and lookup fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">TDataSet</property> uses <property namespace="DB" class="TDataSet">CalcFieldsSize</property> to determine whether there are any calculated fields or lookup fields to calculate. Descendants of <property namespace="DB" class="TDataSet">TDataSet</property> use this property when locating fields in a record buffer.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Constraints">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies record-level constraints that must be met when editing the data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDataSet">Constraints</property> to read or add record-level constraints to the dataset. Record-level constraints usually impose relationships between the fields in a single record. <property namespace="DB" class="TDataSet">Constraints</property> that limit the value of a single field should be added to the individual field components.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldNoOfs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the offset needed to convert indexes in the Fields property to field numbers.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add <property namespace="DB" class="TDataSet">FieldNoOfs</property> to a field index to obtain its FieldNo property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.InternalCalcFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset includes internally calculated fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TDataSet">InternalCalcFields</property> to discover if the dataset includes fields whose values are provided by the data source but that are not a fields in the physical database table or query. Internally calculated fields are calculated by SQL servers<condition os="Windows"> or the Borland Database Engine in a live query view</condition>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">On TClientDataSet, internally calculated fields are stored with the rest of the data, allowing the developer to sort and filter on the calculated fields. However, internally calculated fields on client datasets are not updated when the data they depend on is updated.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not confuse internally calculated fields with calculated fields, which are computed in an OnCalcFields event.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.NestedDataSets">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists all nested datasets.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">NestedDataSets</property> is a list of the nested detail sets belonging to the data set. Each entry in the list is a dataset of the type specified by NestedDataSetClass.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not use <property namespace="DB" class="TDataSet">NestedDataSets</property> to assign values to dataset fields. Instead, set the DataSetField property of the detail set to reference the appropriate field component.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.NestedDataSetClass">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the class type to use when creating nested datasets.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">TDataSet</property> descendants use <property namespace="DB" class="TDataSet">NestedDataSetClass</property> to specify the class that can be used for nested datasets. By default, this value is the same as the class of the dataset instance.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">NestedDataSetClass</property> is used to check that nested detail sets are the appropriate type when they are assigned to a data set field (by assigning a value to their DataSetField property).</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Reserved">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For internal use only.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not use the <property namespace="DB" class="TDataSet">Reserved</property> property. It is for internal use only.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AggFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains any aggregate fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Some <property namespace="DB" class="TDataSet">TDataSet</property> descendants, such as TClientDataSet, support aggregate fields. Aggregate fields summarize data over groups of records from the dataset (as opposed to calculated fields, which can only summarize data over the fields of a single record). <property namespace="DB" class="TDataSet">AggFields</property> is a collection of all aggregate fields that are supported by the dataset.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The Fields property is a collection of all the dataset's fields that are not aggregate fields. Thus, <property namespace="DB" class="TDataSet">AggFields</property> and Fields are mutually exclusive collections of the dataset's fields. These two properties contain all of the dataset's fields between them.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Bof">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the first record in the dataset is active.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Test <property namespace="DB" class="TDataSet">Bof</property> (beginning of file) to determine if the dataset is positioned at the first record. If <property namespace="DB" class="TDataSet">Bof</property> is true, the active record is unequivocally the first row in the dataset. <property namespace="DB" class="TDataSet">Bof</property> is true when an application.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Opens a dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls a dataset's First method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call a dataset's Prior method, and the method fails because the first row is already active.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls SetRange on an empty range or dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">Bof</property> is false in all other cases.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Bookmark">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the current bookmark in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">Bookmark</property> gets or sets the current bookmark in a dataset. A bookmark marks a location in a dataset so that an application can easily return to that location quickly.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application can read <property namespace="DB" class="TDataSet">Bookmark</property> to retrieve the bookmark associated with the current record, and it can change the current record in the dataset by assigning a saved bookmark value to this property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Unidirectional datasets do not support bookmarks.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.CanModify">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset permits write access to data.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <property namespace="DB" class="TDataSet">TDataSet</property>, this property is false if the dataset is unidirectional, and true otherwise. Descendant classes reimplement this property as follows</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For unidirectional datasets, <property namespace="DB" class="TDataSet">CanModify</property> is always false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For client datasets, <property namespace="DB" class="TDataSet">CanModify</property> reflects the value of the ReadOnly property and whether a data provider supplied a read-only data packet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Other datasets reflect whether the dataset has write access to data.</condition>
                  
            </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSetField">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the persistent T<property namespace="DB" class="TDataSet">DataSetField</property> object that owns a nested dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDataSet">DataSetField</property> when the dataset is the nested detail set of another dataset, such as an Oracle8 nested dataset. Read <property namespace="DB" class="TDataSet">DataSetField</property> to access the data set field component in the master dataset that includes this dataset as a detail. Set <property namespace="DB" class="TDataSet">DataSetField</property> to a field component in the master dataset to assign this dataset as the value of that field.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When setting the <property namespace="DB" class="TDataSet">DataSetField</property> property, the dataset must be of (or a descendant of) the class specified by the master dataset's NestedDataSetClass property. Otherwise, setting <property namespace="DB" class="TDataSet">DataSetField</property> raises an exception. Further, setting <property namespace="DB" class="TDataSet">DataSetField</property> to a T<property namespace="DB" class="TDataSet">DataSetField</property> that is contained in the same dataset raises an exception (A dataset can't be nested in itself).</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Represents the data source of another dataset that supplies values to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <property namespace="DB" class="TDataSet">TDataSet</property>, the <property namespace="DB" class="TDataSet">DataSource</property> property is always nil (Delphi) or NULL (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendant dataset classes that support specifying a data source redeclare and implement methods for getting and setting the <property namespace="DB" class="TDataSet">DataSource</property> property.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.DefaultFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a dataset's underlying field components are generated dynamically when the dataset is opened.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DB" class="TDataSet">DefaultFields</property> to determine whether a dataset uses dynamically generated field components or persistent field components. If <property namespace="DB" class="TDataSet">DefaultFields</property> is true, the dataset uses dynamically allocated field components. If <property namespace="DB" class="TDataSet">DefaultFields</property> is false, the dataset uses persistent field components.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unless persistent field components are assigned to a dataset at design time using the Fields editor, the dataset creates dynamic field components based on the structure of its underlying data when it is opened.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Designer">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a pointer to the Dataset designer for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDataSet">Designer</property> to determine whether the dataset is currently being designed and, if so, to access the dataset designer. When a dataset designer, such as the Fields editor, is created for a dataset at design time, it sets the <property namespace="DB" class="TDataSet">Designer</property> property to itself. When the dataset designer is destroyed, the <property namespace="DB" class="TDataSet">Designer</property> property is set back to nil (Delphi) or NULL (C++). A Dataset designer enables a developer to specify the fields that belong to a dataset at design time.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Eof">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a dataset is positioned at the last record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Test <property namespace="DB" class="TDataSet">Eof</property> (end-of-file) to determine if the active record in a dataset is the last record. If <property namespace="DB" class="TDataSet">Eof</property> is true, the current record is unequivocally the last row in the dataset. <property namespace="DB" class="TDataSet">Eof</property> is true when an application:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Opens an empty dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls a dataset's Last method. (Unless it is a unidirectional dataset)</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call a dataset's Next method, and the method fails because the current record is already the last row in the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls SetRange on an empty range or dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">Eof</property> is false in all other cases.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If both <property namespace="DB" class="TDataSet">Eof</property> and Bof are true, the dataset or range is empty.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.BlockReadSize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines how many record buffers are read in each block.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="DB" class="TDataSet">BlockReadSize</property> to a value greater than 0 puts the dataset in the dsBlockRead state. It remains in that state until you set <property namespace="DB" class="TDataSet">BlockReadSize</property> to 0 or change the dataset's state in some other manner (such as putting it in edit mode).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For all <property namespace="DB" class="TDataSet">TDataSet</property> descendants, data-aware controls are not updated and data events are not triggered when the dataset is in the dsBlockRead state. Thus, you can set <property namespace="DB" class="TDataSet">BlockReadSize</property> to a positive value to scan through the entire dataset quickly without updating data-aware controls.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For BDE-enabled datasets, setting <property namespace="DB" class="TDataSet">BlockReadSize</property> also causes the dataset to fetch database information in blocks of <property namespace="DB" class="TDataSet">BlockReadSize</property> records, which it then buffers. This minimizes traffic between your application and the database server.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of field components associated with the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DB" class="TDataSet">FieldCount</property> to determine the number of fields listed by the Fields property. For datasets with dynamically created fields, <property namespace="DB" class="TDataSet">FieldCount</property> may differ each time a dataset is opened. For datasets with persistent fields, <property namespace="DB" class="TDataSet">FieldCount</property> should be unchanged each time a dataset is open.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TDataSet">FieldCount</property> includes only the fields listed by the Fields property. Any aggregated fields listed by the AggFields property are not included in the count.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Points to the list of field definitions for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">FieldDefs</property> lists the field definitions for a dataset. While an application can examine <property namespace="DB" class="TDataSet">FieldDefs</property> to explore the field definitions for a dataset, it should not change these definitions unless creating a new table with <condition os="Windows">CreateTable or </condition>CreateDataSet.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To access fields and field values in a dataset, use the Fields, AggFields, and FieldValues properties, and the FieldsByName method.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the dataset includes object field descendants, <property namespace="DB" class="TDataSet">FieldDefs</property> represents a hierarchical view of the data, meaning that the definitions include object field definitions. To determine the definitions in a flattened view, use FieldDefList instead.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldDefList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Points to the list of field definitions for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">FieldDefList</property> points to an internal list of field definitions for the dataset. <property namespace="DB" class="TDataSet">FieldDefList</property> represents a flattened view of the data, meaning that object fields in the dataset may be represented by several simple field definitions that represent the constituents of the object field. To determine the definitions in a hierarchical view, use FieldDefs instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To access fields and field values in a dataset, use the Fields, AggFields, and FieldValues properties, and the FieldByName method.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Fields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists all non-aggregate field components of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDataSet">Fields</property> to access field components. If fields are generated dynamically at runtime, the order of field components in <property namespace="DB" class="TDataSet">Fields</property> corresponds directly to the order of columns in the table or tables underlying a dataset. If a dataset uses persistent fields, then the order of field components corresponds to the ordering of fields specified in the <property namespace="DB" class="TDataSet">Fields</property> editor at design time.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When ObjectView is true, the fields are stored hierarchically, meaning any child fields of an object field are referenced by the object field and don't appear sequentially after the object field in the T<property namespace="DB" class="TDataSet">Fields</property>
                     
               <condition language="Delphi">.</condition>
                     
               <condition language="CBuilder">::</condition>
                     
               <property namespace="DB" class="TDataSet">Fields</property> array. When ObjectView is false, the fields are stored sequentially, or flattened out, meaning any child fields of an object field are stored sequentially in the T<property namespace="DB" class="TDataSet">Fields</property>
                     
               <condition language="Delphi">.</condition>
                     
               <condition language="CBuilder">::</condition>
                     
               <property namespace="DB" class="TDataSet">Fields</property> array.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Accessing fields with the <property namespace="DB" class="TDataSet">Fields</property> property is useful for applications that:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Iterate over some or all fields in a dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Work with underlying tables whose internal data structure is unknown at runtime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an application knows the data types of individual fields, then it can read or write individual field values through the <property namespace="DB" class="TDataSet">Fields</property> property. For example, the following statement assigns a field value to the Text property of an edit box:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Edit1.Text := CustTable.Fields.Fields[6].AsString;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Edit1-&gt;Text = CustTable-&gt;Fields-&gt;Fields[0]-&gt;AsString;</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The preferred method for retrieving and assigning field values is to use persistent fields or the FieldByName method.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The Agg<property namespace="DB" class="TDataSet">Fields</property> property is a collection of all the dataset's aggregated fields. Agg<property namespace="DB" class="TDataSet">Fields</property> and <property namespace="DB" class="TDataSet">Fields</property> are mutually exclusive collections of the dataset's fields. These two properties contain all of the dataset's fields between them.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the field components of a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">FieldList</property> contains the names of all field components in the dataset. The fields are stored sequentially, or flattened out, meaning any child fields of an object field are stored as siblings in the T<property namespace="DB" class="TDataSet">FieldList</property>
                     
               <condition language="Delphi">.</condition>
                     
               <condition language="CBuilder">::</condition>Fields array.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FieldValues">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides access to the values for all fields in the active record for the dataset</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDataSet">FieldValues</property> to read and write values for fields in a dataset. FieldName is the name of a field to read from or write to. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FieldName can represent simple field names, qualified field names for subfields of an object field, or aggregated fields such as can be found in the AggFields property. Because of this flexibility, it is often preferable to use the <property namespace="DB" class="TDataSet">FieldValues</property> property (or the FieldByName method) rather than the Fields, FieldList, or AggFields properties, all of which present a more limited selection of the dataset's fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">FieldValues</property> accepts and returns a Variant, so it can handle and convert fields of any type. Because <property namespace="DB" class="TDataSet">FieldValues</property> is the default property for <property namespace="DB" class="TDataSet">TDataSet</property>, you can omit the property name when referencing this property. For example, the following statements are semantically identical and write the value from an edit box into an integer field:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Customers.FieldValues['CustNo'] := Edit1.Text;
Customers['CustNo'] := Edit1.Text;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Customers-&gt;FieldValues["CustNo"] = Edit1-&gt;Text;</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Because <property namespace="DB" class="TDataSet">FieldValues</property> always uses Variants, it may be a somewhat slower method of accessing data, than using a field's native format (for example, using a field's AsXXX property), especially in applications that process large amounts of data.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Found">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether or not moving to a different record is successful.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check the status of <property namespace="DB" class="TDataSet">Found</property> to determine if a call to FindFirst, FindLast, FindNext or, FindPrior succeeds. If <property namespace="DB" class="TDataSet">Found</property> is true, success is indicated. If false, the move to a different record failed.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.IsUniDirectional">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the dataset is unidirectional.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">IsUniDirectional</property> indicates whether the dataset is a descendant of TCustomSQLDataSet. Unidirectional datasets raise exceptions on all navigation methods except for First and Next. They do not support filters, bookmarks, lookup fields, or any other features that require an internal record buffer. You can't use a unidirectional dataset as the source to a data-aware grid.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Modified">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the active record is modified.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check <property namespace="DB" class="TDataSet">Modified</property> to determine if the active record is modified. If <property namespace="DB" class="TDataSet">Modified</property> is true, the active record is modified. If false, the active record is not modified.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>In general, an application need not check the status of <property namespace="DB" class="TDataSet">Modified</property>. Properties, events, and methods of <property namespace="DB" class="TDataSet">TDataSet</property> and its descendants that modify records generally check this status automatically and take appropriate actions based on its value.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.ObjectView">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether fields are stored hierarchically or flattened out in the Fields property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">ObjectView</property> affects the way the Fields property stores object fields and the way data-aware grids display ADT and array fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TDataSet">ObjectView</property> is true, the fields are stored hierarchically in the Fields property, meaning any child fields of an object field are referenced by the object field and don't appear sequentially after the object field in the TFields<condition language="CBuilder">::</condition>
                     
               <condition language="Delphi">.</condition>Fields array. When <property namespace="DB" class="TDataSet">ObjectView</property> is false, the fields are stored sequentially in the Fields property, meaning any child fields of an object field are stored after the object field as siblings in the Fields array. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TDataSet">ObjectView</property> is false, object field types, such as TADTField, are not created.<condition os="Windows"> This switch is provided for increased compatibility with older data-aware controls, which may not handle object field types properly. The default is false for TBDEDataSet, and true for TClientDataSet.</condition>
                  
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the <property namespace="DB" class="TDataSet">ObjectView</property> property of the dataset provided to a TClientDataSet is false, then the TClientDataSet's <property namespace="DB" class="TDataSet">ObjectView</property> property always acts as false, since the data received is already flattened.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.RecordCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the total number of records associated with the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <property namespace="DB" class="TDataSet">TDataSet</property>, <property namespace="DB" class="TDataSet">RecordCount</property> is always -1. Ordinarily an application does not access <property namespace="DB" class="TDataSet">RecordCount</property> at the <property namespace="DB" class="TDataSet">TDataSet</property> level. Instead a redeclared and implemented <property namespace="DB" class="TDataSet">RecordCount</property> property in a descendant class is accessed. <property namespace="DB" class="TDataSet">RecordCount</property> provides a fallback property for derived dataset classes that do not reimplement the property access method.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.RecNo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the active record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">As implemented in <property namespace="DB" class="TDataSet">TDataSet</property>, the value of <property namespace="DB" class="TDataSet">RecNo</property> is always -1. Ordinarily an application does not access <property namespace="DB" class="TDataSet">RecNo</property> at the <property namespace="DB" class="TDataSet">TDataSet</property> level. Instead a re-implemented <property namespace="DB" class="TDataSet">RecNo</property> property in a descendant class such as <condition os="Windows">TTable</condition>
                     
               <condition os="Linux">TClientDataSet</condition> is accessed. <property namespace="DB" class="TDataSet">RecNo</property> provides a fallback property for derived datasets that do not support record numbers.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.RecordSize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the size of a record in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">RecordSize</property> indicates the size needed for internal record buffers. In <property namespace="DB" class="TDataSet">TDataSet</property>, the value of <property namespace="DB" class="TDataSet">RecordSize</property> is always 0 because <property namespace="DB" class="TDataSet">TDataSet</property> does not implement record buffering. Descendant classes that buffer records override the property getter to return the number of bytes in a record buffer.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.SparseArrays">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether a unique TField object is created for each element of an array field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When opening a dataset with an array field, <property namespace="DB" class="TDataSet">SparseArrays</property> determines whether a unique field component is created for each element of the array field. The default is false, where a TField descendant is created for each element of the array field. If you plan to bind data-aware controls to elements of the array field, <property namespace="DB" class="TDataSet">SparseArrays</property> must be set to false. Setting <property namespace="DB" class="TDataSet">SparseArrays</property> to true conserves memory, but does not allow applications to reference individual elements of the array field.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.State">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the current operating mode of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DB" class="TDataSet">State</property> to determine the current operating mode of the dataset. <property namespace="DB" class="TDataSet">State</property> determines what can be done with data in a dataset, such as editing existing records or inserting new ones. The dataset state constantly changes as an application processes data. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Opening a dataset changes <property namespace="DB" class="TDataSet">State</property> from dsInactive to dsBrowse. An application can call Edit to put a dataset into dsEdit state, or call Insert to put a dataset into dsInsert state. If a dataset is a <condition os="Windows">TTable or </condition>TClientDataSet object, an application can call SetKey or SetRange to put the dataset into dsSetKey state.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Posting or canceling edits, insertions, or deletions, changes <property namespace="DB" class="TDataSet">State</property> from its current state to dsBrowse. Closing a dataset changes its state to dsInactive.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Some states, such as dsCalcFields, dsFilter, dsNewValue, dsOldValue, and dsCurValue cannot be seen or set directly by an application. These states are automatically set when OnCalcFields and OnFilterRecord events occur, or when an application accesses certain field properties.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Filter">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the text of the current filter for a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDataSet">Filter</property> to specify a dataset filter. When filtering is applied to a dataset, only those records that meet a filter's conditions are available. <property namespace="DB" class="TDataSet">Filter</property> describes the filter condition. For example, the following filter condition displays only those records where the State field is 'CA' or 'MA':</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">State = 'CA' or State = 'MA'</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When a filter is set, Blank records do not appear unless explicitly included in the filter.  For example:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">State &lt;&gt; 'CA' or State = NULL</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When a field name contains spaces, you must enclose the field name in brackets. For example:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">[Home State] = 'CA' or [Home State] = 'MA'</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DB" class="TDataSet">Filter</property> expressions <condition os="Windows">on remote SQL tables and on client datasets </condition>support field comparisons. For example:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Field1 &gt; Field2</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <condition os="Windows">Field comparisons are not supported against local tables (Paradox, dBASE, Access, FoxPro).</condition>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For a complete list of operators you can use in filter strings, see SettingThe<property namespace="DB" class="TDataSet">Filter</property>Property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DB" class="TDataSet">Filter</property>s are not supported on unidirectional datasets. If you set the <property namespace="DB" class="TDataSet">Filter</property> property of a unidirectional dataset, it raises an exception.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DB" class="TDataSet">Filter</property>Options property controls case sensitivity and filtering on partial comparisons.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications can set <property namespace="DB" class="TDataSet">Filter</property> at runtime to change the dataset's filtering condition (for example, in response to user input). </para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Filtered">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether or not filtering is active for a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check <property namespace="DB" class="TDataSet">Filtered</property> to determine whether or not dataset filtering is in effect. If <property namespace="DB" class="TDataSet">Filtered</property> is true, then filtering is active. To apply filter conditions specified in the Filter property or the OnFilterRecord event handler, set <property namespace="DB" class="TDataSet">Filtered</property> to true. Because unidirectional datasets do not support filters, when you set <property namespace="DB" class="TDataSet">Filtered</property> to true on a unidirectional dataset, it raises an exception.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When filtering is enabled, user edits to a record may mean that the record no longer meets a filter's test condition. The next time an attempt is made to the read the record from the dataset while the filter is in effect, the record is not visible. If that happens, the next record that passes the filter condition becomes the active record.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.FilterOptions">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether or not filtering is case insensitive, and whether or not partial comparisons are permitted when filtering records.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TDataSet">FilterOptions</property> to specify whether or not filtering is case insensitive when filtering on string or character fields, and whether or not partial comparisons for matching filter conditions is allowed.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Because unidirectional datasets do not support filters, when you set the <property namespace="DB" class="TDataSet">FilterOptions</property> property of a unidirectional dataset, it raises an exception.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">By default, <property namespace="DB" class="TDataSet">FilterOptions</property> is set to an empty set. For filters based on string fields, set <property namespace="DB" class="TDataSet">FilterOptions</property> to foCaseInsensitive to catch all variations on a string regardless of capitalization.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When a string in a filter ends with an asterisk (*), it can be used to match partial strings. To disable matching of partial strings and to treat the asterisk as a literal character in string comparisons, set <property namespace="DB" class="TDataSet">FilterOptions</property> to include foNoPartialCompare.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Active">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether or not a dataset is open.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use 
		<property namespace="DB" class="TDataSet">Active</property> to determine
		or set whether a dataset is populated with data. When 
		<property namespace="DB" class="TDataSet">Active</property> is false, the
		dataset is closed; the dataset cannot read or write data and data-aware
		controls can not use it to fetch data or post edits. When 
		<property namespace="DB" class="TDataSet">Active</property> is true, the
		dataset can be populated with data. It can read data from a database or other
		source (such as a provider). Depending on the CanModify property, active
		datasets can post changes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting 
		<property namespace="DB" class="TDataSet">Active</property> to
		true:</para>
            <list xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="number">
                     
               <item>
                        
                  <para>Generates a BeforeOpen event.</para>
                     
               </item>
                     
               <item>
                        
                  <para>Sets the dataset state to dsBrowse.</para>
                     
               </item>
                     
               <item>
                        
                  <para>Establishes a way to fetch data (typically by opening a
			 cursor).</para>
                     
               </item>
                     
               <item>
                        
                  <para>Generates an AfterOpen event.</para>
                     
               </item>
                  
            </list>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an error occurs while opening the dataset, dataset state is set to
		dsInactive, and any cursor is closed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting 
		<property namespace="DB" class="TDataSet">Active</property> to
		false:</para>
            <list xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="number">
                     
               <item>
                        
                  <para>Triggers a BeforeClose event.</para>
                     
               </item>
                     
               <item>
                        
                  <para>Sets the State property to dsInactive.</para>
                     
               </item>
                     
               <item>
                        
                  <para>Closes the cursor.</para>
                     
               </item>
                     
               <item>
                        
                  <para>Triggers an AfterClose event.</para>
                     
               </item>
                  
            </list>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application must set 
		<property namespace="DB" class="TDataSet">Active</property> to false
		before changing other properties that affect the status of a database or the
		controls that display data in an application.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Calling the Open method sets 
		  <property namespace="DB" class="TDataSet">Active</property> to true;
		  calling the Close method sets 
		  <property namespace="DB" class="TDataSet">Active</property> to
		  false.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.AutoCalcFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines when the OnCalcFields event is triggered and when lookup field values are calculated.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DB" class="TDataSet">AutoCalcFields</property> to control when the OnCalcFields event is triggered to update calculated fields and when lookup fields are calculated.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A calculated field is one that derives its value from the values of one or more fields in the active record, sometimes with additional processing. Lookup fields are fields whose values come from a secondary dataset or lookup cache. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para> Unidirectional datasets support calculated fields but not unidirectional fields. For unidirectional datasets, OnCalcFields only controls when calculated fields are updated.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TDataSet">AutoCalcFields</property> is true (the default), Lookup fields are recalculated and OnCalcFields is triggered when:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The dataset is opened.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The dataset is put into dsEdit state.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Focus moves from one visual control to another, or from one column to another in a data-aware grid and modifications have been made to the record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DB" class="TDataSet">AutoCalcFields</property> is false, Lookup fields are recalculated and the OnCalcFields event occurs only when</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The dataset is opened.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The dataset is put into dsEdit state.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A record is retrieved from a database.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an application permits users to change data, OnCalcFields is frequently triggered. In these cases an application may set <property namespace="DB" class="TDataSet">AutoCalcFields</property> to false to reduce the frequency with which the OnCalcFields event occurs and with which lookup values are fetched. </para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.Name">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Designates the name of the dataset as referenced by other components.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DB" class="TDataSet">Name</property> to change the name of a dataset to reflect its purpose in the current application. By default, the IDE assigns sequential names based on the type of the component, such as 'Table1', 'Table2', and so on. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the name of the dataset is changed at design time, any of its field components that use the dataset name as a prefix to the field name are updated as well.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeOpen">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs before an application executes a request to open a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforeOpen</event> event handler to take specific action before an application opens a dataset for viewing or editing. <event namespace="DB" class="TDataSet">BeforeOpen</event> is triggered when an application sets the Active property to true for a dataset or an application calls Open.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterOpen">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application completes opening a dataset and before any data access occurs.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterOpen</event> event handler to take specific action immediately after an application opens the dataset. <event namespace="DB" class="TDataSet">AfterOpen</event> is called after the dataset establishes access to its data and the dataset is put into dsBrowse state. For example, an <event namespace="DB" class="TDataSet">AfterOpen</event> event handler might check an ini file to determine the last record touched in the dataset the previous time the application ran, and position the dataset at that record.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeClose">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs immediately before the dataset closes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforeClose</event> event to take specific action before an application closes a dataset. Calling Close or setting the Active property to false results in a call to the <event namespace="DB" class="TDataSet">BeforeClose</event> event handler.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterClose">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application closes a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterClose</event> event handler to take specific action immediately after an application closes a dataset. For example, as a security measure, an application might clear a PASSWORD entry from the Params property of a TSQLConnection component when the dataset is closed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <event namespace="DB" class="TDataSet">AfterClose</event> is called after a dataset is closed and the dataset state is set to dsInactive.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeInsert">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs before an application enters insert mode.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforeInsert</event> event handler to take specific action before an application inserts or appends a new record. The Insert or Append method generates a <event namespace="DB" class="TDataSet">BeforeInsert</event> method before it sets the dataset into dsInsert state.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterInsert">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application inserts a new record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterInsert</event> event handler to take specific action immediately after an application inserts a record. The Insert and Append methods generate an <event namespace="DB" class="TDataSet">AfterInsert</event> event after inserting or appending a new record.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeEdit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs before an application enters edit mode for the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforeEdit</event> event handler to take specific action before an application enables editing of the active record. For example, an application that keeps a log of database edits could use the <event namespace="DB" class="TDataSet">BeforeEdit</event> event to record the edit request, time, and user before entering edit state.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterEdit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application starts editing a record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterEdit</event> event handler to take specific action immediately after dataset enters edit mode. <event namespace="DB" class="TDataSet">AfterEdit</event> is called by Edit after it enables editing of a record, recalculates calculated fields, and calls the data event handler to process a record change.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforePost">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs before an application posts changes for the active record to the <condition os="Windows">database or </condition>change log.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforePost</event> event handler to take specific action before an application posts dataset changes. <event namespace="DB" class="TDataSet">BeforePost</event> is triggered when an application calls the Post method. Post checks to make sure all required fields are present, then calls <event namespace="DB" class="TDataSet">BeforePost</event> before posting the record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application might use <event namespace="DB" class="TDataSet">BeforePost</event> to perform validity checks on data changes before committing them. If it encountered a validity problem, it could call Abort to cancel the Post operation (Delphi) or throw an exception (C++).</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterPost">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application writes the active record to the <condition os="Windows">database or </condition>change log and returns to browse state.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterPost</event> event handler to take specific action immediately after an application posts a change to the active record. <event namespace="DB" class="TDataSet">AfterPost</event> is called after a modification or insertion is made to a record.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeCancel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs before an application executes a request to cancel changes to the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforeCancel</event> event to take specific action before an application carries out a request to cancel changes. <event namespace="DB" class="TDataSet">BeforeCancel</event> is called by the Cancel method before it cancels a dataset operation such as Edit, Insert, or Delete.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application might use the <event namespace="DB" class="TDataSet">BeforeCancel</event> event to record a user's changes in an undo buffer.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterCancel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application completes a request to cancel modifications to the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterCancel</event> event handler to take specific action after an application cancels changes to the active record. <event namespace="DB" class="TDataSet">AfterCancel</event> is called by the Cancel method after it updates the current position, releases the lock on the active record if necessary, and sets the dataset state to dsBrowse. If an application requires additional processing before returning control to a user after a Cancel event, code it in the <event namespace="DB" class="TDataSet">AfterCancel</event> event.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeDelete">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs before an application attempts to delete the active record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforeDelete</event> event handler to take specific action before an application deletes the active record. <event namespace="DB" class="TDataSet">BeforeDelete</event> is called by Delete before it actually deletes a record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In Delphi, making use of this event an application might, for example, display a dialog box asking for confirmation before deleting the record. On denial of confirmation, the application could abort the deletion by calling the Abort procedure.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterDelete">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application deletes a record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterDelete</event> event handler to take specific action immediately after an application deletes the active record in a dataset. <event namespace="DB" class="TDataSet">AfterDelete</event> is called by Delete after it deletes the record, sets the dataset state to dsBrowse, and repositions the current record.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeScroll">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs before an application scrolls from one record to another.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforeScroll</event> event handler to take specific action immediately before an application scrolls to another record as a result of a call to the First, Last, MoveBy, Next, Prior, FindKey, FindFirst, FindNext, FindLast, FindPrior, and Locate methods. <event namespace="DB" class="TDataSet">BeforeScroll</event> is called before all other events triggered by these methods and any other methods that switch from record to record in the dataset.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterScroll">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application scrolls from one record to another.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterScroll</event> event handler to take specific action immediately after an application scrolls to another record as a result of a call to the First, Last, MoveBy, Next, Prior, FindKey, FindFirst, FindNext, FindLast, FindPrior, and Locate methods. <event namespace="DB" class="TDataSet">AfterScroll</event> is called after all other events triggered by these methods and any other methods that switch from record to record in the dataset.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.BeforeRefresh">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs immediately before an application refreshes the data in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write a <event namespace="DB" class="TDataSet">BeforeRefresh</event> event handler to take specific action immediately before an application updates the records in the dataset. <event namespace="DB" class="TDataSet">BeforeRefresh</event> is generated by calls to the Refresh method.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.AfterRefresh">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs after an application refreshes the data in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">AfterRefresh</event> event handler to take specific action immediately after an application has updated the records in the dataset. <event namespace="DB" class="TDataSet">AfterRefresh</event> is generated by calls to the Refresh method.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnCalcFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when an application recalculates calculated fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">OnCalcFields</event> event handler to take specific action when an application recalculates calculated fields. A calculated field is one that derives its value from the values in one or more fields in the dataset, sometimes with additional processing.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <event namespace="DB" class="TDataSet">OnCalcFields</event> is triggered when:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A dataset is opened.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A dataset is put into dsEdit state.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A record is retrieved from a database.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the AutoCalcFields property is true, <event namespace="DB" class="TDataSet">OnCalcFields</event> is also triggered when:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Focus moves from one visual control to another, or from one column to another is a data-aware grid control and modifications were made to the record.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When the AutoCalcFields property is true, an <event namespace="DB" class="TDataSet">OnCalcFields</event> event handler should not modify the dataset (or a linked dataset if it is part of a master-detail relationship), because such modifications retrigger the OnCalcField event, leading to infinite recursion.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an application permits users to change data, <event namespace="DB" class="TDataSet">OnCalcFields</event> is frequently triggered. To reduce the frequency with which <event namespace="DB" class="TDataSet">OnCalcFields</event> occurs, set AutoCalcFields to false.</para>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When the dataset is the master table of a master-detail relationship, <event namespace="DB" class="TDataSet">OnCalcFields</event> occurs before detail sets have been synchronized with the master table.</para>
                  
            </warning>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnDeleteError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when an application attempts to delete a record and an exception is raised.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">OnDeleteError</event> event handler to handle exceptions that occur when an attempt to delete a record fails. </para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnEditError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when an application attempts to modify or insert a record and an exception is raised.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">OnEditError</event> event handler to handle exceptions that occur when an attempt to edit a record fails. </para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnFilterRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs each time a different record in the dataset becomes the active record and filtering is enabled.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">OnFilterRecord</event> event handler to specify for each record in a dataset whether it should be visible to the application. To indicate that a record passes the filter condition, the <event namespace="DB" class="TDataSet">OnFilterRecord</event> event handler must set the Accept parameter to true. To exclude a record, set the Accept parameter to false.<condition os="Windows"> Most <event namespace="DB" class="TDataSet">TDataSet</event> descendants (such as ADO datasets or BDE-based datasets) initialize Accept to true before calling the <event namespace="DB" class="TDataSet">OnFilterRecord</event> event handler.</condition>
                  
            </para>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not supply an <event namespace="DB" class="TDataSet">OnFilterRecord</event> event handler to a unidirectional dataset. Unidirectional datasets do not support filters, and assigning an <event namespace="DB" class="TDataSet">OnFilterRecord</event> event handler causes the dataset to raise an exception.</para>
                  
            </warning>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Filtering is enabled if the Filtered property is true. When an application is processing a filter, the State property for the dataset is dsFilter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use an <event namespace="DB" class="TDataSet">OnFilterRecord</event> event handler to filter records using a criterion that can't be implemented using the Filter property.<condition os="Windows"> For example, using the Filter property, field comparisons are not supported against local tables (Paradox, dBASE, Access, FoxPro), but an <event namespace="DB" class="TDataSet">OnFilterRecord</event> event handler can implement any criterion at all.</condition>
                  
            </para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Be sure that any interactions between the Filter property and the <event namespace="DB" class="TDataSet">OnFilterRecord</event> event handler do not result in an empty filter set when they are used simultaneously in an application.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnNewRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when an application inserts or appends a new dataset record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">OnNewRecord</event> event handler to take specific actions as an application inserts or appends a new record. <event namespace="DB" class="TDataSet">OnNewRecord</event> is called as part of the insert or append process. An application might use the <event namespace="DB" class="TDataSet">OnNewRecord</event> event to set initial values for a record or as a way of implementing cascading insertions in related datasets.</para>
         </comments>
      </member>
      <member name="E:Borland.Vcl.Db.Borland.Vcl.Db.OnPostError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when an application attempts to modify or insert a record and an exception is raised.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DB" class="TDataSet">OnPostError</event> event handler to handle exceptions that occur when an attempt to post a record fails. </para>
         </comments>
      </member>
      <member name="T:Borland.Vcl.Db.IDBSession">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">IDBSession</class> is the interface for database sessions.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="Db">IDBSession</class> is a generic interface for logging into a database session. Components that allow an application to provide a password for opening password-protected tables or databases implement <class namespace="Db">IDBSession</class>. This allows the global PasswordDialog function to work with any component that implements <class namespace="Db">IDBSession</class> to add or remove passwords.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Component Method declarations that use <class namespace="Db">IDBSession</class> use the _di_<class namespace="Db">IDBSession</class> type instead. This type is a DelphiInterface wrapper around the <class namespace="Db">IDBSession</class> interface:</para>
            
            </note>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">typedef System::DelphiInterfaceDelphiInterface_object&lt; IDBSession &gt;  _di_IDBSession;</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.AddPassword">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Logs in to the session using a specified password.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="Db" class="IDBSession">AddPassword</method> to supply a password to a session. After calling <method namespace="Db" class="IDBSession">AddPassword</method>, the application can open any tables or databases protected by that password from within the session until the RemovePassword or RemoveAllPasswords method retracts the password. If the password-protected table is closed, it can be reopened without resupplying the password.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">APassword is the password to supply. </para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.RemovePassword">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes a specified password from the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="IDBSession">RemovePassword</method> delete a specified password from the session. After a call to <method namespace="Db" class="IDBSession">RemovePassword</method>, any password-protected tables or databases that require the specified password can't be reopened until the password is supplied again by a call to the AddPassword method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">APassword is the password to remove. It is a string that was previously supplied by the AddPassword method.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.Borland.Vcl.Db.RemoveAllPasswords">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes all passwords from the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="Db" class="IDBSession">RemoveAllPasswords</method> to delete all passwords that were previously supplied by a call to AddPassword. After a call to <method namespace="Db" class="IDBSession">RemoveAllPasswords</method>, no password-protected tables or databases can be reopened without resupplying a password using the AddPassword method.</para>
         </comments>
      </member>
      <member name="P:Borland.Vcl.Db.Borland.Vcl.Db.PasswordDialog">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Displays a dialog box that prompts the user for the password of a local password-protected table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="DBPWDlg">PasswordDialog</routine> to allow the user to enter a password for a password-protected <condition os="Windows">Paradox or dBase </condition>table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ASession is the interface of a component that represents the session onto which the user logs in.<condition os="Windows"> Typically, this is the interface of a TSession component.</condition>
            
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the user clicks OK in the dialog box, <routine namespace="DBPWDlg">PasswordDialog</routine> returns true. Otherwise it returns false.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>
                  
                  <condition os="Windows">When an application opens a Paradox or dBASE table that requires a password, the user is prompted to enter a password unless the Session already has a valid password for that table. </condition>
               
               </para>
            
            </note>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.DatabaseError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates and raises an E<routine namespace="Db">DatabaseError</routine> exception.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Db">DatabaseError</routine> to raise an E<routine namespace="Db">DatabaseError</routine> exception, using Message as the text for the exception. If a component is provided as the second parameter, the message is prefixed by the name of the component to help in interpreting the error message. In C++, the second parameter can be NULL.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calling <routine namespace="Db">DatabaseError</routine> rather than creating and raising the exception directly in code reduces the overall code size of the application.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.DatabaseErrorFmt">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates and raises an EDatabaseError exception with a formatted error message.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call DatabaseError to raise an EDatabaseError exception. The error message for the exception is assembled from the format string specified by the Message parameter and applying the Args parameter. In C++, the Args_Size parameter specifies the index of the last argument in Args (one less than the number of arguments). If a component is provided as the final parameter, the message is prefixed by the name of the component to help in interpreting the error message.<condition language="CBuilder"/>In C++, this parameter can be NULL.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Db">DatabaseErrorFmt</routine> rather than creating and raising the exception directly in code to reduce the overall code size of the application.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.GetFieldProperty">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a TField object for a dataset and data control.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="Db">GetFieldProperty</routine> returns a reference to a field given the dataset component that contains the field, the data-aware control that accesses the field, and the field name. <routine namespace="Db">GetFieldProperty</routine> returns a value of type TField.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DataSet is the dataset component containing the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Control is the data-aware control that accesses the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FieldName is the name of the field for which to return a TField.</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.ExtractFieldName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the next name in a semicolon-delimited string of field names.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="Db">ExtractFieldName</routine> when parsing a semicolon-delimited string of names such as those used as parameters to many methods on database-specific objects.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fields is a semicolon-delimited string of names.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pos is the starting position of the next string in Fields. On exit from the function, Pos is updated to the starting position of the following string. If there is no following string, on exit, Pos is one more than the length of Fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="Db">ExtractFieldName</routine> returns a string with the single name that began at position Pos when the function was called.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="Db">ExtractFieldName</routine> is typically used in a loop, as follows:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pos := 1;</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">while Pos &lt;= Length(FieldNames) do
begin
  Name := ExtractFieldName(FieldNames, Pos);
  // do something with Name
end;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">int Pos = 1;</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">while (Pos &lt;= FieldNames.Length())
{
  AnsiString Name = ExtractFieldName(FieldNames, Pos);
  // do something with Name
}</codeBlock>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.RegisterFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Registers a set of field components so that they appear in the Dataset designer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Db">RegisterFields</routine> to allow custom descendants of TField to appear in the field type drop down of the new field dialog box.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The FieldClasses parameter is an array of TField descendants.<condition language="CBuilder"/>In C++, the FieldClasses_Size is the index of the last class in the array (one less than the number of class types).</para>
         </comments>
      </member>
      <member name="M:Borland.Vcl.Db.VarTypeToDataType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the field type value that most closely corresponds to a Variant type.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Db">VarTypeToDataType</routine> to infer the type of field component that should hold a value, given its Variant type. Use the VarType function to obtain a Variant type from a Variant.</para>
         </comments>
      </member>
   </members>
</doc>